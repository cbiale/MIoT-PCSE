
Proyecto Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a330  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  0800a4e0  0800a4e0  0001a4e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa80  0800aa80  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa80  0800aa80  0001aa80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa88  0800aa88  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa88  0800aa88  0001aa88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa8c  0800aa8c  0001aa8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800aa90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000009c0  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b94  20000b94  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001420d  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002fbb  00000000  00000000  00034454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011b8  00000000  00000000  00037410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000da1  00000000  00000000  000385c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029116  00000000  00000000  00039369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001780f  00000000  00000000  0006247f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eed7b  00000000  00000000  00079c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005eb0  00000000  00000000  00168a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  0016e8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a4c8 	.word	0x0800a4c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	0800a4c8 	.word	0x0800a4c8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001014:	f001 fa7a 	bl	800250c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001018:	f000 f80c 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101c:	f000 f8f0 	bl	8001200 <MX_GPIO_Init>
  MX_ETH_Init();
 8001020:	f000 f872 	bl	8001108 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001024:	f000 f8be 	bl	80011a4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	sistema_iniciar();
 8001028:	f001 f8aa 	bl	8002180 <sistema_iniciar>
	while (1) {
		sistema_actualizar();
 800102c:	f001 f8ba 	bl	80021a4 <sistema_actualizar>
 8001030:	e7fc      	b.n	800102c <main+0x1c>
	...

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	; 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0320 	add.w	r3, r7, #32
 800103e:	2230      	movs	r2, #48	; 0x30
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f005 fe03 	bl	8006c4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <SystemClock_Config+0xcc>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a27      	ldr	r2, [pc, #156]	; (8001100 <SystemClock_Config+0xcc>)
 8001062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b25      	ldr	r3, [pc, #148]	; (8001100 <SystemClock_Config+0xcc>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001074:	2300      	movs	r3, #0
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	4b22      	ldr	r3, [pc, #136]	; (8001104 <SystemClock_Config+0xd0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a21      	ldr	r2, [pc, #132]	; (8001104 <SystemClock_Config+0xd0>)
 800107e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <SystemClock_Config+0xd0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001090:	2301      	movs	r3, #1
 8001092:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001094:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109a:	2302      	movs	r3, #2
 800109c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010a4:	2304      	movs	r3, #4
 80010a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010a8:	23a8      	movs	r3, #168	; 0xa8
 80010aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010b0:	2307      	movs	r3, #7
 80010b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 fa9d 	bl	80045f8 <HAL_RCC_OscConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010c4:	f000 f94a 	bl	800135c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c8:	230f      	movs	r3, #15
 80010ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010cc:	2302      	movs	r3, #2
 80010ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2105      	movs	r1, #5
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 fcfe 	bl	8004ae8 <HAL_RCC_ClockConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010f2:	f000 f933 	bl	800135c <Error_Handler>
  }
}
 80010f6:	bf00      	nop
 80010f8:	3750      	adds	r7, #80	; 0x50
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40007000 	.word	0x40007000

08001108 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <MX_ETH_Init+0x84>)
 800110e:	4a20      	ldr	r2, [pc, #128]	; (8001190 <MX_ETH_Init+0x88>)
 8001110:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <MX_ETH_Init+0x8c>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001118:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <MX_ETH_Init+0x8c>)
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <MX_ETH_Init+0x8c>)
 8001120:	22e1      	movs	r2, #225	; 0xe1
 8001122:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <MX_ETH_Init+0x8c>)
 8001126:	2200      	movs	r2, #0
 8001128:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_ETH_Init+0x8c>)
 800112c:	2200      	movs	r2, #0
 800112e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <MX_ETH_Init+0x8c>)
 8001132:	2200      	movs	r2, #0
 8001134:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <MX_ETH_Init+0x84>)
 8001138:	4a16      	ldr	r2, [pc, #88]	; (8001194 <MX_ETH_Init+0x8c>)
 800113a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <MX_ETH_Init+0x84>)
 800113e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001142:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_ETH_Init+0x84>)
 8001146:	4a14      	ldr	r2, [pc, #80]	; (8001198 <MX_ETH_Init+0x90>)
 8001148:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_ETH_Init+0x84>)
 800114c:	4a13      	ldr	r2, [pc, #76]	; (800119c <MX_ETH_Init+0x94>)
 800114e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_ETH_Init+0x84>)
 8001152:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001156:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <MX_ETH_Init+0x84>)
 800115a:	f001 ff63 	bl	8003024 <HAL_ETH_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001164:	f000 f8fa 	bl	800135c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001168:	2238      	movs	r2, #56	; 0x38
 800116a:	2100      	movs	r1, #0
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <MX_ETH_Init+0x98>)
 800116e:	f005 fd6e 	bl	8006c4e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_ETH_Init+0x98>)
 8001174:	2221      	movs	r2, #33	; 0x21
 8001176:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_ETH_Init+0x98>)
 800117a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800117e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <MX_ETH_Init+0x98>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000368 	.word	0x20000368
 8001190:	40028000 	.word	0x40028000
 8001194:	20000924 	.word	0x20000924
 8001198:	200002c8 	.word	0x200002c8
 800119c:	20000228 	.word	0x20000228
 80011a0:	200001f0 	.word	0x200001f0

080011a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011b2:	2204      	movs	r2, #4
 80011b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011b8:	2202      	movs	r2, #2
 80011ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c4:	2202      	movs	r2, #2
 80011c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011dc:	2201      	movs	r2, #1
 80011de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e8:	f003 f8e8 	bl	80043bc <HAL_PCD_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80011f2:	f000 f8b3 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000418 	.word	0x20000418

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08c      	sub	sp, #48	; 0x30
 8001204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
 800121a:	4b4c      	ldr	r3, [pc, #304]	; (800134c <MX_GPIO_Init+0x14c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a4b      	ldr	r2, [pc, #300]	; (800134c <MX_GPIO_Init+0x14c>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b49      	ldr	r3, [pc, #292]	; (800134c <MX_GPIO_Init+0x14c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	4b45      	ldr	r3, [pc, #276]	; (800134c <MX_GPIO_Init+0x14c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a44      	ldr	r2, [pc, #272]	; (800134c <MX_GPIO_Init+0x14c>)
 800123c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b42      	ldr	r3, [pc, #264]	; (800134c <MX_GPIO_Init+0x14c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b3e      	ldr	r3, [pc, #248]	; (800134c <MX_GPIO_Init+0x14c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a3d      	ldr	r2, [pc, #244]	; (800134c <MX_GPIO_Init+0x14c>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b3b      	ldr	r3, [pc, #236]	; (800134c <MX_GPIO_Init+0x14c>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b37      	ldr	r3, [pc, #220]	; (800134c <MX_GPIO_Init+0x14c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a36      	ldr	r2, [pc, #216]	; (800134c <MX_GPIO_Init+0x14c>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b34      	ldr	r3, [pc, #208]	; (800134c <MX_GPIO_Init+0x14c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	4b30      	ldr	r3, [pc, #192]	; (800134c <MX_GPIO_Init+0x14c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a2f      	ldr	r2, [pc, #188]	; (800134c <MX_GPIO_Init+0x14c>)
 8001290:	f043 0308 	orr.w	r3, r3, #8
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <MX_GPIO_Init+0x14c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <MX_GPIO_Init+0x14c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a28      	ldr	r2, [pc, #160]	; (800134c <MX_GPIO_Init+0x14c>)
 80012ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <MX_GPIO_Init+0x14c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f244 0181 	movw	r1, #16513	; 0x4081
 80012c4:	4822      	ldr	r0, [pc, #136]	; (8001350 <MX_GPIO_Init+0x150>)
 80012c6:	f002 fb99 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2140      	movs	r1, #64	; 0x40
 80012ce:	4821      	ldr	r0, [pc, #132]	; (8001354 <MX_GPIO_Init+0x154>)
 80012d0:	f002 fb94 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	481b      	ldr	r0, [pc, #108]	; (8001358 <MX_GPIO_Init+0x158>)
 80012ec:	f002 f9c2 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80012f0:	f244 0381 	movw	r3, #16513	; 0x4081
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4811      	ldr	r0, [pc, #68]	; (8001350 <MX_GPIO_Init+0x150>)
 800130a:	f002 f9b3 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800130e:	2340      	movs	r3, #64	; 0x40
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	480b      	ldr	r0, [pc, #44]	; (8001354 <MX_GPIO_Init+0x154>)
 8001326:	f002 f9a5 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin D0_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|D0_Pin;
 800132a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800132e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_GPIO_Init+0x154>)
 8001340:	f002 f998 	bl	8003674 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001344:	bf00      	nop
 8001346:	3730      	adds	r7, #48	; 0x30
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800
 8001350:	40020400 	.word	0x40020400
 8001354:	40021800 	.word	0x40021800
 8001358:	40020800 	.word	0x40020800

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001364:	e7fe      	b.n	8001364 <Error_Handler+0x8>
	...

08001368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_MspInit+0x4c>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <HAL_MspInit+0x4c>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <HAL_MspInit+0x4c>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_MspInit+0x4c>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <HAL_MspInit+0x4c>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_MspInit+0x4c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800

080013b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a17      	ldr	r2, [pc, #92]	; (8001434 <HAL_ADC_MspInit+0x7c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d127      	bne.n	800142a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <HAL_ADC_MspInit+0x80>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a15      	ldr	r2, [pc, #84]	; (8001438 <HAL_ADC_MspInit+0x80>)
 80013e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <HAL_ADC_MspInit+0x80>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_ADC_MspInit+0x80>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <HAL_ADC_MspInit+0x80>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_ADC_MspInit+0x80>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001412:	2301      	movs	r3, #1
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001416:	2303      	movs	r3, #3
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <HAL_ADC_MspInit+0x84>)
 8001426:	f002 f925 	bl	8003674 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800142a:	bf00      	nop
 800142c:	3728      	adds	r7, #40	; 0x28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40012000 	.word	0x40012000
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000

08001440 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08e      	sub	sp, #56	; 0x38
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a55      	ldr	r2, [pc, #340]	; (80015b4 <HAL_ETH_MspInit+0x174>)
 800145e:	4293      	cmp	r3, r2
 8001460:	f040 80a4 	bne.w	80015ac <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
 8001468:	4b53      	ldr	r3, [pc, #332]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	4a52      	ldr	r2, [pc, #328]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 800146e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001472:	6313      	str	r3, [r2, #48]	; 0x30
 8001474:	4b50      	ldr	r3, [pc, #320]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147c:	623b      	str	r3, [r7, #32]
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	4b4c      	ldr	r3, [pc, #304]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	4a4b      	ldr	r2, [pc, #300]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 800148a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800148e:	6313      	str	r3, [r2, #48]	; 0x30
 8001490:	4b49      	ldr	r3, [pc, #292]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001498:	61fb      	str	r3, [r7, #28]
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
 80014a0:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	4a44      	ldr	r2, [pc, #272]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 80014a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80014aa:	6313      	str	r3, [r2, #48]	; 0x30
 80014ac:	4b42      	ldr	r3, [pc, #264]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014b4:	61bb      	str	r3, [r7, #24]
 80014b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	4a3d      	ldr	r2, [pc, #244]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6313      	str	r3, [r2, #48]	; 0x30
 80014c8:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	2300      	movs	r3, #0
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	4b37      	ldr	r3, [pc, #220]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	4a36      	ldr	r2, [pc, #216]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6313      	str	r3, [r2, #48]	; 0x30
 80014e4:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	4a2f      	ldr	r2, [pc, #188]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001500:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	4a28      	ldr	r2, [pc, #160]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 8001516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800151a:	6313      	str	r3, [r2, #48]	; 0x30
 800151c:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <HAL_ETH_MspInit+0x178>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001528:	2332      	movs	r3, #50	; 0x32
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001538:	230b      	movs	r3, #11
 800153a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001540:	4619      	mov	r1, r3
 8001542:	481e      	ldr	r0, [pc, #120]	; (80015bc <HAL_ETH_MspInit+0x17c>)
 8001544:	f002 f896 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001548:	2386      	movs	r3, #134	; 0x86
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001554:	2303      	movs	r3, #3
 8001556:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001558:	230b      	movs	r3, #11
 800155a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001560:	4619      	mov	r1, r3
 8001562:	4817      	ldr	r0, [pc, #92]	; (80015c0 <HAL_ETH_MspInit+0x180>)
 8001564:	f002 f886 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800157a:	230b      	movs	r3, #11
 800157c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001582:	4619      	mov	r1, r3
 8001584:	480f      	ldr	r0, [pc, #60]	; (80015c4 <HAL_ETH_MspInit+0x184>)
 8001586:	f002 f875 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800158a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800159c:	230b      	movs	r3, #11
 800159e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a4:	4619      	mov	r1, r3
 80015a6:	4808      	ldr	r0, [pc, #32]	; (80015c8 <HAL_ETH_MspInit+0x188>)
 80015a8:	f002 f864 	bl	8003674 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80015ac:	bf00      	nop
 80015ae:	3738      	adds	r7, #56	; 0x38
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40028000 	.word	0x40028000
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020800 	.word	0x40020800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40021800 	.word	0x40021800

080015cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a19      	ldr	r2, [pc, #100]	; (8001650 <HAL_I2C_MspInit+0x84>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d12c      	bne.n	8001648 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <HAL_I2C_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a17      	ldr	r2, [pc, #92]	; (8001654 <HAL_I2C_MspInit+0x88>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_I2C_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800160a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800160e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001610:	2312      	movs	r3, #18
 8001612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800161c:	2304      	movs	r3, #4
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	480c      	ldr	r0, [pc, #48]	; (8001658 <HAL_I2C_MspInit+0x8c>)
 8001628:	f002 f824 	bl	8003674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_I2C_MspInit+0x88>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_I2C_MspInit+0x88>)
 8001636:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800163a:	6413      	str	r3, [r2, #64]	; 0x40
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_I2C_MspInit+0x88>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001648:	bf00      	nop
 800164a:	3728      	adds	r7, #40	; 0x28
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40005400 	.word	0x40005400
 8001654:	40023800 	.word	0x40023800
 8001658:	40020400 	.word	0x40020400

0800165c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a19      	ldr	r2, [pc, #100]	; (80016e0 <HAL_UART_MspInit+0x84>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d12c      	bne.n	80016d8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_UART_MspInit+0x88>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <HAL_UART_MspInit+0x88>)
 8001688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_UART_MspInit+0x88>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_UART_MspInit+0x88>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a10      	ldr	r2, [pc, #64]	; (80016e4 <HAL_UART_MspInit+0x88>)
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_UART_MspInit+0x88>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016c8:	2307      	movs	r3, #7
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <HAL_UART_MspInit+0x8c>)
 80016d4:	f001 ffce 	bl	8003674 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016d8:	bf00      	nop
 80016da:	3728      	adds	r7, #40	; 0x28
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40004800 	.word	0x40004800
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020c00 	.word	0x40020c00

080016ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800170c:	d13f      	bne.n	800178e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <HAL_PCD_MspInit+0xac>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a20      	ldr	r2, [pc, #128]	; (8001798 <HAL_PCD_MspInit+0xac>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <HAL_PCD_MspInit+0xac>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800172a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800173c:	230a      	movs	r3, #10
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4815      	ldr	r0, [pc, #84]	; (800179c <HAL_PCD_MspInit+0xb0>)
 8001748:	f001 ff94 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800174c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	480e      	ldr	r0, [pc, #56]	; (800179c <HAL_PCD_MspInit+0xb0>)
 8001762:	f001 ff87 	bl	8003674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001766:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <HAL_PCD_MspInit+0xac>)
 8001768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176a:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <HAL_PCD_MspInit+0xac>)
 800176c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001770:	6353      	str	r3, [r2, #52]	; 0x34
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <HAL_PCD_MspInit+0xac>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a07      	ldr	r2, [pc, #28]	; (8001798 <HAL_PCD_MspInit+0xac>)
 800177c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_PCD_MspInit+0xac>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800178e:	bf00      	nop
 8001790:	3728      	adds	r7, #40	; 0x28
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	40020000 	.word	0x40020000

080017a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <NMI_Handler+0x4>

080017a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <HardFault_Handler+0x4>

080017ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <MemManage_Handler+0x4>

080017b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <BusFault_Handler+0x4>

080017b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <UsageFault_Handler+0x4>

080017be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ec:	f000 fee0 	bl	80025b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return 1;
 80017f8:	2301      	movs	r3, #1
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <_kill>:

int _kill(int pid, int sig)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800180e:	f005 fa71 	bl	8006cf4 <__errno>
 8001812:	4603      	mov	r3, r0
 8001814:	2216      	movs	r2, #22
 8001816:	601a      	str	r2, [r3, #0]
  return -1;
 8001818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_exit>:

void _exit (int status)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800182c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ffe7 	bl	8001804 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001836:	e7fe      	b.n	8001836 <_exit+0x12>

08001838 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	e00a      	b.n	8001860 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800184a:	f3af 8000 	nop.w
 800184e:	4601      	mov	r1, r0
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	60ba      	str	r2, [r7, #8]
 8001856:	b2ca      	uxtb	r2, r1
 8001858:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	3301      	adds	r3, #1
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	429a      	cmp	r2, r3
 8001866:	dbf0      	blt.n	800184a <_read+0x12>
  }

  return len;
 8001868:	687b      	ldr	r3, [r7, #4]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b086      	sub	sp, #24
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	e009      	b.n	8001898 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	60ba      	str	r2, [r7, #8]
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3301      	adds	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	429a      	cmp	r2, r3
 800189e:	dbf1      	blt.n	8001884 <_write+0x12>
  }
  return len;
 80018a0:	687b      	ldr	r3, [r7, #4]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <_close>:

int _close(int file)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018d2:	605a      	str	r2, [r3, #4]
  return 0;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <_isatty>:

int _isatty(int file)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800191c:	4a14      	ldr	r2, [pc, #80]	; (8001970 <_sbrk+0x5c>)
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <_sbrk+0x60>)
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <_sbrk+0x64>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d102      	bne.n	8001936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <_sbrk+0x64>)
 8001932:	4a12      	ldr	r2, [pc, #72]	; (800197c <_sbrk+0x68>)
 8001934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	429a      	cmp	r2, r3
 8001942:	d207      	bcs.n	8001954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001944:	f005 f9d6 	bl	8006cf4 <__errno>
 8001948:	4603      	mov	r3, r0
 800194a:	220c      	movs	r2, #12
 800194c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001952:	e009      	b.n	8001968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <_sbrk+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195a:	4b07      	ldr	r3, [pc, #28]	; (8001978 <_sbrk+0x64>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	4a05      	ldr	r2, [pc, #20]	; (8001978 <_sbrk+0x64>)
 8001964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001966:	68fb      	ldr	r3, [r7, #12]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20030000 	.word	0x20030000
 8001974:	00000400 	.word	0x00000400
 8001978:	2000092c 	.word	0x2000092c
 800197c:	20000b98 	.word	0x20000b98

08001980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <SystemInit+0x20>)
 8001986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <SystemInit+0x20>)
 800198c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019a8:	480d      	ldr	r0, [pc, #52]	; (80019e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019aa:	490e      	ldr	r1, [pc, #56]	; (80019e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019ac:	4a0e      	ldr	r2, [pc, #56]	; (80019e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019c0:	4c0b      	ldr	r4, [pc, #44]	; (80019f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019ce:	f7ff ffd7 	bl	8001980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019d2:	f005 f995 	bl	8006d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019d6:	f7ff fb1b 	bl	8001010 <main>
  bx  lr    
 80019da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019dc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80019e8:	0800aa90 	.word	0x0800aa90
  ldr r2, =_sbss
 80019ec:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80019f0:	20000b94 	.word	0x20000b94

080019f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f4:	e7fe      	b.n	80019f4 <ADC_IRQHandler>
	...

080019f8 <buttonPressed>:
static bool_t estadoReadKey = false;

/*
 * acciones realizadas al presionar el botón
 */
static void buttonPressed() {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	estadoReadKey = true;
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <buttonPressed+0x14>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]
	uart_enviar_string((uint8_t *) "Botón presionado\r\n");
 8001a02:	4803      	ldr	r0, [pc, #12]	; (8001a10 <buttonPressed+0x18>)
 8001a04:	f000 fc72 	bl	80022ec <uart_enviar_string>
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000940 	.word	0x20000940
 8001a10:	0800a4e0 	.word	0x0800a4e0

08001a14 <buttonReleased>:

/*
 * acciones realizadas al liberar el botón
 */
static void buttonReleased() {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	uart_enviar_string((uint8_t *) "Botón liberado\r\n");
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <buttonReleased+0x10>)
 8001a1a:	f000 fc67 	bl	80022ec <uart_enviar_string>
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	0800a4f4 	.word	0x0800a4f4

08001a28 <debounceFSM_init>:

/*
 * Inicio de la MEF
 */
void debounceFSM_init() {
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
	// estado inicial
	estado = BUTTON_UP;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <debounceFSM_init+0x14>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
	// para hacer esto disponible se saca static de manejadorErrores() en API_delay.c
	// y se agrega en API_delay.h
	// if (uartInit() == false) {
	// 	manejadorErrores();
	// }
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	20000930 	.word	0x20000930

08001a40 <debounceFSM_update>:

/*
 * Actualiza la MEF
 */
void debounceFSM_update() {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	switch (estado) {
 8001a44:	4b39      	ldr	r3, [pc, #228]	; (8001b2c <debounceFSM_update+0xec>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d863      	bhi.n	8001b14 <debounceFSM_update+0xd4>
 8001a4c:	a201      	add	r2, pc, #4	; (adr r2, 8001a54 <debounceFSM_update+0x14>)
 8001a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a52:	bf00      	nop
 8001a54:	08001a65 	.word	0x08001a65
 8001a58:	08001a8d 	.word	0x08001a8d
 8001a5c:	08001abd 	.word	0x08001abd
 8001a60:	08001ae5 	.word	0x08001ae5
	case BUTTON_UP:
		// realiza una lectura del botón y si se encuentra presionado
		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) != 0) {
 8001a64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a68:	4831      	ldr	r0, [pc, #196]	; (8001b30 <debounceFSM_update+0xf0>)
 8001a6a:	f001 ffaf 	bl	80039cc <HAL_GPIO_ReadPin>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d052      	beq.n	8001b1a <debounceFSM_update+0xda>
			// cambia de estado
			estado = BUTTON_FALLING;
 8001a74:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <debounceFSM_update+0xec>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
			// inicia y lee retardo anti-rebote
			delayInit(&retardo, duracionRetardo);
 8001a7a:	2328      	movs	r3, #40	; 0x28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	482d      	ldr	r0, [pc, #180]	; (8001b34 <debounceFSM_update+0xf4>)
 8001a80:	f000 f86c 	bl	8001b5c <delayInit>
			delayRead(&retardo);
 8001a84:	482b      	ldr	r0, [pc, #172]	; (8001b34 <debounceFSM_update+0xf4>)
 8001a86:	f000 f881 	bl	8001b8c <delayRead>
		}
		break;
 8001a8a:	e046      	b.n	8001b1a <debounceFSM_update+0xda>
	case BUTTON_FALLING:
		// verifica que se cumpla el retardo anti-rebote
		if (delayRead(&retardo)) {
 8001a8c:	4829      	ldr	r0, [pc, #164]	; (8001b34 <debounceFSM_update+0xf4>)
 8001a8e:	f000 f87d 	bl	8001b8c <delayRead>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d042      	beq.n	8001b1e <debounceFSM_update+0xde>
			// realiza una lectura del botón y si se encuentra presionado
			if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) != 0) {
 8001a98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a9c:	4824      	ldr	r0, [pc, #144]	; (8001b30 <debounceFSM_update+0xf0>)
 8001a9e:	f001 ff95 	bl	80039cc <HAL_GPIO_ReadPin>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <debounceFSM_update+0x74>
				// cambia de estado
				estado = BUTTON_DOWN;
 8001aa8:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <debounceFSM_update+0xec>)
 8001aaa:	2202      	movs	r2, #2
 8001aac:	701a      	strb	r2, [r3, #0]
				// invoca al evento asociado a el nuevo estado
				buttonPressed();
 8001aae:	f7ff ffa3 	bl	80019f8 <buttonPressed>
			} else {
				// si no se encuentra presionado el botón vuelve al estado original
				estado = BUTTON_UP;
			}
		}
		break;
 8001ab2:	e034      	b.n	8001b1e <debounceFSM_update+0xde>
				estado = BUTTON_UP;
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <debounceFSM_update+0xec>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
		break;
 8001aba:	e030      	b.n	8001b1e <debounceFSM_update+0xde>
	case BUTTON_DOWN:
		// realiza una lectura del botón y si no se encuentra presionado
		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == 0) {
 8001abc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ac0:	481b      	ldr	r0, [pc, #108]	; (8001b30 <debounceFSM_update+0xf0>)
 8001ac2:	f001 ff83 	bl	80039cc <HAL_GPIO_ReadPin>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d12a      	bne.n	8001b22 <debounceFSM_update+0xe2>
			// cambia de estado
			estado = BUTTON_RISING;
 8001acc:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <debounceFSM_update+0xec>)
 8001ace:	2203      	movs	r2, #3
 8001ad0:	701a      	strb	r2, [r3, #0]
			// inicia y lee retardo anti-rebote
			delayInit(&retardo, duracionRetardo);
 8001ad2:	2328      	movs	r3, #40	; 0x28
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4817      	ldr	r0, [pc, #92]	; (8001b34 <debounceFSM_update+0xf4>)
 8001ad8:	f000 f840 	bl	8001b5c <delayInit>
			delayRead(&retardo);
 8001adc:	4815      	ldr	r0, [pc, #84]	; (8001b34 <debounceFSM_update+0xf4>)
 8001ade:	f000 f855 	bl	8001b8c <delayRead>
		}
		break;
 8001ae2:	e01e      	b.n	8001b22 <debounceFSM_update+0xe2>
	case BUTTON_RISING:
		// verifica que se cumpla el retardo anti-rebote
		if (delayRead(&retardo)) {
 8001ae4:	4813      	ldr	r0, [pc, #76]	; (8001b34 <debounceFSM_update+0xf4>)
 8001ae6:	f000 f851 	bl	8001b8c <delayRead>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d01a      	beq.n	8001b26 <debounceFSM_update+0xe6>
			// realiza una lectura del botón y si no se encuentra presionado
			if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == 0) {
 8001af0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af4:	480e      	ldr	r0, [pc, #56]	; (8001b30 <debounceFSM_update+0xf0>)
 8001af6:	f001 ff69 	bl	80039cc <HAL_GPIO_ReadPin>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d105      	bne.n	8001b0c <debounceFSM_update+0xcc>
				// cambia de estado
				estado = BUTTON_UP;
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <debounceFSM_update+0xec>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
				// invoca al evento asociado a el nuevo estado
				buttonReleased();
 8001b06:	f7ff ff85 	bl	8001a14 <buttonReleased>
			} else {
				// si no se encuentra presionado el botón vuelve al estado original
				estado = BUTTON_DOWN;
			}
		}
		break;
 8001b0a:	e00c      	b.n	8001b26 <debounceFSM_update+0xe6>
				estado = BUTTON_DOWN;
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <debounceFSM_update+0xec>)
 8001b0e:	2202      	movs	r2, #2
 8001b10:	701a      	strb	r2, [r3, #0]
		break;
 8001b12:	e008      	b.n	8001b26 <debounceFSM_update+0xe6>
	default:
		debounceFSM_init();
 8001b14:	f7ff ff88 	bl	8001a28 <debounceFSM_init>
		break;
 8001b18:	e006      	b.n	8001b28 <debounceFSM_update+0xe8>
		break;
 8001b1a:	bf00      	nop
 8001b1c:	e004      	b.n	8001b28 <debounceFSM_update+0xe8>
		break;
 8001b1e:	bf00      	nop
 8001b20:	e002      	b.n	8001b28 <debounceFSM_update+0xe8>
		break;
 8001b22:	bf00      	nop
 8001b24:	e000      	b.n	8001b28 <debounceFSM_update+0xe8>
		break;
 8001b26:	bf00      	nop
	}

}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000930 	.word	0x20000930
 8001b30:	40020800 	.word	0x40020800
 8001b34:	20000934 	.word	0x20000934

08001b38 <readKey>:

/* La función readKey debe leer una variable interna del módulo y devolver true o false si la tecla es presionada.*/
bool_t readKey() {
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
	bool_t retornar = estadoReadKey;
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <readKey+0x20>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
	estadoReadKey = false;
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <readKey+0x20>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
	return retornar;
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	20000940 	.word	0x20000940

08001b5c <delayInit>:

#include "API_delay.h"



void delayInit( delay_t * delay, tick_t duration ) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
	// se comprueba variable existente
	if (delay == NULL) {
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <delayInit+0x16>
		manejar_errores();
 8001b6c:	f000 fbd8 	bl	8002320 <manejar_errores>
	} else {
		delay->duration = duration;
		delay->running = false;
		delay->startTime = 0; // siempre inicializar con valores
	}
}
 8001b70:	e008      	b.n	8001b84 <delayInit+0x28>
		delay->duration = duration;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	605a      	str	r2, [r3, #4]
		delay->running = false;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	721a      	strb	r2, [r3, #8]
		delay->startTime = 0; // siempre inicializar con valores
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <delayRead>:

bool_t delayRead( delay_t * delay ) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	// varible que se usa para tener un unico punto de retorno
	bool resultado = false;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]
	if (delay == NULL) {
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d102      	bne.n	8001ba4 <delayRead+0x18>
		manejar_errores();
 8001b9e:	f000 fbbf 	bl	8002320 <manejar_errores>
 8001ba2:	e01e      	b.n	8001be2 <delayRead+0x56>
	} else {
		// no es necesario comparar explicitamente, pero es simple de leer
		if (delay->running == false) {
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7a1b      	ldrb	r3, [r3, #8]
 8001ba8:	f083 0301 	eor.w	r3, r3, #1
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d008      	beq.n	8001bc4 <delayRead+0x38>
			delay->startTime = HAL_GetTick();
 8001bb2:	f000 fd11 	bl	80025d8 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	601a      	str	r2, [r3, #0]
			delay->running = true;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	721a      	strb	r2, [r3, #8]
 8001bc2:	e00e      	b.n	8001be2 <delayRead+0x56>
		} else {
			if (HAL_GetTick() - delay->startTime >= delay->duration) {
 8001bc4:	f000 fd08 	bl	80025d8 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	1ad2      	subs	r2, r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d304      	bcc.n	8001be2 <delayRead+0x56>
				delay->running = false;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	721a      	strb	r2, [r3, #8]
				resultado = true;
 8001bde:	2301      	movs	r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
			}
		}
	}
	return resultado;
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <interfaz_iniciar>:
static void descansar();

/* ---------------------------------- Funciones --------------------------------- */

// inicializa la interfaz de usuario en el estado que muestra datos en el lcd y por la uart
void interfaz_iniciar() {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	estado = MOSTRANDO_DATOS;
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <interfaz_iniciar+0x18>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
	estado_interno.lectura_anterior = 0;
 8001bf6:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <interfaz_iniciar+0x1c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
	iniciar_mostrar_datos();
 8001bfc:	f000 f8b8 	bl	8001d70 <iniciar_mostrar_datos>
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000941 	.word	0x20000941
 8001c08:	20000944 	.word	0x20000944

08001c0c <interfaz_actualizar>:
 *  En el estado DESCANSO solo se pasan datos por la UART.
 *
 *  El cambio de estados se produce al pulsar el boton USER de la placa.
 *
 */
void interfaz_actualizar() {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
	switch (estado) {
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <interfaz_actualizar+0x6c>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <interfaz_actualizar+0x12>
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d011      	beq.n	8001c40 <interfaz_actualizar+0x34>
 8001c1c:	e026      	b.n	8001c6c <interfaz_actualizar+0x60>
	case MOSTRANDO_DATOS:
		if (readKey()) {
 8001c1e:	f7ff ff8b 	bl	8001b38 <readKey>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <interfaz_actualizar+0x28>
			estado = DESCANSO;
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <interfaz_actualizar+0x6c>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
			descansar();
 8001c2e:	f000 f8b1 	bl	8001d94 <descansar>
		} else {
			mostrar_datos(true, true, false);
		}
		break;
 8001c32:	e01f      	b.n	8001c74 <interfaz_actualizar+0x68>
			mostrar_datos(true, true, false);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2101      	movs	r1, #1
 8001c38:	2001      	movs	r0, #1
 8001c3a:	f000 f81f 	bl	8001c7c <mostrar_datos>
		break;
 8001c3e:	e019      	b.n	8001c74 <interfaz_actualizar+0x68>
	case DESCANSO:
		if (readKey()) {
 8001c40:	f7ff ff7a 	bl	8001b38 <readKey>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00a      	beq.n	8001c60 <interfaz_actualizar+0x54>
			estado = MOSTRANDO_DATOS;
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <interfaz_actualizar+0x6c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
			iniciar_mostrar_datos();
 8001c50:	f000 f88e 	bl	8001d70 <iniciar_mostrar_datos>
			mostrar_datos(true, false, true);
 8001c54:	2201      	movs	r2, #1
 8001c56:	2100      	movs	r1, #0
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f000 f80f 	bl	8001c7c <mostrar_datos>
		} else {
			mostrar_datos(false, true, false);
		}
		break;
 8001c5e:	e009      	b.n	8001c74 <interfaz_actualizar+0x68>
			mostrar_datos(false, true, false);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2101      	movs	r1, #1
 8001c64:	2000      	movs	r0, #0
 8001c66:	f000 f809 	bl	8001c7c <mostrar_datos>
		break;
 8001c6a:	e003      	b.n	8001c74 <interfaz_actualizar+0x68>
	default:
		estado = DESCANSO;
 8001c6c:	4b02      	ldr	r3, [pc, #8]	; (8001c78 <interfaz_actualizar+0x6c>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
	}
}
 8001c72:	bf00      	nop
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000941 	.word	0x20000941

08001c7c <mostrar_datos>:
 * @param forzar_lectura Indica si se debe forzar una nueva lectura antes de mostrar los datos.
 *
 * @return void
 */
static void mostrar_datos(bool mostrar_lcd, bool mostrar_uart,
		bool forzar_lectura) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
 8001c86:	460b      	mov	r3, r1
 8001c88:	71bb      	strb	r3, [r7, #6]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	717b      	strb	r3, [r7, #5]
	// verifica si hay una nueva lectura
	uint8_t nueva_lectura = sensor_temperatura_nueva_lectura();
 8001c8e:	f000 fa05 	bl	800209c <sensor_temperatura_nueva_lectura>
 8001c92:	4603      	mov	r3, r0
 8001c94:	73fb      	strb	r3, [r7, #15]
	// si hay una nueva lectura o forzar en true
	if (nueva_lectura != estado_interno.lectura_anterior || forzar_lectura) {
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <mostrar_datos+0x5c>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	7bfa      	ldrb	r2, [r7, #15]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d102      	bne.n	8001ca6 <mostrar_datos+0x2a>
 8001ca0:	797b      	ldrb	r3, [r7, #5]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d013      	beq.n	8001cce <mostrar_datos+0x52>
		estado_interno.lectura_anterior = nueva_lectura;
 8001ca6:	4a0c      	ldr	r2, [pc, #48]	; (8001cd8 <mostrar_datos+0x5c>)
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	7013      	strb	r3, [r2, #0]
		estado_interno.temperatura = sensor_temperatura_obtener_temperatura();
 8001cac:	f000 f9e8 	bl	8002080 <sensor_temperatura_obtener_temperatura>
 8001cb0:	eef0 7a40 	vmov.f32	s15, s0
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <mostrar_datos+0x5c>)
 8001cb6:	edc3 7a01 	vstr	s15, [r3, #4]
		if (mostrar_lcd) {
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <mostrar_datos+0x48>
			mostrar_datos_lcd();
 8001cc0:	f000 f80c 	bl	8001cdc <mostrar_datos_lcd>
		}
		if (mostrar_uart) {
 8001cc4:	79bb      	ldrb	r3, [r7, #6]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <mostrar_datos+0x52>
			mostrar_datos_uart();
 8001cca:	f000 f837 	bl	8001d3c <mostrar_datos_uart>
		}
	}
}
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000944 	.word	0x20000944

08001cdc <mostrar_datos_lcd>:
 *
 * Esta función se encarga de mostrar los datos en un LCD.
 *
 * @return void
 */
static void mostrar_datos_lcd() {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b09a      	sub	sp, #104	; 0x68
 8001ce0:	af00      	add	r7, sp, #0
	char cadena[100];

	lcd_ubicar(0, 2);
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f000 f8b0 	bl	8001e4a <lcd_ubicar>
	if (SIN_DATOS == estado_interno.temperatura) {
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <mostrar_datos_lcd+0x54>)
 8001cec:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cf0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001cf4:	eef4 7a47 	vcmp.f32	s15, s14
 8001cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfc:	d105      	bne.n	8001d0a <mostrar_datos_lcd+0x2e>
		sprintf(cadena, "s/d           ");
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	490c      	ldr	r1, [pc, #48]	; (8001d34 <mostrar_datos_lcd+0x58>)
 8001d02:	4618      	mov	r0, r3
 8001d04:	f004 ff40 	bl	8006b88 <siprintf>
 8001d08:	e00a      	b.n	8001d20 <mostrar_datos_lcd+0x44>
	} else {
		sprintf(cadena, "%2.2f         ", estado_interno.temperatura);
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <mostrar_datos_lcd+0x54>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fc2a 	bl	8000568 <__aeabi_f2d>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	1d38      	adds	r0, r7, #4
 8001d1a:	4907      	ldr	r1, [pc, #28]	; (8001d38 <mostrar_datos_lcd+0x5c>)
 8001d1c:	f004 ff34 	bl	8006b88 <siprintf>
	}
	lcd_escribir_string(cadena);
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f8cb 	bl	8001ebe <lcd_escribir_string>
}
 8001d28:	bf00      	nop
 8001d2a:	3768      	adds	r7, #104	; 0x68
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000944 	.word	0x20000944
 8001d34:	0800a508 	.word	0x0800a508
 8001d38:	0800a518 	.word	0x0800a518

08001d3c <mostrar_datos_uart>:
 *
 * Esta función se encarga de mostrar los datos a través de la interfaz UART.
 *
 * @return void
 */
static void mostrar_datos_uart() {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b09a      	sub	sp, #104	; 0x68
 8001d40:	af00      	add	r7, sp, #0
	char cadena[100];
	sprintf(cadena, "Temperatura: %2.2f\r\n",
			estado_interno.temperatura);
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <mostrar_datos_uart+0x2c>)
 8001d44:	685b      	ldr	r3, [r3, #4]
	sprintf(cadena, "Temperatura: %2.2f\r\n",
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fc0e 	bl	8000568 <__aeabi_f2d>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	1d38      	adds	r0, r7, #4
 8001d52:	4906      	ldr	r1, [pc, #24]	; (8001d6c <mostrar_datos_uart+0x30>)
 8001d54:	f004 ff18 	bl	8006b88 <siprintf>
	uart_enviar_string((uint8_t*) cadena);
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 fac6 	bl	80022ec <uart_enviar_string>
}
 8001d60:	bf00      	nop
 8001d62:	3768      	adds	r7, #104	; 0x68
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000944 	.word	0x20000944
 8001d6c:	0800a528 	.word	0x0800a528

08001d70 <iniciar_mostrar_datos>:
 * Esta función muestra los datos iniciales en el lcd, los cuales no cambian constantemente.
 * Se usa en el estado MOSTRANDO_DATOS.
 *
 * @return void
 */
static void iniciar_mostrar_datos() {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
	lcd_limpiar();
 8001d74:	f000 f898 	bl	8001ea8 <lcd_limpiar>
	lcd_luz_fondo(true);
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f000 f8b7 	bl	8001eec <lcd_luz_fondo>
	lcd_ubicar(0, 0);
 8001d7e:	2100      	movs	r1, #0
 8001d80:	2000      	movs	r0, #0
 8001d82:	f000 f862 	bl	8001e4a <lcd_ubicar>
	lcd_escribir_string("T: ");
 8001d86:	4802      	ldr	r0, [pc, #8]	; (8001d90 <iniciar_mostrar_datos+0x20>)
 8001d88:	f000 f899 	bl	8001ebe <lcd_escribir_string>
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	0800a540 	.word	0x0800a540

08001d94 <descansar>:
 *
 * Esta función muestra los datos que se visualizan en el lcd en el estado DESCANSAR.
 *
 * @return void
 */
static void descansar() {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
	lcd_limpiar();
 8001d98:	f000 f886 	bl	8001ea8 <lcd_limpiar>
	lcd_luz_fondo(true);
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f000 f8a5 	bl	8001eec <lcd_luz_fondo>
	lcd_ubicar(0, 0);
 8001da2:	2100      	movs	r1, #0
 8001da4:	2000      	movs	r0, #0
 8001da6:	f000 f850 	bl	8001e4a <lcd_ubicar>
	lcd_escribir_string("Descansando");
 8001daa:	4806      	ldr	r0, [pc, #24]	; (8001dc4 <descansar+0x30>)
 8001dac:	f000 f887 	bl	8001ebe <lcd_escribir_string>
	lcd_ubicar(1, 0);
 8001db0:	2100      	movs	r1, #0
 8001db2:	2001      	movs	r0, #1
 8001db4:	f000 f849 	bl	8001e4a <lcd_ubicar>
	lcd_escribir_string("Datos por UART");
 8001db8:	4803      	ldr	r0, [pc, #12]	; (8001dc8 <descansar+0x34>)
 8001dba:	f000 f880 	bl	8001ebe <lcd_escribir_string>
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	0800a544 	.word	0x0800a544
 8001dc8:	0800a550 	.word	0x0800a550

08001dcc <lcd_iniciar>:
static void lcd_escribir_codigo(uint8_t comando, uint8_t modo);

/* ---------------------------------- Funciones --------------------------------- */

// inicia el lcd
void lcd_iniciar() {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
	esperar(LCD_ESPERAR_50);
 8001dd0:	2032      	movs	r0, #50	; 0x32
 8001dd2:	f000 fb8f 	bl	80024f4 <esperar>
	lcd_escribir_codigo(LCD_CMD_INICIO_SET1, LCD_COMANDO);
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	2003      	movs	r0, #3
 8001dda:	f000 f8db 	bl	8001f94 <lcd_escribir_codigo>
	esperar(LCD_ESPERAR_5);
 8001dde:	2005      	movs	r0, #5
 8001de0:	f000 fb88 	bl	80024f4 <esperar>
	lcd_escribir_codigo(LCD_CMD_INICIO_SET1, LCD_COMANDO);
 8001de4:	2100      	movs	r1, #0
 8001de6:	2003      	movs	r0, #3
 8001de8:	f000 f8d4 	bl	8001f94 <lcd_escribir_codigo>
	esperar(LCD_ESPERAR_1);
 8001dec:	2001      	movs	r0, #1
 8001dee:	f000 fb81 	bl	80024f4 <esperar>
	lcd_escribir_codigo(LCD_CMD_INICIO_SET1, LCD_COMANDO);
 8001df2:	2100      	movs	r1, #0
 8001df4:	2003      	movs	r0, #3
 8001df6:	f000 f8cd 	bl	8001f94 <lcd_escribir_codigo>
	esperar(LCD_ESPERAR_1);
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f000 fb7a 	bl	80024f4 <esperar>
	lcd_escribir_codigo(LCD_CMD_INICIO_SET2, LCD_COMANDO);
 8001e00:	2100      	movs	r1, #0
 8001e02:	2002      	movs	r0, #2
 8001e04:	f000 f8c6 	bl	8001f94 <lcd_escribir_codigo>
	esperar(LCD_ESPERAR_1);
 8001e08:	2001      	movs	r0, #1
 8001e0a:	f000 fb73 	bl	80024f4 <esperar>
	lcd_escribir_codigo(LCD_CMD_INICIO28, LCD_COMANDO);
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2028      	movs	r0, #40	; 0x28
 8001e12:	f000 f8bf 	bl	8001f94 <lcd_escribir_codigo>
	esperar(LCD_ESPERAR_1);
 8001e16:	2001      	movs	r0, #1
 8001e18:	f000 fb6c 	bl	80024f4 <esperar>
	lcd_escribir_codigo(LCD_CMD_INICIO0C, LCD_COMANDO);
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	200c      	movs	r0, #12
 8001e20:	f000 f8b8 	bl	8001f94 <lcd_escribir_codigo>
	esperar(LCD_ESPERAR_1);
 8001e24:	2001      	movs	r0, #1
 8001e26:	f000 fb65 	bl	80024f4 <esperar>
	lcd_escribir_codigo(LCD_CMD_INICIO06, LCD_COMANDO);
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	2006      	movs	r0, #6
 8001e2e:	f000 f8b1 	bl	8001f94 <lcd_escribir_codigo>
	esperar(LCD_ESPERAR_1);
 8001e32:	2001      	movs	r0, #1
 8001e34:	f000 fb5e 	bl	80024f4 <esperar>
	lcd_escribir_codigo(LCD_CMD_INICIO01, LCD_COMANDO);
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f000 f8aa 	bl	8001f94 <lcd_escribir_codigo>
	esperar(LCD_ESPERAR_1);
 8001e40:	2001      	movs	r0, #1
 8001e42:	f000 fb57 	bl	80024f4 <esperar>
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <lcd_ubicar>:

// ubica el cursor en una fila y columna
void lcd_ubicar(uint8_t fila, uint8_t columna) {
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	460a      	mov	r2, r1
 8001e54:	71fb      	strb	r3, [r7, #7]
 8001e56:	4613      	mov	r3, r2
 8001e58:	71bb      	strb	r3, [r7, #6]
	if (fila > LCD_FILAS || columna > LCD_COLUMNAS) {
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d802      	bhi.n	8001e66 <lcd_ubicar+0x1c>
 8001e60:	79bb      	ldrb	r3, [r7, #6]
 8001e62:	2b10      	cmp	r3, #16
 8001e64:	d901      	bls.n	8001e6a <lcd_ubicar+0x20>
		manejar_errores();
 8001e66:	f000 fa5b 	bl	8002320 <manejar_errores>
	}
	uint8_t direccion;
	switch (fila) {
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <lcd_ubicar+0x2c>
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d003      	beq.n	8001e7c <lcd_ubicar+0x32>
 8001e74:	e005      	b.n	8001e82 <lcd_ubicar+0x38>
	case 0:
		direccion = LCD_LINEA_1_DIRECCION;
 8001e76:	2300      	movs	r3, #0
 8001e78:	73fb      	strb	r3, [r7, #15]
		break;
 8001e7a:	e002      	b.n	8001e82 <lcd_ubicar+0x38>
	case 1:
		direccion = LCD_LINEA_2_DIRECCION;
 8001e7c:	2340      	movs	r3, #64	; 0x40
 8001e7e:	73fb      	strb	r3, [r7, #15]
		break;
 8001e80:	bf00      	nop
	}
	direccion = direccion + columna;
 8001e82:	7bfa      	ldrb	r2, [r7, #15]
 8001e84:	79bb      	ldrb	r3, [r7, #6]
 8001e86:	4413      	add	r3, r2
 8001e88:	73fb      	strb	r3, [r7, #15]
	lcd_escribir_codigo(LCD_CMD_DDRAM_DIRECCION | direccion, LCD_COMANDO);
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 f87d 	bl	8001f94 <lcd_escribir_codigo>
	esperar(1);
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f000 fb2a 	bl	80024f4 <esperar>
}
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <lcd_limpiar>:

// limpia (clear) la pantalla del lcd.
void lcd_limpiar() {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	lcd_escribir_codigo(LCD_CMD_LIMPIAR, LCD_COMANDO);
 8001eac:	2100      	movs	r1, #0
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f000 f870 	bl	8001f94 <lcd_escribir_codigo>
	esperar(2);
 8001eb4:	2002      	movs	r0, #2
 8001eb6:	f000 fb1d 	bl	80024f4 <esperar>
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <lcd_escribir_string>:

// escribe una cadena de texto en el lcd
void lcd_escribir_string(const char *cadena) {
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
	while (*cadena) {
 8001ec6:	e007      	b.n	8001ed8 <lcd_escribir_string+0x1a>
		lcd_escribir_codigo(*cadena++, LCD_DATOS);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 f85e 	bl	8001f94 <lcd_escribir_codigo>
	while (*cadena) {
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f3      	bne.n	8001ec8 <lcd_escribir_string+0xa>
	}
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <lcd_luz_fondo>:

// cambia el estado de luz de fondo del lcd
void lcd_luz_fondo(bool estado) {
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
	if (estado) {
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <lcd_luz_fondo+0x18>
		estado_luz_fondo = LCD_LUZ_FONDO_ENCENDIDA;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <lcd_luz_fondo+0x2c>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
	} else {
		estado_luz_fondo = LCD_LUZ_FONDO_APAGADA;
	}
}
 8001f02:	e002      	b.n	8001f0a <lcd_luz_fondo+0x1e>
		estado_luz_fondo = LCD_LUZ_FONDO_APAGADA;
 8001f04:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <lcd_luz_fondo+0x2c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	2000094c 	.word	0x2000094c

08001f1c <lcd_escribir_nibble>:

/* ------------------------------ Funciones privadas ---------------------------- */

static void lcd_escribir_nibble(uint8_t valor, uint8_t modo) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	460a      	mov	r2, r1
 8001f26:	71fb      	strb	r3, [r7, #7]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	71bb      	strb	r3, [r7, #6]
	uint8_t dato = valor << LCD_D4_BIT;
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	73fb      	strb	r3, [r7, #15]
	dato |= modo << LCD_RS_BIT;
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	79bb      	ldrb	r3, [r7, #6]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	73fb      	strb	r3, [r7, #15]
	dato |= estado_luz_fondo << LCD_BL_BIT;
 8001f3e:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <lcd_escribir_nibble+0x74>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	b25a      	sxtb	r2, r3
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	b25b      	sxtb	r3, r3
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	b25b      	sxtb	r3, r3
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	73fb      	strb	r3, [r7, #15]
	dato |= LCD_DESPLAZAR_1 << LCD_EN_BIT;
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	f043 0304 	orr.w	r3, r3, #4
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	73fb      	strb	r3, [r7, #15]
	I2C_transmitir(LCD_DIRECCION, &dato, LCD_LARGO_VALORES, LCD_TIEMPO_ESPERA);
 8001f5c:	f107 010f 	add.w	r1, r7, #15
 8001f60:	2364      	movs	r3, #100	; 0x64
 8001f62:	2201      	movs	r2, #1
 8001f64:	2027      	movs	r0, #39	; 0x27
 8001f66:	f000 faa1 	bl	80024ac <I2C_transmitir>
	esperar(LCD_ESPERAR_1);
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f000 fac2 	bl	80024f4 <esperar>
	dato &= ~(LCD_DESPLAZAR_1 << LCD_EN_BIT);
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	f023 0304 	bic.w	r3, r3, #4
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	73fb      	strb	r3, [r7, #15]
	I2C_transmitir(LCD_DIRECCION, &dato, LCD_LARGO_VALORES, LCD_TIEMPO_ESPERA);
 8001f7a:	f107 010f 	add.w	r1, r7, #15
 8001f7e:	2364      	movs	r3, #100	; 0x64
 8001f80:	2201      	movs	r2, #1
 8001f82:	2027      	movs	r0, #39	; 0x27
 8001f84:	f000 fa92 	bl	80024ac <I2C_transmitir>
}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	2000094c 	.word	0x2000094c

08001f94 <lcd_escribir_codigo>:

static void lcd_escribir_codigo(uint8_t comando, uint8_t modo) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	460a      	mov	r2, r1
 8001f9e:	71fb      	strb	r3, [r7, #7]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	71bb      	strb	r3, [r7, #6]
	if (modo != LCD_COMANDO && modo != LCD_DATOS) {
 8001fa4:	79bb      	ldrb	r3, [r7, #6]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d004      	beq.n	8001fb4 <lcd_escribir_codigo+0x20>
 8001faa:	79bb      	ldrb	r3, [r7, #6]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d001      	beq.n	8001fb4 <lcd_escribir_codigo+0x20>
		manejar_errores();
 8001fb0:	f000 f9b6 	bl	8002320 <manejar_errores>
	}
	uint8_t upper_nibble = comando >> LCD_DESPLAZAR_4;
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	091b      	lsrs	r3, r3, #4
 8001fb8:	73fb      	strb	r3, [r7, #15]
	uint8_t lower_nibble = comando & LCD_VALOR_BINARIO_1111;
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	73bb      	strb	r3, [r7, #14]
	lcd_escribir_nibble(upper_nibble, modo);
 8001fc2:	79ba      	ldrb	r2, [r7, #6]
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ffa7 	bl	8001f1c <lcd_escribir_nibble>
	lcd_escribir_nibble(lower_nibble, modo);
 8001fce:	79ba      	ldrb	r2, [r7, #6]
 8001fd0:	7bbb      	ldrb	r3, [r7, #14]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ffa1 	bl	8001f1c <lcd_escribir_nibble>
}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <sensor_temperatura_iniciar>:
static void sensor_temperatura_realizar_lectura();

/* ---------------------------------- Funciones --------------------------------- */

// inicia el sensor de temperatura
void sensor_temperatura_iniciar() {
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
	estado_interno.temperatura = -1.0;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <sensor_temperatura_iniciar+0x20>)
 8001fea:	4a07      	ldr	r2, [pc, #28]	; (8002008 <sensor_temperatura_iniciar+0x24>)
 8001fec:	601a      	str	r2, [r3, #0]
	estado_interno.nueva_lectura = -1;
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <sensor_temperatura_iniciar+0x20>)
 8001ff0:	22ff      	movs	r2, #255	; 0xff
 8001ff2:	711a      	strb	r2, [r3, #4]
	estado = LECTURA;
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <sensor_temperatura_iniciar+0x28>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	20000950 	.word	0x20000950
 8002008:	bf800000 	.word	0xbf800000
 800200c:	2000094d 	.word	0x2000094d

08002010 <sensor_temperatura_actualizar>:

// actualiza el estado del sensor de temperatura
void sensor_temperatura_actualizar() {
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
	switch (estado) {
 8002014:	4b17      	ldr	r3, [pc, #92]	; (8002074 <sensor_temperatura_actualizar+0x64>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d01a      	beq.n	8002052 <sensor_temperatura_actualizar+0x42>
 800201c:	2b01      	cmp	r3, #1
 800201e:	d122      	bne.n	8002066 <sensor_temperatura_actualizar+0x56>
	case LECTURA:
		sensor_temperatura_realizar_lectura();
 8002020:	f000 f84a 	bl	80020b8 <sensor_temperatura_realizar_lectura>
		estado = ESPERA;
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <sensor_temperatura_actualizar+0x64>)
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
		delayInit(&espera, SENSOR_TEMPERATURA_ESPERA_ENTRE_LECTURAS);
 800202a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800202e:	4812      	ldr	r0, [pc, #72]	; (8002078 <sensor_temperatura_actualizar+0x68>)
 8002030:	f7ff fd94 	bl	8001b5c <delayInit>
		if (estado_interno.nueva_lectura < SENSOR_TEMPERATURA_CONTROL_LECTURAS) {
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <sensor_temperatura_actualizar+0x6c>)
 8002036:	791b      	ldrb	r3, [r3, #4]
 8002038:	2b04      	cmp	r3, #4
 800203a:	d806      	bhi.n	800204a <sensor_temperatura_actualizar+0x3a>
			estado_interno.nueva_lectura++;
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <sensor_temperatura_actualizar+0x6c>)
 800203e:	791b      	ldrb	r3, [r3, #4]
 8002040:	3301      	adds	r3, #1
 8002042:	b2da      	uxtb	r2, r3
 8002044:	4b0d      	ldr	r3, [pc, #52]	; (800207c <sensor_temperatura_actualizar+0x6c>)
 8002046:	711a      	strb	r2, [r3, #4]
		} else {
			estado_interno.nueva_lectura = 0;
		}
		break;
 8002048:	e012      	b.n	8002070 <sensor_temperatura_actualizar+0x60>
			estado_interno.nueva_lectura = 0;
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <sensor_temperatura_actualizar+0x6c>)
 800204c:	2200      	movs	r2, #0
 800204e:	711a      	strb	r2, [r3, #4]
		break;
 8002050:	e00e      	b.n	8002070 <sensor_temperatura_actualizar+0x60>
	case ESPERA:
		if (delayRead(&espera)) {
 8002052:	4809      	ldr	r0, [pc, #36]	; (8002078 <sensor_temperatura_actualizar+0x68>)
 8002054:	f7ff fd9a 	bl	8001b8c <delayRead>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d007      	beq.n	800206e <sensor_temperatura_actualizar+0x5e>
			estado = LECTURA;
 800205e:	4b05      	ldr	r3, [pc, #20]	; (8002074 <sensor_temperatura_actualizar+0x64>)
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002064:	e003      	b.n	800206e <sensor_temperatura_actualizar+0x5e>
	default:
		estado = ESPERA;
 8002066:	4b03      	ldr	r3, [pc, #12]	; (8002074 <sensor_temperatura_actualizar+0x64>)
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
	}
}
 800206c:	e000      	b.n	8002070 <sensor_temperatura_actualizar+0x60>
		break;
 800206e:	bf00      	nop
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	2000094d 	.word	0x2000094d
 8002078:	20000958 	.word	0x20000958
 800207c:	20000950 	.word	0x20000950

08002080 <sensor_temperatura_obtener_temperatura>:

// retorna el valor actual de temperatura
// permite que se obtenga de forma externa el valor de temperatura
float sensor_temperatura_obtener_temperatura() {
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
	return estado_interno.temperatura;
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <sensor_temperatura_obtener_temperatura+0x18>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	ee07 3a90 	vmov	s15, r3
}
 800208c:	eeb0 0a67 	vmov.f32	s0, s15
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	20000950 	.word	0x20000950

0800209c <sensor_temperatura_nueva_lectura>:

// retorna si ha realizado una nueva lectura
uint8_t sensor_temperatura_nueva_lectura() {
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
	return estado_interno.nueva_lectura;
 80020a0:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <sensor_temperatura_nueva_lectura+0x14>)
 80020a2:	791b      	ldrb	r3, [r3, #4]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000950 	.word	0x20000950
 80020b4:	00000000 	.word	0x00000000

080020b8 <sensor_temperatura_realizar_lectura>:
 *
 * Esta obtiene usando ADC una lectura del sensor de temperatura.
 *
 * @return void
 */
static void sensor_temperatura_realizar_lectura() {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
	uint32_t valor = ADC_obtener_datos();
 80020be:	f000 f99b 	bl	80023f8 <ADC_obtener_datos>
 80020c2:	60f8      	str	r0, [r7, #12]
	estado_interno.temperatura = valor;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	ee07 3a90 	vmov	s15, r3
 80020ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ce:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <sensor_temperatura_realizar_lectura+0xc0>)
 80020d0:	edc3 7a00 	vstr	s15, [r3]
	// aproximadamente debe dar 944 con 25 grados celcius
	float voltaje_sensor = valor * SENSOR_TEMPERATURA_VOLTAJE_REFERENCIA
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f7fe fa25 	bl	8000524 <__aeabi_ui2d>
 80020da:	a31f      	add	r3, pc, #124	; (adr r3, 8002158 <sensor_temperatura_realizar_lectura+0xa0>)
 80020dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e0:	f7fe fa9a 	bl	8000618 <__aeabi_dmul>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
			/ SENSOR_TEMPERATURA_ADC_MAXIMO;
 80020ec:	a31c      	add	r3, pc, #112	; (adr r3, 8002160 <sensor_temperatura_realizar_lectura+0xa8>)
 80020ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f2:	f7fe fbbb 	bl	800086c <__aeabi_ddiv>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
	float voltaje_sensor = valor * SENSOR_TEMPERATURA_VOLTAJE_REFERENCIA
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	f7fe fd83 	bl	8000c08 <__aeabi_d2f>
 8002102:	4603      	mov	r3, r0
 8002104:	60bb      	str	r3, [r7, #8]
	float temperatura_calculada = ((voltaje_sensor
			- SENSOR_TEMPERATURA_VOLTAJE_25_GRADOS)
 8002106:	68b8      	ldr	r0, [r7, #8]
 8002108:	f7fe fa2e 	bl	8000568 <__aeabi_f2d>
 800210c:	a316      	add	r3, pc, #88	; (adr r3, 8002168 <sensor_temperatura_realizar_lectura+0xb0>)
 800210e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002112:	f7fe f8c9 	bl	80002a8 <__aeabi_dsub>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
			/ SENSOR_TEMPERATURA_PENDIENTE_PROMEDIO) + 25;
 800211e:	a314      	add	r3, pc, #80	; (adr r3, 8002170 <sensor_temperatura_realizar_lectura+0xb8>)
 8002120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002124:	f7fe fba2 	bl	800086c <__aeabi_ddiv>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4610      	mov	r0, r2
 800212e:	4619      	mov	r1, r3
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <sensor_temperatura_realizar_lectura+0xc4>)
 8002136:	f7fe f8b9 	bl	80002ac <__adddf3>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
	float temperatura_calculada = ((voltaje_sensor
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f7fe fd61 	bl	8000c08 <__aeabi_d2f>
 8002146:	4603      	mov	r3, r0
 8002148:	607b      	str	r3, [r7, #4]
	estado_interno.temperatura = temperatura_calculada;
 800214a:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <sensor_temperatura_realizar_lectura+0xc0>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6013      	str	r3, [r2, #0]
}
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	66666666 	.word	0x66666666
 800215c:	400a6666 	.word	0x400a6666
 8002160:	00000000 	.word	0x00000000
 8002164:	40affe00 	.word	0x40affe00
 8002168:	851eb852 	.word	0x851eb852
 800216c:	3fe851eb 	.word	0x3fe851eb
 8002170:	47ae147b 	.word	0x47ae147b
 8002174:	3f647ae1 	.word	0x3f647ae1
 8002178:	20000950 	.word	0x20000950
 800217c:	40390000 	.word	0x40390000

08002180 <sistema_iniciar>:
 *      Author: cbiale
 */

#include <API_sistema.h>

void sistema_iniciar() {
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
	// inicia el sistema: I2c, lcd, uart, interfaz
	I2C_iniciar();
 8002184:	f000 f952 	bl	800242c <I2C_iniciar>
	lcd_iniciar();
 8002188:	f7ff fe20 	bl	8001dcc <lcd_iniciar>
	uart_iniciar();
 800218c:	f000 f814 	bl	80021b8 <uart_iniciar>
	ADC_iniciar();
 8002190:	f000 f8de 	bl	8002350 <ADC_iniciar>
	sensor_temperatura_iniciar();
 8002194:	f7ff ff26 	bl	8001fe4 <sensor_temperatura_iniciar>
	debounceFSM_init();
 8002198:	f7ff fc46 	bl	8001a28 <debounceFSM_init>
	interfaz_iniciar();
 800219c:	f7ff fd26 	bl	8001bec <interfaz_iniciar>
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <sistema_actualizar>:

void sistema_actualizar() {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
	interfaz_actualizar();
 80021a8:	f7ff fd30 	bl	8001c0c <interfaz_actualizar>
	sensor_temperatura_actualizar();
 80021ac:	f7ff ff30 	bl	8002010 <sensor_temperatura_actualizar>
	debounceFSM_update();
 80021b0:	f7ff fc46 	bl	8001a40 <debounceFSM_update>
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <uart_iniciar>:
/*
 * Variable que mantiene el manejador de la UART
 */
static UART_HandleTypeDef UartHandle;

bool_t uart_iniciar() {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b09a      	sub	sp, #104	; 0x68
 80021bc:	af00      	add	r7, sp, #0

	// retorna el estado del inicio de la UART
	bool_t estado = false;
 80021be:	2300      	movs	r3, #0
 80021c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	// variable usada para imprimir datos de la UART
    char cadena[100];

	UartHandle.Instance = USART3;
 80021c4:	4b3f      	ldr	r3, [pc, #252]	; (80022c4 <uart_iniciar+0x10c>)
 80021c6:	4a40      	ldr	r2, [pc, #256]	; (80022c8 <uart_iniciar+0x110>)
 80021c8:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate = 115200;
 80021ca:	4b3e      	ldr	r3, [pc, #248]	; (80022c4 <uart_iniciar+0x10c>)
 80021cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021d0:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80021d2:	4b3c      	ldr	r3, [pc, #240]	; (80022c4 <uart_iniciar+0x10c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits = UART_STOPBITS_1;
 80021d8:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <uart_iniciar+0x10c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity = UART_PARITY_NONE;
 80021de:	4b39      	ldr	r3, [pc, #228]	; (80022c4 <uart_iniciar+0x10c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
	UartHandle.Init.Mode = UART_MODE_TX_RX;
 80021e4:	4b37      	ldr	r3, [pc, #220]	; (80022c4 <uart_iniciar+0x10c>)
 80021e6:	220c      	movs	r2, #12
 80021e8:	615a      	str	r2, [r3, #20]
	UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ea:	4b36      	ldr	r3, [pc, #216]	; (80022c4 <uart_iniciar+0x10c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f0:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <uart_iniciar+0x10c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]

	// si se inicia la UART, cambia estado e imprime datos de la UART
	if (HAL_UART_Init(&UartHandle) == HAL_OK) {
 80021f6:	4833      	ldr	r0, [pc, #204]	; (80022c4 <uart_iniciar+0x10c>)
 80021f8:	f002 fe96 	bl	8004f28 <HAL_UART_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d159      	bne.n	80022b6 <uart_iniciar+0xfe>
		estado = true;
 8002202:	2301      	movs	r3, #1
 8002204:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	    snprintf(cadena, sizeof(cadena), "Valores de configuración de USART:\r\n");
 8002208:	463b      	mov	r3, r7
 800220a:	4a30      	ldr	r2, [pc, #192]	; (80022cc <uart_iniciar+0x114>)
 800220c:	2164      	movs	r1, #100	; 0x64
 800220e:	4618      	mov	r0, r3
 8002210:	f004 fc86 	bl	8006b20 <sniprintf>
	    uart_enviar_string((uint8_t *) cadena);
 8002214:	463b      	mov	r3, r7
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f868 	bl	80022ec <uart_enviar_string>
	    snprintf(cadena, sizeof(cadena), "Velocidad en baudios: %" PRIu32 " \r\n", UartHandle.Init.BaudRate);
 800221c:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <uart_iniciar+0x10c>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4638      	mov	r0, r7
 8002222:	4a2b      	ldr	r2, [pc, #172]	; (80022d0 <uart_iniciar+0x118>)
 8002224:	2164      	movs	r1, #100	; 0x64
 8002226:	f004 fc7b 	bl	8006b20 <sniprintf>
	    uart_enviar_string((uint8_t *) cadena);
 800222a:	463b      	mov	r3, r7
 800222c:	4618      	mov	r0, r3
 800222e:	f000 f85d 	bl	80022ec <uart_enviar_string>
	    snprintf(cadena, sizeof(cadena), "Largo de palabra: %" PRIu32 " \r\n", UartHandle.Init.WordLength);
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <uart_iniciar+0x10c>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	4638      	mov	r0, r7
 8002238:	4a26      	ldr	r2, [pc, #152]	; (80022d4 <uart_iniciar+0x11c>)
 800223a:	2164      	movs	r1, #100	; 0x64
 800223c:	f004 fc70 	bl	8006b20 <sniprintf>
	    uart_enviar_string((uint8_t *) cadena);
 8002240:	463b      	mov	r3, r7
 8002242:	4618      	mov	r0, r3
 8002244:	f000 f852 	bl	80022ec <uart_enviar_string>
	    snprintf(cadena, sizeof(cadena), "Bits de parada: %" PRIu32 " \r\n", UartHandle.Init.StopBits);
 8002248:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <uart_iniciar+0x10c>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4638      	mov	r0, r7
 800224e:	4a22      	ldr	r2, [pc, #136]	; (80022d8 <uart_iniciar+0x120>)
 8002250:	2164      	movs	r1, #100	; 0x64
 8002252:	f004 fc65 	bl	8006b20 <sniprintf>
	    uart_enviar_string((uint8_t *) cadena);
 8002256:	463b      	mov	r3, r7
 8002258:	4618      	mov	r0, r3
 800225a:	f000 f847 	bl	80022ec <uart_enviar_string>
	    snprintf(cadena, sizeof(cadena), "Paridad: %" PRIu32 " \r\n", UartHandle.Init.Parity);
 800225e:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <uart_iniciar+0x10c>)
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	4638      	mov	r0, r7
 8002264:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <uart_iniciar+0x124>)
 8002266:	2164      	movs	r1, #100	; 0x64
 8002268:	f004 fc5a 	bl	8006b20 <sniprintf>
	    uart_enviar_string((uint8_t *) cadena);
 800226c:	463b      	mov	r3, r7
 800226e:	4618      	mov	r0, r3
 8002270:	f000 f83c 	bl	80022ec <uart_enviar_string>
	    snprintf(cadena, sizeof(cadena), "Modo: %" PRIu32 " \r\n", UartHandle.Init.Mode);
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <uart_iniciar+0x10c>)
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	4638      	mov	r0, r7
 800227a:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <uart_iniciar+0x128>)
 800227c:	2164      	movs	r1, #100	; 0x64
 800227e:	f004 fc4f 	bl	8006b20 <sniprintf>
	    uart_enviar_string((uint8_t *) cadena);
 8002282:	463b      	mov	r3, r7
 8002284:	4618      	mov	r0, r3
 8002286:	f000 f831 	bl	80022ec <uart_enviar_string>
	    snprintf(cadena, sizeof(cadena), "Control de flujo de hardware: %" PRIu32 " \r\n", UartHandle.Init.HwFlowCtl);
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <uart_iniciar+0x10c>)
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	4638      	mov	r0, r7
 8002290:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <uart_iniciar+0x12c>)
 8002292:	2164      	movs	r1, #100	; 0x64
 8002294:	f004 fc44 	bl	8006b20 <sniprintf>
	    uart_enviar_string((uint8_t *) cadena);
 8002298:	463b      	mov	r3, r7
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f826 	bl	80022ec <uart_enviar_string>
	    snprintf(cadena, sizeof(cadena), "Sobre muestreo 8: %" PRIu32 " \r\n", UartHandle.Init.OverSampling);
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <uart_iniciar+0x10c>)
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	4638      	mov	r0, r7
 80022a6:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <uart_iniciar+0x130>)
 80022a8:	2164      	movs	r1, #100	; 0x64
 80022aa:	f004 fc39 	bl	8006b20 <sniprintf>
	    uart_enviar_string((uint8_t *) cadena);
 80022ae:	463b      	mov	r3, r7
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 f81b 	bl	80022ec <uart_enviar_string>
	}
    return estado;
 80022b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3768      	adds	r7, #104	; 0x68
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000964 	.word	0x20000964
 80022c8:	40004800 	.word	0x40004800
 80022cc:	0800a560 	.word	0x0800a560
 80022d0:	0800a588 	.word	0x0800a588
 80022d4:	0800a5a8 	.word	0x0800a5a8
 80022d8:	0800a5c4 	.word	0x0800a5c4
 80022dc:	0800a5dc 	.word	0x0800a5dc
 80022e0:	0800a5ec 	.word	0x0800a5ec
 80022e4:	0800a5fc 	.word	0x0800a5fc
 80022e8:	0800a624 	.word	0x0800a624

080022ec <uart_enviar_string>:

void uart_enviar_string(uint8_t * pstring) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	// control defensivo
	if (pstring == NULL) {
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <uart_enviar_string+0x26>
		return;
	}
	// transmite
	HAL_UART_Transmit(&UartHandle, pstring, strlen((char *)pstring), HAL_MAX_DELAY);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7fd ffc8 	bl	8000290 <strlen>
 8002300:	4603      	mov	r3, r0
 8002302:	b29a      	uxth	r2, r3
 8002304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4804      	ldr	r0, [pc, #16]	; (800231c <uart_enviar_string+0x30>)
 800230c:	f002 fe59 	bl	8004fc2 <HAL_UART_Transmit>
 8002310:	e000      	b.n	8002314 <uart_enviar_string+0x28>
		return;
 8002312:	bf00      	nop
}
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000964 	.word	0x20000964

08002320 <manejar_errores>:
static ADC_HandleTypeDef hadc1; // manejador de ADC1

/* ---------------------------------- Funciones --------------------------------- */

// Función que detiene la ejecución del programa en caso de error.
void manejar_errores(void) {
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8002324:	2201      	movs	r2, #1
 8002326:	2101      	movs	r1, #1
 8002328:	4808      	ldr	r0, [pc, #32]	; (800234c <manejar_errores+0x2c>)
 800232a:	f001 fb67 	bl	80039fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800232e:	2201      	movs	r2, #1
 8002330:	2180      	movs	r1, #128	; 0x80
 8002332:	4806      	ldr	r0, [pc, #24]	; (800234c <manejar_errores+0x2c>)
 8002334:	f001 fb62 	bl	80039fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002338:	2201      	movs	r2, #1
 800233a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800233e:	4803      	ldr	r0, [pc, #12]	; (800234c <manejar_errores+0x2c>)
 8002340:	f001 fb5c 	bl	80039fc <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8002344:	b672      	cpsid	i
}
 8002346:	bf00      	nop
	__disable_irq();
	while (1) {
 8002348:	e7fe      	b.n	8002348 <manejar_errores+0x28>
 800234a:	bf00      	nop
 800234c:	40020400 	.word	0x40020400

08002350 <ADC_iniciar>:
	}
}

// Inicializa el módulo ADC.
void ADC_iniciar() {
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002356:	463b      	mov	r3, r7
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
	hadc1.Instance = ADC1;
 8002362:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <ADC_iniciar+0x98>)
 8002364:	4a21      	ldr	r2, [pc, #132]	; (80023ec <ADC_iniciar+0x9c>)
 8002366:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002368:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <ADC_iniciar+0x98>)
 800236a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800236e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002370:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <ADC_iniciar+0x98>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8002376:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <ADC_iniciar+0x98>)
 8002378:	2200      	movs	r2, #0
 800237a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800237c:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <ADC_iniciar+0x98>)
 800237e:	2200      	movs	r2, #0
 8002380:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002382:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <ADC_iniciar+0x98>)
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800238a:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <ADC_iniciar+0x98>)
 800238c:	2200      	movs	r2, #0
 800238e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002390:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <ADC_iniciar+0x98>)
 8002392:	4a17      	ldr	r2, [pc, #92]	; (80023f0 <ADC_iniciar+0xa0>)
 8002394:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002396:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <ADC_iniciar+0x98>)
 8002398:	2200      	movs	r2, #0
 800239a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <ADC_iniciar+0x98>)
 800239e:	2201      	movs	r2, #1
 80023a0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <ADC_iniciar+0x98>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <ADC_iniciar+0x98>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80023b0:	480d      	ldr	r0, [pc, #52]	; (80023e8 <ADC_iniciar+0x98>)
 80023b2:	f000 f941 	bl	8002638 <HAL_ADC_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <ADC_iniciar+0x70>
		manejar_errores();
 80023bc:	f7ff ffb0 	bl	8002320 <manejar_errores>
	}


	/* Sensor de temperatura interno */
	 sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <ADC_iniciar+0xa4>)
 80023c2:	603b      	str	r3, [r7, #0]
	 sConfig.Rank = 1;
 80023c4:	2301      	movs	r3, #1
 80023c6:	607b      	str	r3, [r7, #4]
	 sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80023c8:	2305      	movs	r3, #5
 80023ca:	60bb      	str	r3, [r7, #8]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80023cc:	463b      	mov	r3, r7
 80023ce:	4619      	mov	r1, r3
 80023d0:	4805      	ldr	r0, [pc, #20]	; (80023e8 <ADC_iniciar+0x98>)
 80023d2:	f000 fb13 	bl	80029fc <HAL_ADC_ConfigChannel>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <ADC_iniciar+0x90>
		 manejar_errores();
 80023dc:	f7ff ffa0 	bl	8002320 <manejar_errores>
	 }
}
 80023e0:	bf00      	nop
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	200009fc 	.word	0x200009fc
 80023ec:	40012000 	.word	0x40012000
 80023f0:	0f000001 	.word	0x0f000001
 80023f4:	10000012 	.word	0x10000012

080023f8 <ADC_obtener_datos>:

// obtener datos del ADC
uint32_t ADC_obtener_datos() {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
	uint32_t valor;

	HAL_ADC_Start(&hadc1);
 80023fe:	480a      	ldr	r0, [pc, #40]	; (8002428 <ADC_obtener_datos+0x30>)
 8002400:	f000 f95e 	bl	80026c0 <HAL_ADC_Start>
	// Espera hasta que la conversión esté completa
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002404:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002408:	4807      	ldr	r0, [pc, #28]	; (8002428 <ADC_obtener_datos+0x30>)
 800240a:	f000 fa5e 	bl	80028ca <HAL_ADC_PollForConversion>
	// Obtiene el valor del ADC
	valor = HAL_ADC_GetValue(&hadc1);
 800240e:	4806      	ldr	r0, [pc, #24]	; (8002428 <ADC_obtener_datos+0x30>)
 8002410:	f000 fae6 	bl	80029e0 <HAL_ADC_GetValue>
 8002414:	6078      	str	r0, [r7, #4]
	// Detiene el ADC
	HAL_ADC_Stop(&hadc1);
 8002416:	4804      	ldr	r0, [pc, #16]	; (8002428 <ADC_obtener_datos+0x30>)
 8002418:	f000 fa24 	bl	8002864 <HAL_ADC_Stop>
	return valor;
 800241c:	687b      	ldr	r3, [r7, #4]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200009fc 	.word	0x200009fc

0800242c <I2C_iniciar>:

// Inicializa el módulo I2C.
void I2C_iniciar(void) {
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <I2C_iniciar+0x74>)
 8002432:	4a1c      	ldr	r2, [pc, #112]	; (80024a4 <I2C_iniciar+0x78>)
 8002434:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8002436:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <I2C_iniciar+0x74>)
 8002438:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <I2C_iniciar+0x7c>)
 800243a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800243c:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <I2C_iniciar+0x74>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002442:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <I2C_iniciar+0x74>)
 8002444:	2200      	movs	r2, #0
 8002446:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002448:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <I2C_iniciar+0x74>)
 800244a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800244e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002450:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <I2C_iniciar+0x74>)
 8002452:	2200      	movs	r2, #0
 8002454:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002456:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <I2C_iniciar+0x74>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800245c:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <I2C_iniciar+0x74>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002462:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <I2C_iniciar+0x74>)
 8002464:	2200      	movs	r2, #0
 8002466:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002468:	480d      	ldr	r0, [pc, #52]	; (80024a0 <I2C_iniciar+0x74>)
 800246a:	f001 fae1 	bl	8003a30 <HAL_I2C_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <I2C_iniciar+0x4c>
		manejar_errores();
 8002474:	f7ff ff54 	bl	8002320 <manejar_errores>
	}

	/** Configura el filtro analogico
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8002478:	2100      	movs	r1, #0
 800247a:	4809      	ldr	r0, [pc, #36]	; (80024a0 <I2C_iniciar+0x74>)
 800247c:	f001 ff23 	bl	80042c6 <HAL_I2CEx_ConfigAnalogFilter>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <I2C_iniciar+0x5e>
			!= HAL_OK) {
		manejar_errores();
 8002486:	f7ff ff4b 	bl	8002320 <manejar_errores>
	}

	/** Configura el filtro digital
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800248a:	2100      	movs	r1, #0
 800248c:	4804      	ldr	r0, [pc, #16]	; (80024a0 <I2C_iniciar+0x74>)
 800248e:	f001 ff56 	bl	800433e <HAL_I2CEx_ConfigDigitalFilter>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <I2C_iniciar+0x70>
		manejar_errores();
 8002498:	f7ff ff42 	bl	8002320 <manejar_errores>
	}
}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	200009a8 	.word	0x200009a8
 80024a4:	40005400 	.word	0x40005400
 80024a8:	000186a0 	.word	0x000186a0

080024ac <I2C_transmitir>:

// Transmite un dato a través del bus I2C.
void I2C_transmitir(uint16_t direccion, uint8_t *dato, uint8_t tamano,
		uint8_t tiempo_espera) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	6039      	str	r1, [r7, #0]
 80024b4:	4611      	mov	r1, r2
 80024b6:	461a      	mov	r2, r3
 80024b8:	4603      	mov	r3, r0
 80024ba:	80fb      	strh	r3, [r7, #6]
 80024bc:	460b      	mov	r3, r1
 80024be:	717b      	strb	r3, [r7, #5]
 80024c0:	4613      	mov	r3, r2
 80024c2:	713b      	strb	r3, [r7, #4]
	if (HAL_I2C_Master_Transmit(&hi2c1, direccion << 1, dato, tamano,
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	b299      	uxth	r1, r3
 80024ca:	797b      	ldrb	r3, [r7, #5]
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	793b      	ldrb	r3, [r7, #4]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	4613      	mov	r3, r2
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	4806      	ldr	r0, [pc, #24]	; (80024f0 <I2C_transmitir+0x44>)
 80024d8:	f001 fbee 	bl	8003cb8 <HAL_I2C_Master_Transmit>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <I2C_transmitir+0x3a>
			tiempo_espera) != HAL_OK) {
		manejar_errores();
 80024e2:	f7ff ff1d 	bl	8002320 <manejar_errores>
	}
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200009a8 	.word	0x200009a8

080024f4 <esperar>:
		manejar_errores();
	}
}

// Espera durante un período de tiempo especificado en milisegundos
void esperar(uint32_t tiempo) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	HAL_Delay(tiempo);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f877 	bl	80025f0 <HAL_Delay>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <HAL_Init+0x40>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0d      	ldr	r2, [pc, #52]	; (800254c <HAL_Init+0x40>)
 8002516:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800251a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_Init+0x40>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0a      	ldr	r2, [pc, #40]	; (800254c <HAL_Init+0x40>)
 8002522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002526:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002528:	4b08      	ldr	r3, [pc, #32]	; (800254c <HAL_Init+0x40>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a07      	ldr	r2, [pc, #28]	; (800254c <HAL_Init+0x40>)
 800252e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002532:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002534:	2003      	movs	r0, #3
 8002536:	f000 fd41 	bl	8002fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800253a:	2000      	movs	r0, #0
 800253c:	f000 f808 	bl	8002550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002540:	f7fe ff12 	bl	8001368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023c00 	.word	0x40023c00

08002550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_InitTick+0x54>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <HAL_InitTick+0x58>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4619      	mov	r1, r3
 8002562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002566:	fbb3 f3f1 	udiv	r3, r3, r1
 800256a:	fbb2 f3f3 	udiv	r3, r2, r3
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fd4b 	bl	800300a <HAL_SYSTICK_Config>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e00e      	b.n	800259c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b0f      	cmp	r3, #15
 8002582:	d80a      	bhi.n	800259a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002584:	2200      	movs	r2, #0
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800258c:	f000 fd21 	bl	8002fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002590:	4a06      	ldr	r2, [pc, #24]	; (80025ac <HAL_InitTick+0x5c>)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	e000      	b.n	800259c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000000 	.word	0x20000000
 80025a8:	20000008 	.word	0x20000008
 80025ac:	20000004 	.word	0x20000004

080025b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_IncTick+0x20>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_IncTick+0x24>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <HAL_IncTick+0x24>)
 80025c2:	6013      	str	r3, [r2, #0]
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000008 	.word	0x20000008
 80025d4:	20000a44 	.word	0x20000a44

080025d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return uwTick;
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_GetTick+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000a44 	.word	0x20000a44

080025f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025f8:	f7ff ffee 	bl	80025d8 <HAL_GetTick>
 80025fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002608:	d005      	beq.n	8002616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_Delay+0x44>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4413      	add	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002616:	bf00      	nop
 8002618:	f7ff ffde 	bl	80025d8 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	429a      	cmp	r2, r3
 8002626:	d8f7      	bhi.n	8002618 <HAL_Delay+0x28>
  {
  }
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000008 	.word	0x20000008

08002638 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e033      	b.n	80026b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7fe feae 	bl	80013b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	d118      	bne.n	80026a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800267e:	f023 0302 	bic.w	r3, r3, #2
 8002682:	f043 0202 	orr.w	r2, r3, #2
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fae8 	bl	8002c60 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f023 0303 	bic.w	r3, r3, #3
 800269e:	f043 0201 	orr.w	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
 80026a6:	e001      	b.n	80026ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_ADC_Start+0x1a>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e0b2      	b.n	8002840 <HAL_ADC_Start+0x180>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d018      	beq.n	8002722 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002700:	4b52      	ldr	r3, [pc, #328]	; (800284c <HAL_ADC_Start+0x18c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a52      	ldr	r2, [pc, #328]	; (8002850 <HAL_ADC_Start+0x190>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0c9a      	lsrs	r2, r3, #18
 800270c:	4613      	mov	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4413      	add	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002714:	e002      	b.n	800271c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	3b01      	subs	r3, #1
 800271a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f9      	bne.n	8002716 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	d17a      	bne.n	8002826 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002738:	f023 0301 	bic.w	r3, r3, #1
 800273c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274e:	2b00      	cmp	r3, #0
 8002750:	d007      	beq.n	8002762 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800275a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800276a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800276e:	d106      	bne.n	800277e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002774:	f023 0206 	bic.w	r2, r3, #6
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	645a      	str	r2, [r3, #68]	; 0x44
 800277c:	e002      	b.n	8002784 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800278c:	4b31      	ldr	r3, [pc, #196]	; (8002854 <HAL_ADC_Start+0x194>)
 800278e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002798:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d12a      	bne.n	80027fc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a2b      	ldr	r2, [pc, #172]	; (8002858 <HAL_ADC_Start+0x198>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d015      	beq.n	80027dc <HAL_ADC_Start+0x11c>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a29      	ldr	r2, [pc, #164]	; (800285c <HAL_ADC_Start+0x19c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d105      	bne.n	80027c6 <HAL_ADC_Start+0x106>
 80027ba:	4b26      	ldr	r3, [pc, #152]	; (8002854 <HAL_ADC_Start+0x194>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a25      	ldr	r2, [pc, #148]	; (8002860 <HAL_ADC_Start+0x1a0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d136      	bne.n	800283e <HAL_ADC_Start+0x17e>
 80027d0:	4b20      	ldr	r3, [pc, #128]	; (8002854 <HAL_ADC_Start+0x194>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0310 	and.w	r3, r3, #16
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d130      	bne.n	800283e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d129      	bne.n	800283e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	e020      	b.n	800283e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a15      	ldr	r2, [pc, #84]	; (8002858 <HAL_ADC_Start+0x198>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d11b      	bne.n	800283e <HAL_ADC_Start+0x17e>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d114      	bne.n	800283e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	e00b      	b.n	800283e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f043 0210 	orr.w	r2, r3, #16
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f043 0201 	orr.w	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	20000000 	.word	0x20000000
 8002850:	431bde83 	.word	0x431bde83
 8002854:	40012300 	.word	0x40012300
 8002858:	40012000 	.word	0x40012000
 800285c:	40012100 	.word	0x40012100
 8002860:	40012200 	.word	0x40012200

08002864 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_ADC_Stop+0x16>
 8002876:	2302      	movs	r3, #2
 8002878:	e021      	b.n	80028be <HAL_ADC_Stop+0x5a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0201 	bic.w	r2, r2, #1
 8002890:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d109      	bne.n	80028b4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028a8:	f023 0301 	bic.w	r3, r3, #1
 80028ac:	f043 0201 	orr.w	r2, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e6:	d113      	bne.n	8002910 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f6:	d10b      	bne.n	8002910 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f043 0220 	orr.w	r2, r3, #32
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e063      	b.n	80029d8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002910:	f7ff fe62 	bl	80025d8 <HAL_GetTick>
 8002914:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002916:	e021      	b.n	800295c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800291e:	d01d      	beq.n	800295c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d007      	beq.n	8002936 <HAL_ADC_PollForConversion+0x6c>
 8002926:	f7ff fe57 	bl	80025d8 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d212      	bcs.n	800295c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b02      	cmp	r3, #2
 8002942:	d00b      	beq.n	800295c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	f043 0204 	orr.w	r2, r3, #4
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e03d      	b.n	80029d8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b02      	cmp	r3, #2
 8002968:	d1d6      	bne.n	8002918 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f06f 0212 	mvn.w	r2, #18
 8002972:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d123      	bne.n	80029d6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002992:	2b00      	cmp	r3, #0
 8002994:	d11f      	bne.n	80029d6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d006      	beq.n	80029b2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d111      	bne.n	80029d6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d105      	bne.n	80029d6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f043 0201 	orr.w	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x1c>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e113      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x244>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b09      	cmp	r3, #9
 8002a26:	d925      	bls.n	8002a74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68d9      	ldr	r1, [r3, #12]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	4613      	mov	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3b1e      	subs	r3, #30
 8002a3e:	2207      	movs	r2, #7
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43da      	mvns	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	400a      	ands	r2, r1
 8002a4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68d9      	ldr	r1, [r3, #12]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	4618      	mov	r0, r3
 8002a60:	4603      	mov	r3, r0
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4403      	add	r3, r0
 8002a66:	3b1e      	subs	r3, #30
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	60da      	str	r2, [r3, #12]
 8002a72:	e022      	b.n	8002aba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6919      	ldr	r1, [r3, #16]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	4613      	mov	r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	4413      	add	r3, r2
 8002a88:	2207      	movs	r2, #7
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	400a      	ands	r2, r1
 8002a96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6919      	ldr	r1, [r3, #16]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	4603      	mov	r3, r0
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4403      	add	r3, r0
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b06      	cmp	r3, #6
 8002ac0:	d824      	bhi.n	8002b0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3b05      	subs	r3, #5
 8002ad4:	221f      	movs	r2, #31
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43da      	mvns	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	4618      	mov	r0, r3
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	3b05      	subs	r3, #5
 8002afe:	fa00 f203 	lsl.w	r2, r0, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	635a      	str	r2, [r3, #52]	; 0x34
 8002b0a:	e04c      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b0c      	cmp	r3, #12
 8002b12:	d824      	bhi.n	8002b5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	3b23      	subs	r3, #35	; 0x23
 8002b26:	221f      	movs	r2, #31
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43da      	mvns	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	400a      	ands	r2, r1
 8002b34:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	4618      	mov	r0, r3
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3b23      	subs	r3, #35	; 0x23
 8002b50:	fa00 f203 	lsl.w	r2, r0, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b5c:	e023      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3b41      	subs	r3, #65	; 0x41
 8002b70:	221f      	movs	r2, #31
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43da      	mvns	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	3b41      	subs	r3, #65	; 0x41
 8002b9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ba6:	4b29      	ldr	r3, [pc, #164]	; (8002c4c <HAL_ADC_ConfigChannel+0x250>)
 8002ba8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a28      	ldr	r2, [pc, #160]	; (8002c50 <HAL_ADC_ConfigChannel+0x254>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d10f      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x1d8>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b12      	cmp	r3, #18
 8002bba:	d10b      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a1d      	ldr	r2, [pc, #116]	; (8002c50 <HAL_ADC_ConfigChannel+0x254>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d12b      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x23a>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1c      	ldr	r2, [pc, #112]	; (8002c54 <HAL_ADC_ConfigChannel+0x258>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d003      	beq.n	8002bf0 <HAL_ADC_ConfigChannel+0x1f4>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b11      	cmp	r3, #17
 8002bee:	d122      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a11      	ldr	r2, [pc, #68]	; (8002c54 <HAL_ADC_ConfigChannel+0x258>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d111      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c12:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <HAL_ADC_ConfigChannel+0x25c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a11      	ldr	r2, [pc, #68]	; (8002c5c <HAL_ADC_ConfigChannel+0x260>)
 8002c18:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1c:	0c9a      	lsrs	r2, r3, #18
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c28:	e002      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f9      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	40012300 	.word	0x40012300
 8002c50:	40012000 	.word	0x40012000
 8002c54:	10000012 	.word	0x10000012
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	431bde83 	.word	0x431bde83

08002c60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c68:	4b79      	ldr	r3, [pc, #484]	; (8002e50 <ADC_Init+0x1f0>)
 8002c6a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	431a      	orrs	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6859      	ldr	r1, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	021a      	lsls	r2, r3, #8
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002cb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6859      	ldr	r1, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6899      	ldr	r1, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	4a58      	ldr	r2, [pc, #352]	; (8002e54 <ADC_Init+0x1f4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d022      	beq.n	8002d3e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6899      	ldr	r1, [r3, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6899      	ldr	r1, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	e00f      	b.n	8002d5e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0202 	bic.w	r2, r2, #2
 8002d6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6899      	ldr	r1, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	7e1b      	ldrb	r3, [r3, #24]
 8002d78:	005a      	lsls	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01b      	beq.n	8002dc4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002daa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6859      	ldr	r1, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	3b01      	subs	r3, #1
 8002db8:	035a      	lsls	r2, r3, #13
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	e007      	b.n	8002dd4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dd2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002de2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	051a      	lsls	r2, r3, #20
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6899      	ldr	r1, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e16:	025a      	lsls	r2, r3, #9
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6899      	ldr	r1, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	029a      	lsls	r2, r3, #10
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	609a      	str	r2, [r3, #8]
}
 8002e44:	bf00      	nop
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	40012300 	.word	0x40012300
 8002e54:	0f000001 	.word	0x0f000001

08002e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <__NVIC_SetPriorityGrouping+0x44>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e74:	4013      	ands	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e8a:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <__NVIC_SetPriorityGrouping+0x44>)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	60d3      	str	r3, [r2, #12]
}
 8002e90:	bf00      	nop
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	0a1b      	lsrs	r3, r3, #8
 8002eaa:	f003 0307 	and.w	r3, r3, #7
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	6039      	str	r1, [r7, #0]
 8002ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	db0a      	blt.n	8002ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	490c      	ldr	r1, [pc, #48]	; (8002f08 <__NVIC_SetPriority+0x4c>)
 8002ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eda:	0112      	lsls	r2, r2, #4
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	440b      	add	r3, r1
 8002ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ee4:	e00a      	b.n	8002efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	4908      	ldr	r1, [pc, #32]	; (8002f0c <__NVIC_SetPriority+0x50>)
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	3b04      	subs	r3, #4
 8002ef4:	0112      	lsls	r2, r2, #4
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	440b      	add	r3, r1
 8002efa:	761a      	strb	r2, [r3, #24]
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000e100 	.word	0xe000e100
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b089      	sub	sp, #36	; 0x24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f1c3 0307 	rsb	r3, r3, #7
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	bf28      	it	cs
 8002f2e:	2304      	movcs	r3, #4
 8002f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3304      	adds	r3, #4
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	d902      	bls.n	8002f40 <NVIC_EncodePriority+0x30>
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3b03      	subs	r3, #3
 8002f3e:	e000      	b.n	8002f42 <NVIC_EncodePriority+0x32>
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43da      	mvns	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	401a      	ands	r2, r3
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f62:	43d9      	mvns	r1, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f68:	4313      	orrs	r3, r2
         );
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3724      	adds	r7, #36	; 0x24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f88:	d301      	bcc.n	8002f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e00f      	b.n	8002fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <SysTick_Config+0x40>)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f96:	210f      	movs	r1, #15
 8002f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f9c:	f7ff ff8e 	bl	8002ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fa0:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <SysTick_Config+0x40>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fa6:	4b04      	ldr	r3, [pc, #16]	; (8002fb8 <SysTick_Config+0x40>)
 8002fa8:	2207      	movs	r2, #7
 8002faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	e000e010 	.word	0xe000e010

08002fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff ff47 	bl	8002e58 <__NVIC_SetPriorityGrouping>
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b086      	sub	sp, #24
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
 8002fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe4:	f7ff ff5c 	bl	8002ea0 <__NVIC_GetPriorityGrouping>
 8002fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	6978      	ldr	r0, [r7, #20]
 8002ff0:	f7ff ff8e 	bl	8002f10 <NVIC_EncodePriority>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff ff5d 	bl	8002ebc <__NVIC_SetPriority>
}
 8003002:	bf00      	nop
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b082      	sub	sp, #8
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff ffb0 	bl	8002f78 <SysTick_Config>
 8003018:	4603      	mov	r3, r0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e06c      	b.n	8003110 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800303c:	2b00      	cmp	r3, #0
 800303e:	d106      	bne.n	800304e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2223      	movs	r2, #35	; 0x23
 8003044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7fe f9f9 	bl	8001440 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	4b31      	ldr	r3, [pc, #196]	; (8003118 <HAL_ETH_Init+0xf4>)
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	4a30      	ldr	r2, [pc, #192]	; (8003118 <HAL_ETH_Init+0xf4>)
 8003058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800305c:	6453      	str	r3, [r2, #68]	; 0x44
 800305e:	4b2e      	ldr	r3, [pc, #184]	; (8003118 <HAL_ETH_Init+0xf4>)
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800306a:	4b2c      	ldr	r3, [pc, #176]	; (800311c <HAL_ETH_Init+0xf8>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4a2b      	ldr	r2, [pc, #172]	; (800311c <HAL_ETH_Init+0xf8>)
 8003070:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003074:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003076:	4b29      	ldr	r3, [pc, #164]	; (800311c <HAL_ETH_Init+0xf8>)
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	4927      	ldr	r1, [pc, #156]	; (800311c <HAL_ETH_Init+0xf8>)
 8003080:	4313      	orrs	r3, r2
 8003082:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003084:	4b25      	ldr	r3, [pc, #148]	; (800311c <HAL_ETH_Init+0xf8>)
 8003086:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800309e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030a0:	f7ff fa9a 	bl	80025d8 <HAL_GetTick>
 80030a4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80030a6:	e011      	b.n	80030cc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80030a8:	f7ff fa96 	bl	80025d8 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030b6:	d909      	bls.n	80030cc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2204      	movs	r2, #4
 80030bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	22e0      	movs	r2, #224	; 0xe0
 80030c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e021      	b.n	8003110 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1e4      	bne.n	80030a8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f958 	bl	8003394 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f9ff 	bl	80034e8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fa55 	bl	800359a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	461a      	mov	r2, r3
 80030f6:	2100      	movs	r1, #0
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f9bd 	bl	8003478 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2210      	movs	r2, #16
 800310a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40023800 	.word	0x40023800
 800311c:	40013800 	.word	0x40013800

08003120 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4b51      	ldr	r3, [pc, #324]	; (800327c <ETH_SetMACConfig+0x15c>)
 8003136:	4013      	ands	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	7c1b      	ldrb	r3, [r3, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <ETH_SetMACConfig+0x28>
 8003142:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003146:	e000      	b.n	800314a <ETH_SetMACConfig+0x2a>
 8003148:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	7c5b      	ldrb	r3, [r3, #17]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d102      	bne.n	8003158 <ETH_SetMACConfig+0x38>
 8003152:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003156:	e000      	b.n	800315a <ETH_SetMACConfig+0x3a>
 8003158:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800315a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003160:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	7fdb      	ldrb	r3, [r3, #31]
 8003166:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003168:	431a      	orrs	r2, r3
                        macconf->Speed |
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800316e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	7f92      	ldrb	r2, [r2, #30]
 8003174:	2a00      	cmp	r2, #0
 8003176:	d102      	bne.n	800317e <ETH_SetMACConfig+0x5e>
 8003178:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800317c:	e000      	b.n	8003180 <ETH_SetMACConfig+0x60>
 800317e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003180:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	7f1b      	ldrb	r3, [r3, #28]
 8003186:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003188:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800318e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	791b      	ldrb	r3, [r3, #4]
 8003194:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003196:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800319e:	2a00      	cmp	r2, #0
 80031a0:	d102      	bne.n	80031a8 <ETH_SetMACConfig+0x88>
 80031a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a6:	e000      	b.n	80031aa <ETH_SetMACConfig+0x8a>
 80031a8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80031aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	7bdb      	ldrb	r3, [r3, #15]
 80031b0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80031b2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80031b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031c0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80031c2:	4313      	orrs	r3, r2
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031da:	2001      	movs	r0, #1
 80031dc:	f7ff fa08 	bl	80025f0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80031f6:	4013      	ands	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fe:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003206:	2a00      	cmp	r2, #0
 8003208:	d101      	bne.n	800320e <ETH_SetMACConfig+0xee>
 800320a:	2280      	movs	r2, #128	; 0x80
 800320c:	e000      	b.n	8003210 <ETH_SetMACConfig+0xf0>
 800320e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003210:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003216:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800321e:	2a01      	cmp	r2, #1
 8003220:	d101      	bne.n	8003226 <ETH_SetMACConfig+0x106>
 8003222:	2208      	movs	r2, #8
 8003224:	e000      	b.n	8003228 <ETH_SetMACConfig+0x108>
 8003226:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003228:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003230:	2a01      	cmp	r2, #1
 8003232:	d101      	bne.n	8003238 <ETH_SetMACConfig+0x118>
 8003234:	2204      	movs	r2, #4
 8003236:	e000      	b.n	800323a <ETH_SetMACConfig+0x11a>
 8003238:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800323a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003242:	2a01      	cmp	r2, #1
 8003244:	d101      	bne.n	800324a <ETH_SetMACConfig+0x12a>
 8003246:	2202      	movs	r2, #2
 8003248:	e000      	b.n	800324c <ETH_SetMACConfig+0x12c>
 800324a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800324c:	4313      	orrs	r3, r2
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4313      	orrs	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003264:	2001      	movs	r0, #1
 8003266:	f7ff f9c3 	bl	80025f0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	619a      	str	r2, [r3, #24]
}
 8003272:	bf00      	nop
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	ff20810f 	.word	0xff20810f

08003280 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4b3d      	ldr	r3, [pc, #244]	; (8003390 <ETH_SetDMAConfig+0x110>)
 800329a:	4013      	ands	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	7b1b      	ldrb	r3, [r3, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d102      	bne.n	80032ac <ETH_SetDMAConfig+0x2c>
 80032a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80032aa:	e000      	b.n	80032ae <ETH_SetDMAConfig+0x2e>
 80032ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	7b5b      	ldrb	r3, [r3, #13]
 80032b2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80032b4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	7f52      	ldrb	r2, [r2, #29]
 80032ba:	2a00      	cmp	r2, #0
 80032bc:	d102      	bne.n	80032c4 <ETH_SetDMAConfig+0x44>
 80032be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032c2:	e000      	b.n	80032c6 <ETH_SetDMAConfig+0x46>
 80032c4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80032c6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	7b9b      	ldrb	r3, [r3, #14]
 80032cc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80032ce:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80032d4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	7f1b      	ldrb	r3, [r3, #28]
 80032da:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80032dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	7f9b      	ldrb	r3, [r3, #30]
 80032e2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80032e4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80032ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032f2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80032f4:	4313      	orrs	r3, r2
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003304:	461a      	mov	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003316:	2001      	movs	r0, #1
 8003318:	f7ff f96a 	bl	80025f0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003324:	461a      	mov	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	791b      	ldrb	r3, [r3, #4]
 800332e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003334:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800333a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003340:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003348:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800334a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003352:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003358:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003362:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003366:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003374:	2001      	movs	r0, #1
 8003376:	f7ff f93b 	bl	80025f0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003382:	461a      	mov	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6013      	str	r3, [r2, #0]
}
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	f8de3f23 	.word	0xf8de3f23

08003394 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b0a6      	sub	sp, #152	; 0x98
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800339c:	2301      	movs	r3, #1
 800339e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80033a8:	2300      	movs	r3, #0
 80033aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80033ac:	2300      	movs	r3, #0
 80033ae:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80033ca:	2300      	movs	r3, #0
 80033cc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80033d0:	2300      	movs	r3, #0
 80033d2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80033de:	2300      	movs	r3, #0
 80033e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80033e4:	2300      	movs	r3, #0
 80033e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80033f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033fa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80033fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003400:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003402:	2300      	movs	r3, #0
 8003404:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003408:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800340c:	4619      	mov	r1, r3
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff fe86 	bl	8003120 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003414:	2301      	movs	r3, #1
 8003416:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003418:	2301      	movs	r3, #1
 800341a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800341c:	2301      	movs	r3, #1
 800341e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003422:	2301      	movs	r3, #1
 8003424:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800342a:	2300      	movs	r3, #0
 800342c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003430:	2300      	movs	r3, #0
 8003432:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003436:	2300      	movs	r3, #0
 8003438:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800343a:	2301      	movs	r3, #1
 800343c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003440:	2301      	movs	r3, #1
 8003442:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003448:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800344a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800344e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003454:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003456:	2301      	movs	r3, #1
 8003458:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800345c:	2300      	movs	r3, #0
 800345e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003460:	2300      	movs	r3, #0
 8003462:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003464:	f107 0308 	add.w	r3, r7, #8
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff ff08 	bl	8003280 <ETH_SetDMAConfig>
}
 8003470:	bf00      	nop
 8003472:	3798      	adds	r7, #152	; 0x98
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3305      	adds	r3, #5
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	3204      	adds	r2, #4
 8003490:	7812      	ldrb	r2, [r2, #0]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <ETH_MACAddressConfig+0x68>)
 800349a:	4413      	add	r3, r2
 800349c:	461a      	mov	r2, r3
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3303      	adds	r3, #3
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	061a      	lsls	r2, r3, #24
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3302      	adds	r3, #2
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	041b      	lsls	r3, r3, #16
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3301      	adds	r3, #1
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	4313      	orrs	r3, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	7812      	ldrb	r2, [r2, #0]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <ETH_MACAddressConfig+0x6c>)
 80034ca:	4413      	add	r3, r2
 80034cc:	461a      	mov	r2, r3
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	6013      	str	r3, [r2, #0]
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40028040 	.word	0x40028040
 80034e4:	40028044 	.word	0x40028044

080034e8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	e03e      	b.n	8003574 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68d9      	ldr	r1, [r3, #12]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	440b      	add	r3, r1
 8003506:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2200      	movs	r2, #0
 8003512:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2200      	movs	r2, #0
 8003518:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2200      	movs	r2, #0
 800351e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	3206      	adds	r2, #6
 8003528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d80c      	bhi.n	8003558 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68d9      	ldr	r1, [r3, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	440b      	add	r3, r1
 8003550:	461a      	mov	r2, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	e004      	b.n	8003562 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	461a      	mov	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3301      	adds	r3, #1
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d9bd      	bls.n	80034f6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358c:	611a      	str	r2, [r3, #16]
}
 800358e:	bf00      	nop
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800359a:	b480      	push	{r7}
 800359c:	b085      	sub	sp, #20
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	e046      	b.n	8003636 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6919      	ldr	r1, [r3, #16]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	440b      	add	r3, r1
 80035b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2200      	movs	r2, #0
 80035c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2200      	movs	r2, #0
 80035ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2200      	movs	r2, #0
 80035d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2200      	movs	r2, #0
 80035d6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2200      	movs	r2, #0
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80035e4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80035ec:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80035fa:	68b9      	ldr	r1, [r7, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	3212      	adds	r2, #18
 8003602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d80c      	bhi.n	8003626 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6919      	ldr	r1, [r3, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	440b      	add	r3, r1
 800361e:	461a      	mov	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	60da      	str	r2, [r3, #12]
 8003624:	e004      	b.n	8003630 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	461a      	mov	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	3301      	adds	r3, #1
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b03      	cmp	r3, #3
 800363a:	d9b5      	bls.n	80035a8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003666:	60da      	str	r2, [r3, #12]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003674:	b480      	push	{r7}
 8003676:	b089      	sub	sp, #36	; 0x24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003686:	2300      	movs	r3, #0
 8003688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	e177      	b.n	8003980 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003690:	2201      	movs	r2, #1
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	f040 8166 	bne.w	800397a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d005      	beq.n	80036c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d130      	bne.n	8003728 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	2203      	movs	r2, #3
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036fc:	2201      	movs	r2, #1
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	f003 0201 	and.w	r2, r3, #1
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 0303 	and.w	r3, r3, #3
 8003730:	2b03      	cmp	r3, #3
 8003732:	d017      	beq.n	8003764 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	2203      	movs	r2, #3
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4013      	ands	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d123      	bne.n	80037b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	08da      	lsrs	r2, r3, #3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3208      	adds	r2, #8
 8003778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800377c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	220f      	movs	r2, #15
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4013      	ands	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	08da      	lsrs	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3208      	adds	r2, #8
 80037b2:	69b9      	ldr	r1, [r7, #24]
 80037b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	2203      	movs	r2, #3
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0203 	and.w	r2, r3, #3
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 80c0 	beq.w	800397a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	4b66      	ldr	r3, [pc, #408]	; (8003998 <HAL_GPIO_Init+0x324>)
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	4a65      	ldr	r2, [pc, #404]	; (8003998 <HAL_GPIO_Init+0x324>)
 8003804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003808:	6453      	str	r3, [r2, #68]	; 0x44
 800380a:	4b63      	ldr	r3, [pc, #396]	; (8003998 <HAL_GPIO_Init+0x324>)
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003816:	4a61      	ldr	r2, [pc, #388]	; (800399c <HAL_GPIO_Init+0x328>)
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	089b      	lsrs	r3, r3, #2
 800381c:	3302      	adds	r3, #2
 800381e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	220f      	movs	r2, #15
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43db      	mvns	r3, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4013      	ands	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a58      	ldr	r2, [pc, #352]	; (80039a0 <HAL_GPIO_Init+0x32c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d037      	beq.n	80038b2 <HAL_GPIO_Init+0x23e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a57      	ldr	r2, [pc, #348]	; (80039a4 <HAL_GPIO_Init+0x330>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d031      	beq.n	80038ae <HAL_GPIO_Init+0x23a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a56      	ldr	r2, [pc, #344]	; (80039a8 <HAL_GPIO_Init+0x334>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d02b      	beq.n	80038aa <HAL_GPIO_Init+0x236>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a55      	ldr	r2, [pc, #340]	; (80039ac <HAL_GPIO_Init+0x338>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d025      	beq.n	80038a6 <HAL_GPIO_Init+0x232>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a54      	ldr	r2, [pc, #336]	; (80039b0 <HAL_GPIO_Init+0x33c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d01f      	beq.n	80038a2 <HAL_GPIO_Init+0x22e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a53      	ldr	r2, [pc, #332]	; (80039b4 <HAL_GPIO_Init+0x340>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d019      	beq.n	800389e <HAL_GPIO_Init+0x22a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a52      	ldr	r2, [pc, #328]	; (80039b8 <HAL_GPIO_Init+0x344>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d013      	beq.n	800389a <HAL_GPIO_Init+0x226>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a51      	ldr	r2, [pc, #324]	; (80039bc <HAL_GPIO_Init+0x348>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00d      	beq.n	8003896 <HAL_GPIO_Init+0x222>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a50      	ldr	r2, [pc, #320]	; (80039c0 <HAL_GPIO_Init+0x34c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d007      	beq.n	8003892 <HAL_GPIO_Init+0x21e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a4f      	ldr	r2, [pc, #316]	; (80039c4 <HAL_GPIO_Init+0x350>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d101      	bne.n	800388e <HAL_GPIO_Init+0x21a>
 800388a:	2309      	movs	r3, #9
 800388c:	e012      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 800388e:	230a      	movs	r3, #10
 8003890:	e010      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 8003892:	2308      	movs	r3, #8
 8003894:	e00e      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 8003896:	2307      	movs	r3, #7
 8003898:	e00c      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 800389a:	2306      	movs	r3, #6
 800389c:	e00a      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 800389e:	2305      	movs	r3, #5
 80038a0:	e008      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 80038a2:	2304      	movs	r3, #4
 80038a4:	e006      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 80038a6:	2303      	movs	r3, #3
 80038a8:	e004      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e002      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 80038b2:	2300      	movs	r3, #0
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	f002 0203 	and.w	r2, r2, #3
 80038ba:	0092      	lsls	r2, r2, #2
 80038bc:	4093      	lsls	r3, r2
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038c4:	4935      	ldr	r1, [pc, #212]	; (800399c <HAL_GPIO_Init+0x328>)
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	089b      	lsrs	r3, r3, #2
 80038ca:	3302      	adds	r3, #2
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038d2:	4b3d      	ldr	r3, [pc, #244]	; (80039c8 <HAL_GPIO_Init+0x354>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	43db      	mvns	r3, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4013      	ands	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038f6:	4a34      	ldr	r2, [pc, #208]	; (80039c8 <HAL_GPIO_Init+0x354>)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038fc:	4b32      	ldr	r3, [pc, #200]	; (80039c8 <HAL_GPIO_Init+0x354>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003920:	4a29      	ldr	r2, [pc, #164]	; (80039c8 <HAL_GPIO_Init+0x354>)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003926:	4b28      	ldr	r3, [pc, #160]	; (80039c8 <HAL_GPIO_Init+0x354>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	43db      	mvns	r3, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4013      	ands	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800394a:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <HAL_GPIO_Init+0x354>)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003950:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <HAL_GPIO_Init+0x354>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003974:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <HAL_GPIO_Init+0x354>)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	3301      	adds	r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	2b0f      	cmp	r3, #15
 8003984:	f67f ae84 	bls.w	8003690 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	3724      	adds	r7, #36	; 0x24
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800
 800399c:	40013800 	.word	0x40013800
 80039a0:	40020000 	.word	0x40020000
 80039a4:	40020400 	.word	0x40020400
 80039a8:	40020800 	.word	0x40020800
 80039ac:	40020c00 	.word	0x40020c00
 80039b0:	40021000 	.word	0x40021000
 80039b4:	40021400 	.word	0x40021400
 80039b8:	40021800 	.word	0x40021800
 80039bc:	40021c00 	.word	0x40021c00
 80039c0:	40022000 	.word	0x40022000
 80039c4:	40022400 	.word	0x40022400
 80039c8:	40013c00 	.word	0x40013c00

080039cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	887b      	ldrh	r3, [r7, #2]
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
 80039e8:	e001      	b.n	80039ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039ea:	2300      	movs	r3, #0
 80039ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a0c:	787b      	ldrb	r3, [r7, #1]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a12:	887a      	ldrh	r2, [r7, #2]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a18:	e003      	b.n	8003a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	041a      	lsls	r2, r3, #16
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	619a      	str	r2, [r3, #24]
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e12b      	b.n	8003c9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fd fdb8 	bl	80015cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2224      	movs	r2, #36	; 0x24
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a94:	f001 fa20 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 8003a98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	4a81      	ldr	r2, [pc, #516]	; (8003ca4 <HAL_I2C_Init+0x274>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d807      	bhi.n	8003ab4 <HAL_I2C_Init+0x84>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4a80      	ldr	r2, [pc, #512]	; (8003ca8 <HAL_I2C_Init+0x278>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	bf94      	ite	ls
 8003aac:	2301      	movls	r3, #1
 8003aae:	2300      	movhi	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e006      	b.n	8003ac2 <HAL_I2C_Init+0x92>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4a7d      	ldr	r2, [pc, #500]	; (8003cac <HAL_I2C_Init+0x27c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	bf94      	ite	ls
 8003abc:	2301      	movls	r3, #1
 8003abe:	2300      	movhi	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e0e7      	b.n	8003c9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4a78      	ldr	r2, [pc, #480]	; (8003cb0 <HAL_I2C_Init+0x280>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	0c9b      	lsrs	r3, r3, #18
 8003ad4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4a6a      	ldr	r2, [pc, #424]	; (8003ca4 <HAL_I2C_Init+0x274>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d802      	bhi.n	8003b04 <HAL_I2C_Init+0xd4>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	3301      	adds	r3, #1
 8003b02:	e009      	b.n	8003b18 <HAL_I2C_Init+0xe8>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	4a69      	ldr	r2, [pc, #420]	; (8003cb4 <HAL_I2C_Init+0x284>)
 8003b10:	fba2 2303 	umull	r2, r3, r2, r3
 8003b14:	099b      	lsrs	r3, r3, #6
 8003b16:	3301      	adds	r3, #1
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	495c      	ldr	r1, [pc, #368]	; (8003ca4 <HAL_I2C_Init+0x274>)
 8003b34:	428b      	cmp	r3, r1
 8003b36:	d819      	bhi.n	8003b6c <HAL_I2C_Init+0x13c>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1e59      	subs	r1, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b46:	1c59      	adds	r1, r3, #1
 8003b48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b4c:	400b      	ands	r3, r1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_I2C_Init+0x138>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1e59      	subs	r1, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b60:	3301      	adds	r3, #1
 8003b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b66:	e051      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	e04f      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d111      	bne.n	8003b98 <HAL_I2C_Init+0x168>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1e58      	subs	r0, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	440b      	add	r3, r1
 8003b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b86:	3301      	adds	r3, #1
 8003b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	bf0c      	ite	eq
 8003b90:	2301      	moveq	r3, #1
 8003b92:	2300      	movne	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	e012      	b.n	8003bbe <HAL_I2C_Init+0x18e>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1e58      	subs	r0, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6859      	ldr	r1, [r3, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	0099      	lsls	r1, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf0c      	ite	eq
 8003bb8:	2301      	moveq	r3, #1
 8003bba:	2300      	movne	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Init+0x196>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e022      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10e      	bne.n	8003bec <HAL_I2C_Init+0x1bc>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1e58      	subs	r0, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6859      	ldr	r1, [r3, #4]
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	440b      	add	r3, r1
 8003bdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be0:	3301      	adds	r3, #1
 8003be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bea:	e00f      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1e58      	subs	r0, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	0099      	lsls	r1, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c02:	3301      	adds	r3, #1
 8003c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	6809      	ldr	r1, [r1, #0]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69da      	ldr	r2, [r3, #28]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6911      	ldr	r1, [r2, #16]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68d2      	ldr	r2, [r2, #12]
 8003c46:	4311      	orrs	r1, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695a      	ldr	r2, [r3, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	000186a0 	.word	0x000186a0
 8003ca8:	001e847f 	.word	0x001e847f
 8003cac:	003d08ff 	.word	0x003d08ff
 8003cb0:	431bde83 	.word	0x431bde83
 8003cb4:	10624dd3 	.word	0x10624dd3

08003cb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	607a      	str	r2, [r7, #4]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	817b      	strh	r3, [r7, #10]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ccc:	f7fe fc84 	bl	80025d8 <HAL_GetTick>
 8003cd0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	f040 80e0 	bne.w	8003ea0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	2319      	movs	r3, #25
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	4970      	ldr	r1, [pc, #448]	; (8003eac <HAL_I2C_Master_Transmit+0x1f4>)
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f964 	bl	8003fb8 <I2C_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e0d3      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_I2C_Master_Transmit+0x50>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e0cc      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x1ea>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d007      	beq.n	8003d2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 0201 	orr.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2221      	movs	r2, #33	; 0x21
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2210      	movs	r2, #16
 8003d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	893a      	ldrh	r2, [r7, #8]
 8003d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4a50      	ldr	r2, [pc, #320]	; (8003eb0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d70:	8979      	ldrh	r1, [r7, #10]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	6a3a      	ldr	r2, [r7, #32]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 f89c 	bl	8003eb4 <I2C_MasterRequestWrite>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e08d      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d86:	2300      	movs	r3, #0
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d9c:	e066      	b.n	8003e6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	6a39      	ldr	r1, [r7, #32]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f9de 	bl	8004164 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00d      	beq.n	8003dca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d107      	bne.n	8003dc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e06b      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	781a      	ldrb	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d11b      	bne.n	8003e40 <HAL_I2C_Master_Transmit+0x188>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d017      	beq.n	8003e40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	781a      	ldrb	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	6a39      	ldr	r1, [r7, #32]
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 f9ce 	bl	80041e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00d      	beq.n	8003e6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d107      	bne.n	8003e68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e01a      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d194      	bne.n	8003d9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e000      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ea0:	2302      	movs	r3, #2
  }
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	00100002 	.word	0x00100002
 8003eb0:	ffff0000 	.word	0xffff0000

08003eb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	607a      	str	r2, [r7, #4]
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d006      	beq.n	8003ede <I2C_MasterRequestWrite+0x2a>
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d003      	beq.n	8003ede <I2C_MasterRequestWrite+0x2a>
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003edc:	d108      	bne.n	8003ef0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	e00b      	b.n	8003f08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	2b12      	cmp	r3, #18
 8003ef6:	d107      	bne.n	8003f08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f84f 	bl	8003fb8 <I2C_WaitOnFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00d      	beq.n	8003f3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f2e:	d103      	bne.n	8003f38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e035      	b.n	8003fa8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f44:	d108      	bne.n	8003f58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f46:	897b      	ldrh	r3, [r7, #10]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f54:	611a      	str	r2, [r3, #16]
 8003f56:	e01b      	b.n	8003f90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f58:	897b      	ldrh	r3, [r7, #10]
 8003f5a:	11db      	asrs	r3, r3, #7
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	f003 0306 	and.w	r3, r3, #6
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f063 030f 	orn	r3, r3, #15
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	490e      	ldr	r1, [pc, #56]	; (8003fb0 <I2C_MasterRequestWrite+0xfc>)
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 f875 	bl	8004066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e010      	b.n	8003fa8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f86:	897b      	ldrh	r3, [r7, #10]
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	4907      	ldr	r1, [pc, #28]	; (8003fb4 <I2C_MasterRequestWrite+0x100>)
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 f865 	bl	8004066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	00010008 	.word	0x00010008
 8003fb4:	00010002 	.word	0x00010002

08003fb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fc8:	e025      	b.n	8004016 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fd0:	d021      	beq.n	8004016 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd2:	f7fe fb01 	bl	80025d8 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d302      	bcc.n	8003fe8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d116      	bne.n	8004016 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f043 0220 	orr.w	r2, r3, #32
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e023      	b.n	800405e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	0c1b      	lsrs	r3, r3, #16
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b01      	cmp	r3, #1
 800401e:	d10d      	bne.n	800403c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	43da      	mvns	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4013      	ands	r3, r2
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	bf0c      	ite	eq
 8004032:	2301      	moveq	r3, #1
 8004034:	2300      	movne	r3, #0
 8004036:	b2db      	uxtb	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	e00c      	b.n	8004056 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	43da      	mvns	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4013      	ands	r3, r2
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	bf0c      	ite	eq
 800404e:	2301      	moveq	r3, #1
 8004050:	2300      	movne	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	79fb      	ldrb	r3, [r7, #7]
 8004058:	429a      	cmp	r2, r3
 800405a:	d0b6      	beq.n	8003fca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004074:	e051      	b.n	800411a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004084:	d123      	bne.n	80040ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004094:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800409e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f043 0204 	orr.w	r2, r3, #4
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e046      	b.n	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040d4:	d021      	beq.n	800411a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d6:	f7fe fa7f 	bl	80025d8 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d302      	bcc.n	80040ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d116      	bne.n	800411a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f043 0220 	orr.w	r2, r3, #32
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e020      	b.n	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d10c      	bne.n	800413e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	43da      	mvns	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4013      	ands	r3, r2
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	bf14      	ite	ne
 8004136:	2301      	movne	r3, #1
 8004138:	2300      	moveq	r3, #0
 800413a:	b2db      	uxtb	r3, r3
 800413c:	e00b      	b.n	8004156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	43da      	mvns	r2, r3
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4013      	ands	r3, r2
 800414a:	b29b      	uxth	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	bf14      	ite	ne
 8004150:	2301      	movne	r3, #1
 8004152:	2300      	moveq	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d18d      	bne.n	8004076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004170:	e02d      	b.n	80041ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f878 	bl	8004268 <I2C_IsAcknowledgeFailed>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e02d      	b.n	80041de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004188:	d021      	beq.n	80041ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418a:	f7fe fa25 	bl	80025d8 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	429a      	cmp	r2, r3
 8004198:	d302      	bcc.n	80041a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d116      	bne.n	80041ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f043 0220 	orr.w	r2, r3, #32
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e007      	b.n	80041de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d8:	2b80      	cmp	r3, #128	; 0x80
 80041da:	d1ca      	bne.n	8004172 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041f2:	e02d      	b.n	8004250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f837 	bl	8004268 <I2C_IsAcknowledgeFailed>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e02d      	b.n	8004260 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800420a:	d021      	beq.n	8004250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420c:	f7fe f9e4 	bl	80025d8 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	429a      	cmp	r2, r3
 800421a:	d302      	bcc.n	8004222 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d116      	bne.n	8004250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	f043 0220 	orr.w	r2, r3, #32
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e007      	b.n	8004260 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b04      	cmp	r3, #4
 800425c:	d1ca      	bne.n	80041f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427e:	d11b      	bne.n	80042b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004288:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	f043 0204 	orr.w	r2, r3, #4
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b20      	cmp	r3, #32
 80042da:	d129      	bne.n	8004330 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2224      	movs	r2, #36	; 0x24
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0201 	bic.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0210 	bic.w	r2, r2, #16
 8004302:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	e000      	b.n	8004332 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004330:	2302      	movs	r3, #2
  }
}
 8004332:	4618      	mov	r0, r3
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800433e:	b480      	push	{r7}
 8004340:	b085      	sub	sp, #20
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b20      	cmp	r3, #32
 8004356:	d12a      	bne.n	80043ae <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2224      	movs	r2, #36	; 0x24
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0201 	bic.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004378:	89fb      	ldrh	r3, [r7, #14]
 800437a:	f023 030f 	bic.w	r3, r3, #15
 800437e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	b29a      	uxth	r2, r3
 8004384:	89fb      	ldrh	r3, [r7, #14]
 8004386:	4313      	orrs	r3, r2
 8004388:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	89fa      	ldrh	r2, [r7, #14]
 8004390:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0201 	orr.w	r2, r2, #1
 80043a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	e000      	b.n	80043b0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80043ae:	2302      	movs	r3, #2
  }
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043be:	b08f      	sub	sp, #60	; 0x3c
 80043c0:	af0a      	add	r7, sp, #40	; 0x28
 80043c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e10f      	b.n	80045ee <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d106      	bne.n	80043ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7fd f97f 	bl	80016ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2203      	movs	r2, #3
 80043f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d102      	bne.n	8004408 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f001 f9ae 	bl	800576e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	687e      	ldr	r6, [r7, #4]
 800441a:	466d      	mov	r5, sp
 800441c:	f106 0410 	add.w	r4, r6, #16
 8004420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004422:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004428:	e894 0003 	ldmia.w	r4, {r0, r1}
 800442c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004430:	1d33      	adds	r3, r6, #4
 8004432:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004434:	6838      	ldr	r0, [r7, #0]
 8004436:	f001 f939 	bl	80056ac <USB_CoreInit>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e0d0      	b.n	80045ee <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2100      	movs	r1, #0
 8004452:	4618      	mov	r0, r3
 8004454:	f001 f99c 	bl	8005790 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004458:	2300      	movs	r3, #0
 800445a:	73fb      	strb	r3, [r7, #15]
 800445c:	e04a      	b.n	80044f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800445e:	7bfa      	ldrb	r2, [r7, #15]
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	4613      	mov	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	333d      	adds	r3, #61	; 0x3d
 800446e:	2201      	movs	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004472:	7bfa      	ldrb	r2, [r7, #15]
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	4413      	add	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	333c      	adds	r3, #60	; 0x3c
 8004482:	7bfa      	ldrb	r2, [r7, #15]
 8004484:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004486:	7bfa      	ldrb	r2, [r7, #15]
 8004488:	7bfb      	ldrb	r3, [r7, #15]
 800448a:	b298      	uxth	r0, r3
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	4413      	add	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	3344      	adds	r3, #68	; 0x44
 800449a:	4602      	mov	r2, r0
 800449c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800449e:	7bfa      	ldrb	r2, [r7, #15]
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	3340      	adds	r3, #64	; 0x40
 80044ae:	2200      	movs	r2, #0
 80044b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044b2:	7bfa      	ldrb	r2, [r7, #15]
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	3348      	adds	r3, #72	; 0x48
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80044c6:	7bfa      	ldrb	r2, [r7, #15]
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	4413      	add	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	334c      	adds	r3, #76	; 0x4c
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80044da:	7bfa      	ldrb	r2, [r7, #15]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	3354      	adds	r3, #84	; 0x54
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	3301      	adds	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
 80044f4:	7bfa      	ldrb	r2, [r7, #15]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d3af      	bcc.n	800445e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044fe:	2300      	movs	r3, #0
 8004500:	73fb      	strb	r3, [r7, #15]
 8004502:	e044      	b.n	800458e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004504:	7bfa      	ldrb	r2, [r7, #15]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004516:	2200      	movs	r2, #0
 8004518:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800451a:	7bfa      	ldrb	r2, [r7, #15]
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800452c:	7bfa      	ldrb	r2, [r7, #15]
 800452e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004530:	7bfa      	ldrb	r2, [r7, #15]
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	4613      	mov	r3, r2
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	4413      	add	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004542:	2200      	movs	r2, #0
 8004544:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004546:	7bfa      	ldrb	r2, [r7, #15]
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	440b      	add	r3, r1
 8004554:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800455c:	7bfa      	ldrb	r2, [r7, #15]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	4413      	add	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004572:	7bfa      	ldrb	r2, [r7, #15]
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	3301      	adds	r3, #1
 800458c:	73fb      	strb	r3, [r7, #15]
 800458e:	7bfa      	ldrb	r2, [r7, #15]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	429a      	cmp	r2, r3
 8004596:	d3b5      	bcc.n	8004504 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	603b      	str	r3, [r7, #0]
 800459e:	687e      	ldr	r6, [r7, #4]
 80045a0:	466d      	mov	r5, sp
 80045a2:	f106 0410 	add.w	r4, r6, #16
 80045a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80045b6:	1d33      	adds	r3, r6, #4
 80045b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045ba:	6838      	ldr	r0, [r7, #0]
 80045bc:	f001 f934 	bl	8005828 <USB_DevInit>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2202      	movs	r2, #2
 80045ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e00d      	b.n	80045ee <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f001 faff 	bl	8005bea <USB_DevDisconnect>

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080045f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e267      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d075      	beq.n	8004702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004616:	4b88      	ldr	r3, [pc, #544]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	2b04      	cmp	r3, #4
 8004620:	d00c      	beq.n	800463c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004622:	4b85      	ldr	r3, [pc, #532]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800462a:	2b08      	cmp	r3, #8
 800462c:	d112      	bne.n	8004654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800462e:	4b82      	ldr	r3, [pc, #520]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800463a:	d10b      	bne.n	8004654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800463c:	4b7e      	ldr	r3, [pc, #504]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d05b      	beq.n	8004700 <HAL_RCC_OscConfig+0x108>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d157      	bne.n	8004700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e242      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465c:	d106      	bne.n	800466c <HAL_RCC_OscConfig+0x74>
 800465e:	4b76      	ldr	r3, [pc, #472]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a75      	ldr	r2, [pc, #468]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	e01d      	b.n	80046a8 <HAL_RCC_OscConfig+0xb0>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004674:	d10c      	bne.n	8004690 <HAL_RCC_OscConfig+0x98>
 8004676:	4b70      	ldr	r3, [pc, #448]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a6f      	ldr	r2, [pc, #444]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800467c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	4b6d      	ldr	r3, [pc, #436]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a6c      	ldr	r2, [pc, #432]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e00b      	b.n	80046a8 <HAL_RCC_OscConfig+0xb0>
 8004690:	4b69      	ldr	r3, [pc, #420]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a68      	ldr	r2, [pc, #416]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	4b66      	ldr	r3, [pc, #408]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a65      	ldr	r2, [pc, #404]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 80046a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d013      	beq.n	80046d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fd ff92 	bl	80025d8 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b8:	f7fd ff8e 	bl	80025d8 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	; 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e207      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ca:	4b5b      	ldr	r3, [pc, #364]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0xc0>
 80046d6:	e014      	b.n	8004702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d8:	f7fd ff7e 	bl	80025d8 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046e0:	f7fd ff7a 	bl	80025d8 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b64      	cmp	r3, #100	; 0x64
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e1f3      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f2:	4b51      	ldr	r3, [pc, #324]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0xe8>
 80046fe:	e000      	b.n	8004702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d063      	beq.n	80047d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800470e:	4b4a      	ldr	r3, [pc, #296]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 030c 	and.w	r3, r3, #12
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00b      	beq.n	8004732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800471a:	4b47      	ldr	r3, [pc, #284]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004722:	2b08      	cmp	r3, #8
 8004724:	d11c      	bne.n	8004760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004726:	4b44      	ldr	r3, [pc, #272]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d116      	bne.n	8004760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004732:	4b41      	ldr	r3, [pc, #260]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <HAL_RCC_OscConfig+0x152>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d001      	beq.n	800474a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e1c7      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474a:	4b3b      	ldr	r3, [pc, #236]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	4937      	ldr	r1, [pc, #220]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800475e:	e03a      	b.n	80047d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d020      	beq.n	80047aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004768:	4b34      	ldr	r3, [pc, #208]	; (800483c <HAL_RCC_OscConfig+0x244>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476e:	f7fd ff33 	bl	80025d8 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004776:	f7fd ff2f 	bl	80025d8 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e1a8      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004788:	4b2b      	ldr	r3, [pc, #172]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004794:	4b28      	ldr	r3, [pc, #160]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	4925      	ldr	r1, [pc, #148]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	600b      	str	r3, [r1, #0]
 80047a8:	e015      	b.n	80047d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047aa:	4b24      	ldr	r3, [pc, #144]	; (800483c <HAL_RCC_OscConfig+0x244>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fd ff12 	bl	80025d8 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b8:	f7fd ff0e 	bl	80025d8 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e187      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ca:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d036      	beq.n	8004850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d016      	beq.n	8004818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ea:	4b15      	ldr	r3, [pc, #84]	; (8004840 <HAL_RCC_OscConfig+0x248>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f0:	f7fd fef2 	bl	80025d8 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f8:	f7fd feee 	bl	80025d8 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e167      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800480c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0x200>
 8004816:	e01b      	b.n	8004850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004818:	4b09      	ldr	r3, [pc, #36]	; (8004840 <HAL_RCC_OscConfig+0x248>)
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481e:	f7fd fedb 	bl	80025d8 <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004824:	e00e      	b.n	8004844 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004826:	f7fd fed7 	bl	80025d8 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d907      	bls.n	8004844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e150      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
 8004838:	40023800 	.word	0x40023800
 800483c:	42470000 	.word	0x42470000
 8004840:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004844:	4b88      	ldr	r3, [pc, #544]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1ea      	bne.n	8004826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8097 	beq.w	800498c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800485e:	2300      	movs	r3, #0
 8004860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004862:	4b81      	ldr	r3, [pc, #516]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10f      	bne.n	800488e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	4b7d      	ldr	r3, [pc, #500]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	4a7c      	ldr	r2, [pc, #496]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800487c:	6413      	str	r3, [r2, #64]	; 0x40
 800487e:	4b7a      	ldr	r3, [pc, #488]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004886:	60bb      	str	r3, [r7, #8]
 8004888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800488a:	2301      	movs	r3, #1
 800488c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488e:	4b77      	ldr	r3, [pc, #476]	; (8004a6c <HAL_RCC_OscConfig+0x474>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d118      	bne.n	80048cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800489a:	4b74      	ldr	r3, [pc, #464]	; (8004a6c <HAL_RCC_OscConfig+0x474>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a73      	ldr	r2, [pc, #460]	; (8004a6c <HAL_RCC_OscConfig+0x474>)
 80048a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048a6:	f7fd fe97 	bl	80025d8 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ae:	f7fd fe93 	bl	80025d8 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e10c      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c0:	4b6a      	ldr	r3, [pc, #424]	; (8004a6c <HAL_RCC_OscConfig+0x474>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0f0      	beq.n	80048ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d106      	bne.n	80048e2 <HAL_RCC_OscConfig+0x2ea>
 80048d4:	4b64      	ldr	r3, [pc, #400]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d8:	4a63      	ldr	r2, [pc, #396]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	6713      	str	r3, [r2, #112]	; 0x70
 80048e0:	e01c      	b.n	800491c <HAL_RCC_OscConfig+0x324>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2b05      	cmp	r3, #5
 80048e8:	d10c      	bne.n	8004904 <HAL_RCC_OscConfig+0x30c>
 80048ea:	4b5f      	ldr	r3, [pc, #380]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ee:	4a5e      	ldr	r2, [pc, #376]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048f0:	f043 0304 	orr.w	r3, r3, #4
 80048f4:	6713      	str	r3, [r2, #112]	; 0x70
 80048f6:	4b5c      	ldr	r3, [pc, #368]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fa:	4a5b      	ldr	r2, [pc, #364]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	6713      	str	r3, [r2, #112]	; 0x70
 8004902:	e00b      	b.n	800491c <HAL_RCC_OscConfig+0x324>
 8004904:	4b58      	ldr	r3, [pc, #352]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004908:	4a57      	ldr	r2, [pc, #348]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 800490a:	f023 0301 	bic.w	r3, r3, #1
 800490e:	6713      	str	r3, [r2, #112]	; 0x70
 8004910:	4b55      	ldr	r3, [pc, #340]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004914:	4a54      	ldr	r2, [pc, #336]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004916:	f023 0304 	bic.w	r3, r3, #4
 800491a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d015      	beq.n	8004950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004924:	f7fd fe58 	bl	80025d8 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492a:	e00a      	b.n	8004942 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800492c:	f7fd fe54 	bl	80025d8 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f241 3288 	movw	r2, #5000	; 0x1388
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e0cb      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004942:	4b49      	ldr	r3, [pc, #292]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0ee      	beq.n	800492c <HAL_RCC_OscConfig+0x334>
 800494e:	e014      	b.n	800497a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004950:	f7fd fe42 	bl	80025d8 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004956:	e00a      	b.n	800496e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004958:	f7fd fe3e 	bl	80025d8 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f241 3288 	movw	r2, #5000	; 0x1388
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e0b5      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800496e:	4b3e      	ldr	r3, [pc, #248]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1ee      	bne.n	8004958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800497a:	7dfb      	ldrb	r3, [r7, #23]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d105      	bne.n	800498c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004980:	4b39      	ldr	r3, [pc, #228]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	4a38      	ldr	r2, [pc, #224]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800498a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80a1 	beq.w	8004ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004996:	4b34      	ldr	r3, [pc, #208]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 030c 	and.w	r3, r3, #12
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d05c      	beq.n	8004a5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d141      	bne.n	8004a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049aa:	4b31      	ldr	r3, [pc, #196]	; (8004a70 <HAL_RCC_OscConfig+0x478>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b0:	f7fd fe12 	bl	80025d8 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b8:	f7fd fe0e 	bl	80025d8 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e087      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ca:	4b27      	ldr	r3, [pc, #156]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f0      	bne.n	80049b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69da      	ldr	r2, [r3, #28]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	019b      	lsls	r3, r3, #6
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	085b      	lsrs	r3, r3, #1
 80049ee:	3b01      	subs	r3, #1
 80049f0:	041b      	lsls	r3, r3, #16
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	061b      	lsls	r3, r3, #24
 80049fa:	491b      	ldr	r1, [pc, #108]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a00:	4b1b      	ldr	r3, [pc, #108]	; (8004a70 <HAL_RCC_OscConfig+0x478>)
 8004a02:	2201      	movs	r2, #1
 8004a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a06:	f7fd fde7 	bl	80025d8 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0e:	f7fd fde3 	bl	80025d8 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e05c      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a20:	4b11      	ldr	r3, [pc, #68]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f0      	beq.n	8004a0e <HAL_RCC_OscConfig+0x416>
 8004a2c:	e054      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2e:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <HAL_RCC_OscConfig+0x478>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a34:	f7fd fdd0 	bl	80025d8 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a3c:	f7fd fdcc 	bl	80025d8 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e045      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4e:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f0      	bne.n	8004a3c <HAL_RCC_OscConfig+0x444>
 8004a5a:	e03d      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d107      	bne.n	8004a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e038      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	40007000 	.word	0x40007000
 8004a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <HAL_RCC_OscConfig+0x4ec>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d028      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d121      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d11a      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d111      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	085b      	lsrs	r3, r3, #1
 8004abc:	3b01      	subs	r3, #1
 8004abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d107      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d001      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e000      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40023800 	.word	0x40023800

08004ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0cc      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004afc:	4b68      	ldr	r3, [pc, #416]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 030f 	and.w	r3, r3, #15
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d90c      	bls.n	8004b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0a:	4b65      	ldr	r3, [pc, #404]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b12:	4b63      	ldr	r3, [pc, #396]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0b8      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d020      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b3c:	4b59      	ldr	r3, [pc, #356]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	4a58      	ldr	r2, [pc, #352]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b54:	4b53      	ldr	r3, [pc, #332]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	4a52      	ldr	r2, [pc, #328]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b60:	4b50      	ldr	r3, [pc, #320]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	494d      	ldr	r1, [pc, #308]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d044      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d107      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b86:	4b47      	ldr	r3, [pc, #284]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d119      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e07f      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d003      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d107      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba6:	4b3f      	ldr	r3, [pc, #252]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d109      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e06f      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb6:	4b3b      	ldr	r3, [pc, #236]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e067      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bc6:	4b37      	ldr	r3, [pc, #220]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f023 0203 	bic.w	r2, r3, #3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4934      	ldr	r1, [pc, #208]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bd8:	f7fd fcfe 	bl	80025d8 <HAL_GetTick>
 8004bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bde:	e00a      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be0:	f7fd fcfa 	bl	80025d8 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e04f      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf6:	4b2b      	ldr	r3, [pc, #172]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 020c 	and.w	r2, r3, #12
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d1eb      	bne.n	8004be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c08:	4b25      	ldr	r3, [pc, #148]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 030f 	and.w	r3, r3, #15
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d20c      	bcs.n	8004c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c16:	4b22      	ldr	r3, [pc, #136]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1e:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d001      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e032      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c3c:	4b19      	ldr	r3, [pc, #100]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4916      	ldr	r1, [pc, #88]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d009      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c5a:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	490e      	ldr	r1, [pc, #56]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c6e:	f000 f821 	bl	8004cb4 <HAL_RCC_GetSysClockFreq>
 8004c72:	4602      	mov	r2, r0
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	091b      	lsrs	r3, r3, #4
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	490a      	ldr	r1, [pc, #40]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c80:	5ccb      	ldrb	r3, [r1, r3]
 8004c82:	fa22 f303 	lsr.w	r3, r2, r3
 8004c86:	4a09      	ldr	r2, [pc, #36]	; (8004cac <HAL_RCC_ClockConfig+0x1c4>)
 8004c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c8a:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fd fc5e 	bl	8002550 <HAL_InitTick>

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40023c00 	.word	0x40023c00
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	0800a640 	.word	0x0800a640
 8004cac:	20000000 	.word	0x20000000
 8004cb0:	20000004 	.word	0x20000004

08004cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb8:	b094      	sub	sp, #80	; 0x50
 8004cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ccc:	4b79      	ldr	r3, [pc, #484]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 030c 	and.w	r3, r3, #12
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d00d      	beq.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	f200 80e1 	bhi.w	8004ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d003      	beq.n	8004cee <HAL_RCC_GetSysClockFreq+0x3a>
 8004ce6:	e0db      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ce8:	4b73      	ldr	r3, [pc, #460]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004cec:	e0db      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cee:	4b73      	ldr	r3, [pc, #460]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x208>)
 8004cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cf2:	e0d8      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cf4:	4b6f      	ldr	r3, [pc, #444]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cfc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cfe:	4b6d      	ldr	r3, [pc, #436]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d063      	beq.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d0a:	4b6a      	ldr	r3, [pc, #424]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	099b      	lsrs	r3, r3, #6
 8004d10:	2200      	movs	r2, #0
 8004d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d1e:	2300      	movs	r3, #0
 8004d20:	637b      	str	r3, [r7, #52]	; 0x34
 8004d22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d26:	4622      	mov	r2, r4
 8004d28:	462b      	mov	r3, r5
 8004d2a:	f04f 0000 	mov.w	r0, #0
 8004d2e:	f04f 0100 	mov.w	r1, #0
 8004d32:	0159      	lsls	r1, r3, #5
 8004d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d38:	0150      	lsls	r0, r2, #5
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4621      	mov	r1, r4
 8004d40:	1a51      	subs	r1, r2, r1
 8004d42:	6139      	str	r1, [r7, #16]
 8004d44:	4629      	mov	r1, r5
 8004d46:	eb63 0301 	sbc.w	r3, r3, r1
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d58:	4659      	mov	r1, fp
 8004d5a:	018b      	lsls	r3, r1, #6
 8004d5c:	4651      	mov	r1, sl
 8004d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d62:	4651      	mov	r1, sl
 8004d64:	018a      	lsls	r2, r1, #6
 8004d66:	4651      	mov	r1, sl
 8004d68:	ebb2 0801 	subs.w	r8, r2, r1
 8004d6c:	4659      	mov	r1, fp
 8004d6e:	eb63 0901 	sbc.w	r9, r3, r1
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d86:	4690      	mov	r8, r2
 8004d88:	4699      	mov	r9, r3
 8004d8a:	4623      	mov	r3, r4
 8004d8c:	eb18 0303 	adds.w	r3, r8, r3
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	462b      	mov	r3, r5
 8004d94:	eb49 0303 	adc.w	r3, r9, r3
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004da6:	4629      	mov	r1, r5
 8004da8:	024b      	lsls	r3, r1, #9
 8004daa:	4621      	mov	r1, r4
 8004dac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004db0:	4621      	mov	r1, r4
 8004db2:	024a      	lsls	r2, r1, #9
 8004db4:	4610      	mov	r0, r2
 8004db6:	4619      	mov	r1, r3
 8004db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dba:	2200      	movs	r2, #0
 8004dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dc4:	f7fb ff70 	bl	8000ca8 <__aeabi_uldivmod>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4613      	mov	r3, r2
 8004dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dd0:	e058      	b.n	8004e84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd2:	4b38      	ldr	r3, [pc, #224]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	099b      	lsrs	r3, r3, #6
 8004dd8:	2200      	movs	r2, #0
 8004dda:	4618      	mov	r0, r3
 8004ddc:	4611      	mov	r1, r2
 8004dde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004de2:	623b      	str	r3, [r7, #32]
 8004de4:	2300      	movs	r3, #0
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
 8004de8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004dec:	4642      	mov	r2, r8
 8004dee:	464b      	mov	r3, r9
 8004df0:	f04f 0000 	mov.w	r0, #0
 8004df4:	f04f 0100 	mov.w	r1, #0
 8004df8:	0159      	lsls	r1, r3, #5
 8004dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dfe:	0150      	lsls	r0, r2, #5
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4641      	mov	r1, r8
 8004e06:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e24:	ebb2 040a 	subs.w	r4, r2, sl
 8004e28:	eb63 050b 	sbc.w	r5, r3, fp
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	00eb      	lsls	r3, r5, #3
 8004e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e3a:	00e2      	lsls	r2, r4, #3
 8004e3c:	4614      	mov	r4, r2
 8004e3e:	461d      	mov	r5, r3
 8004e40:	4643      	mov	r3, r8
 8004e42:	18e3      	adds	r3, r4, r3
 8004e44:	603b      	str	r3, [r7, #0]
 8004e46:	464b      	mov	r3, r9
 8004e48:	eb45 0303 	adc.w	r3, r5, r3
 8004e4c:	607b      	str	r3, [r7, #4]
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	028b      	lsls	r3, r1, #10
 8004e5e:	4621      	mov	r1, r4
 8004e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e64:	4621      	mov	r1, r4
 8004e66:	028a      	lsls	r2, r1, #10
 8004e68:	4610      	mov	r0, r2
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e6e:	2200      	movs	r2, #0
 8004e70:	61bb      	str	r3, [r7, #24]
 8004e72:	61fa      	str	r2, [r7, #28]
 8004e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e78:	f7fb ff16 	bl	8000ca8 <__aeabi_uldivmod>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4613      	mov	r3, r2
 8004e82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	0c1b      	lsrs	r3, r3, #16
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	3301      	adds	r3, #1
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e9e:	e002      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ea0:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ea2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3750      	adds	r7, #80	; 0x50
 8004eac:	46bd      	mov	sp, r7
 8004eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	00f42400 	.word	0x00f42400
 8004ebc:	007a1200 	.word	0x007a1200

08004ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec4:	4b03      	ldr	r3, [pc, #12]	; (8004ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	20000000 	.word	0x20000000

08004ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004edc:	f7ff fff0 	bl	8004ec0 <HAL_RCC_GetHCLKFreq>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	0a9b      	lsrs	r3, r3, #10
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	4903      	ldr	r1, [pc, #12]	; (8004efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eee:	5ccb      	ldrb	r3, [r1, r3]
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	0800a650 	.word	0x0800a650

08004f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f04:	f7ff ffdc 	bl	8004ec0 <HAL_RCC_GetHCLKFreq>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	0b5b      	lsrs	r3, r3, #13
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	4903      	ldr	r1, [pc, #12]	; (8004f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f16:	5ccb      	ldrb	r3, [r1, r3]
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40023800 	.word	0x40023800
 8004f24:	0800a650 	.word	0x0800a650

08004f28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e03f      	b.n	8004fba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fc fb84 	bl	800165c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2224      	movs	r2, #36	; 0x24
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f929 	bl	80051c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	691a      	ldr	r2, [r3, #16]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	695a      	ldr	r2, [r3, #20]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b08a      	sub	sp, #40	; 0x28
 8004fc6:	af02      	add	r7, sp, #8
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	603b      	str	r3, [r7, #0]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b20      	cmp	r3, #32
 8004fe0:	d17c      	bne.n	80050dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <HAL_UART_Transmit+0x2c>
 8004fe8:	88fb      	ldrh	r3, [r7, #6]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e075      	b.n	80050de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_UART_Transmit+0x3e>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e06e      	b.n	80050de <HAL_UART_Transmit+0x11c>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2221      	movs	r2, #33	; 0x21
 8005012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005016:	f7fd fadf 	bl	80025d8 <HAL_GetTick>
 800501a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	88fa      	ldrh	r2, [r7, #6]
 8005020:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	88fa      	ldrh	r2, [r7, #6]
 8005026:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005030:	d108      	bne.n	8005044 <HAL_UART_Transmit+0x82>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d104      	bne.n	8005044 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800503a:	2300      	movs	r3, #0
 800503c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	61bb      	str	r3, [r7, #24]
 8005042:	e003      	b.n	800504c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005048:	2300      	movs	r3, #0
 800504a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005054:	e02a      	b.n	80050ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2200      	movs	r2, #0
 800505e:	2180      	movs	r1, #128	; 0x80
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f840 	bl	80050e6 <UART_WaitOnFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e036      	b.n	80050de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10b      	bne.n	800508e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005084:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	3302      	adds	r3, #2
 800508a:	61bb      	str	r3, [r7, #24]
 800508c:	e007      	b.n	800509e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	781a      	ldrb	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	3301      	adds	r3, #1
 800509c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1cf      	bne.n	8005056 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2200      	movs	r2, #0
 80050be:	2140      	movs	r1, #64	; 0x40
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 f810 	bl	80050e6 <UART_WaitOnFlagUntilTimeout>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e006      	b.n	80050de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	e000      	b.n	80050de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050dc:	2302      	movs	r3, #2
  }
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3720      	adds	r7, #32
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b090      	sub	sp, #64	; 0x40
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	603b      	str	r3, [r7, #0]
 80050f2:	4613      	mov	r3, r2
 80050f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f6:	e050      	b.n	800519a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050fe:	d04c      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005102:	2b00      	cmp	r3, #0
 8005104:	d007      	beq.n	8005116 <UART_WaitOnFlagUntilTimeout+0x30>
 8005106:	f7fd fa67 	bl	80025d8 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005112:	429a      	cmp	r2, r3
 8005114:	d241      	bcs.n	800519a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	330c      	adds	r3, #12
 800511c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005120:	e853 3f00 	ldrex	r3, [r3]
 8005124:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800512c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	330c      	adds	r3, #12
 8005134:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005136:	637a      	str	r2, [r7, #52]	; 0x34
 8005138:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800513c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1e5      	bne.n	8005116 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3314      	adds	r3, #20
 8005150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	e853 3f00 	ldrex	r3, [r3]
 8005158:	613b      	str	r3, [r7, #16]
   return(result);
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f023 0301 	bic.w	r3, r3, #1
 8005160:	63bb      	str	r3, [r7, #56]	; 0x38
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3314      	adds	r3, #20
 8005168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800516a:	623a      	str	r2, [r7, #32]
 800516c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	69f9      	ldr	r1, [r7, #28]
 8005170:	6a3a      	ldr	r2, [r7, #32]
 8005172:	e841 2300 	strex	r3, r2, [r1]
 8005176:	61bb      	str	r3, [r7, #24]
   return(result);
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1e5      	bne.n	800514a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e00f      	b.n	80051ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4013      	ands	r3, r2
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	bf0c      	ite	eq
 80051aa:	2301      	moveq	r3, #1
 80051ac:	2300      	movne	r3, #0
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d09f      	beq.n	80050f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3740      	adds	r7, #64	; 0x40
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c8:	b0c0      	sub	sp, #256	; 0x100
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e0:	68d9      	ldr	r1, [r3, #12]
 80051e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	ea40 0301 	orr.w	r3, r0, r1
 80051ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	431a      	orrs	r2, r3
 8005204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800521c:	f021 010c 	bic.w	r1, r1, #12
 8005220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800522a:	430b      	orrs	r3, r1
 800522c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800522e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800523a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523e:	6999      	ldr	r1, [r3, #24]
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	ea40 0301 	orr.w	r3, r0, r1
 800524a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	4b8f      	ldr	r3, [pc, #572]	; (8005490 <UART_SetConfig+0x2cc>)
 8005254:	429a      	cmp	r2, r3
 8005256:	d005      	beq.n	8005264 <UART_SetConfig+0xa0>
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	4b8d      	ldr	r3, [pc, #564]	; (8005494 <UART_SetConfig+0x2d0>)
 8005260:	429a      	cmp	r2, r3
 8005262:	d104      	bne.n	800526e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005264:	f7ff fe4c 	bl	8004f00 <HAL_RCC_GetPCLK2Freq>
 8005268:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800526c:	e003      	b.n	8005276 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800526e:	f7ff fe33 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 8005272:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005280:	f040 810c 	bne.w	800549c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005288:	2200      	movs	r2, #0
 800528a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800528e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005292:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005296:	4622      	mov	r2, r4
 8005298:	462b      	mov	r3, r5
 800529a:	1891      	adds	r1, r2, r2
 800529c:	65b9      	str	r1, [r7, #88]	; 0x58
 800529e:	415b      	adcs	r3, r3
 80052a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052a6:	4621      	mov	r1, r4
 80052a8:	eb12 0801 	adds.w	r8, r2, r1
 80052ac:	4629      	mov	r1, r5
 80052ae:	eb43 0901 	adc.w	r9, r3, r1
 80052b2:	f04f 0200 	mov.w	r2, #0
 80052b6:	f04f 0300 	mov.w	r3, #0
 80052ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052c6:	4690      	mov	r8, r2
 80052c8:	4699      	mov	r9, r3
 80052ca:	4623      	mov	r3, r4
 80052cc:	eb18 0303 	adds.w	r3, r8, r3
 80052d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052d4:	462b      	mov	r3, r5
 80052d6:	eb49 0303 	adc.w	r3, r9, r3
 80052da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80052f2:	460b      	mov	r3, r1
 80052f4:	18db      	adds	r3, r3, r3
 80052f6:	653b      	str	r3, [r7, #80]	; 0x50
 80052f8:	4613      	mov	r3, r2
 80052fa:	eb42 0303 	adc.w	r3, r2, r3
 80052fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005300:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005304:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005308:	f7fb fcce 	bl	8000ca8 <__aeabi_uldivmod>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4b61      	ldr	r3, [pc, #388]	; (8005498 <UART_SetConfig+0x2d4>)
 8005312:	fba3 2302 	umull	r2, r3, r3, r2
 8005316:	095b      	lsrs	r3, r3, #5
 8005318:	011c      	lsls	r4, r3, #4
 800531a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800531e:	2200      	movs	r2, #0
 8005320:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005324:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005328:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800532c:	4642      	mov	r2, r8
 800532e:	464b      	mov	r3, r9
 8005330:	1891      	adds	r1, r2, r2
 8005332:	64b9      	str	r1, [r7, #72]	; 0x48
 8005334:	415b      	adcs	r3, r3
 8005336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005338:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800533c:	4641      	mov	r1, r8
 800533e:	eb12 0a01 	adds.w	sl, r2, r1
 8005342:	4649      	mov	r1, r9
 8005344:	eb43 0b01 	adc.w	fp, r3, r1
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005354:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005358:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800535c:	4692      	mov	sl, r2
 800535e:	469b      	mov	fp, r3
 8005360:	4643      	mov	r3, r8
 8005362:	eb1a 0303 	adds.w	r3, sl, r3
 8005366:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800536a:	464b      	mov	r3, r9
 800536c:	eb4b 0303 	adc.w	r3, fp, r3
 8005370:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005380:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005384:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005388:	460b      	mov	r3, r1
 800538a:	18db      	adds	r3, r3, r3
 800538c:	643b      	str	r3, [r7, #64]	; 0x40
 800538e:	4613      	mov	r3, r2
 8005390:	eb42 0303 	adc.w	r3, r2, r3
 8005394:	647b      	str	r3, [r7, #68]	; 0x44
 8005396:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800539a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800539e:	f7fb fc83 	bl	8000ca8 <__aeabi_uldivmod>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4611      	mov	r1, r2
 80053a8:	4b3b      	ldr	r3, [pc, #236]	; (8005498 <UART_SetConfig+0x2d4>)
 80053aa:	fba3 2301 	umull	r2, r3, r3, r1
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	2264      	movs	r2, #100	; 0x64
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	1acb      	subs	r3, r1, r3
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053be:	4b36      	ldr	r3, [pc, #216]	; (8005498 <UART_SetConfig+0x2d4>)
 80053c0:	fba3 2302 	umull	r2, r3, r3, r2
 80053c4:	095b      	lsrs	r3, r3, #5
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053cc:	441c      	add	r4, r3
 80053ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80053dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80053e0:	4642      	mov	r2, r8
 80053e2:	464b      	mov	r3, r9
 80053e4:	1891      	adds	r1, r2, r2
 80053e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80053e8:	415b      	adcs	r3, r3
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053f0:	4641      	mov	r1, r8
 80053f2:	1851      	adds	r1, r2, r1
 80053f4:	6339      	str	r1, [r7, #48]	; 0x30
 80053f6:	4649      	mov	r1, r9
 80053f8:	414b      	adcs	r3, r1
 80053fa:	637b      	str	r3, [r7, #52]	; 0x34
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005408:	4659      	mov	r1, fp
 800540a:	00cb      	lsls	r3, r1, #3
 800540c:	4651      	mov	r1, sl
 800540e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005412:	4651      	mov	r1, sl
 8005414:	00ca      	lsls	r2, r1, #3
 8005416:	4610      	mov	r0, r2
 8005418:	4619      	mov	r1, r3
 800541a:	4603      	mov	r3, r0
 800541c:	4642      	mov	r2, r8
 800541e:	189b      	adds	r3, r3, r2
 8005420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005424:	464b      	mov	r3, r9
 8005426:	460a      	mov	r2, r1
 8005428:	eb42 0303 	adc.w	r3, r2, r3
 800542c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800543c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005440:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005444:	460b      	mov	r3, r1
 8005446:	18db      	adds	r3, r3, r3
 8005448:	62bb      	str	r3, [r7, #40]	; 0x28
 800544a:	4613      	mov	r3, r2
 800544c:	eb42 0303 	adc.w	r3, r2, r3
 8005450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005456:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800545a:	f7fb fc25 	bl	8000ca8 <__aeabi_uldivmod>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <UART_SetConfig+0x2d4>)
 8005464:	fba3 1302 	umull	r1, r3, r3, r2
 8005468:	095b      	lsrs	r3, r3, #5
 800546a:	2164      	movs	r1, #100	; 0x64
 800546c:	fb01 f303 	mul.w	r3, r1, r3
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	3332      	adds	r3, #50	; 0x32
 8005476:	4a08      	ldr	r2, [pc, #32]	; (8005498 <UART_SetConfig+0x2d4>)
 8005478:	fba2 2303 	umull	r2, r3, r2, r3
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	f003 0207 	and.w	r2, r3, #7
 8005482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4422      	add	r2, r4
 800548a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800548c:	e106      	b.n	800569c <UART_SetConfig+0x4d8>
 800548e:	bf00      	nop
 8005490:	40011000 	.word	0x40011000
 8005494:	40011400 	.word	0x40011400
 8005498:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800549c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054a0:	2200      	movs	r2, #0
 80054a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054ae:	4642      	mov	r2, r8
 80054b0:	464b      	mov	r3, r9
 80054b2:	1891      	adds	r1, r2, r2
 80054b4:	6239      	str	r1, [r7, #32]
 80054b6:	415b      	adcs	r3, r3
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054be:	4641      	mov	r1, r8
 80054c0:	1854      	adds	r4, r2, r1
 80054c2:	4649      	mov	r1, r9
 80054c4:	eb43 0501 	adc.w	r5, r3, r1
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	00eb      	lsls	r3, r5, #3
 80054d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054d6:	00e2      	lsls	r2, r4, #3
 80054d8:	4614      	mov	r4, r2
 80054da:	461d      	mov	r5, r3
 80054dc:	4643      	mov	r3, r8
 80054de:	18e3      	adds	r3, r4, r3
 80054e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054e4:	464b      	mov	r3, r9
 80054e6:	eb45 0303 	adc.w	r3, r5, r3
 80054ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80054ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	f04f 0300 	mov.w	r3, #0
 8005506:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800550a:	4629      	mov	r1, r5
 800550c:	008b      	lsls	r3, r1, #2
 800550e:	4621      	mov	r1, r4
 8005510:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005514:	4621      	mov	r1, r4
 8005516:	008a      	lsls	r2, r1, #2
 8005518:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800551c:	f7fb fbc4 	bl	8000ca8 <__aeabi_uldivmod>
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	4b60      	ldr	r3, [pc, #384]	; (80056a8 <UART_SetConfig+0x4e4>)
 8005526:	fba3 2302 	umull	r2, r3, r3, r2
 800552a:	095b      	lsrs	r3, r3, #5
 800552c:	011c      	lsls	r4, r3, #4
 800552e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005532:	2200      	movs	r2, #0
 8005534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005538:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800553c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005540:	4642      	mov	r2, r8
 8005542:	464b      	mov	r3, r9
 8005544:	1891      	adds	r1, r2, r2
 8005546:	61b9      	str	r1, [r7, #24]
 8005548:	415b      	adcs	r3, r3
 800554a:	61fb      	str	r3, [r7, #28]
 800554c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005550:	4641      	mov	r1, r8
 8005552:	1851      	adds	r1, r2, r1
 8005554:	6139      	str	r1, [r7, #16]
 8005556:	4649      	mov	r1, r9
 8005558:	414b      	adcs	r3, r1
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005568:	4659      	mov	r1, fp
 800556a:	00cb      	lsls	r3, r1, #3
 800556c:	4651      	mov	r1, sl
 800556e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005572:	4651      	mov	r1, sl
 8005574:	00ca      	lsls	r2, r1, #3
 8005576:	4610      	mov	r0, r2
 8005578:	4619      	mov	r1, r3
 800557a:	4603      	mov	r3, r0
 800557c:	4642      	mov	r2, r8
 800557e:	189b      	adds	r3, r3, r2
 8005580:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005584:	464b      	mov	r3, r9
 8005586:	460a      	mov	r2, r1
 8005588:	eb42 0303 	adc.w	r3, r2, r3
 800558c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	67bb      	str	r3, [r7, #120]	; 0x78
 800559a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055a8:	4649      	mov	r1, r9
 80055aa:	008b      	lsls	r3, r1, #2
 80055ac:	4641      	mov	r1, r8
 80055ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055b2:	4641      	mov	r1, r8
 80055b4:	008a      	lsls	r2, r1, #2
 80055b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055ba:	f7fb fb75 	bl	8000ca8 <__aeabi_uldivmod>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	4611      	mov	r1, r2
 80055c4:	4b38      	ldr	r3, [pc, #224]	; (80056a8 <UART_SetConfig+0x4e4>)
 80055c6:	fba3 2301 	umull	r2, r3, r3, r1
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	2264      	movs	r2, #100	; 0x64
 80055ce:	fb02 f303 	mul.w	r3, r2, r3
 80055d2:	1acb      	subs	r3, r1, r3
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	3332      	adds	r3, #50	; 0x32
 80055d8:	4a33      	ldr	r2, [pc, #204]	; (80056a8 <UART_SetConfig+0x4e4>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055e4:	441c      	add	r4, r3
 80055e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055ea:	2200      	movs	r2, #0
 80055ec:	673b      	str	r3, [r7, #112]	; 0x70
 80055ee:	677a      	str	r2, [r7, #116]	; 0x74
 80055f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80055f4:	4642      	mov	r2, r8
 80055f6:	464b      	mov	r3, r9
 80055f8:	1891      	adds	r1, r2, r2
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	415b      	adcs	r3, r3
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005604:	4641      	mov	r1, r8
 8005606:	1851      	adds	r1, r2, r1
 8005608:	6039      	str	r1, [r7, #0]
 800560a:	4649      	mov	r1, r9
 800560c:	414b      	adcs	r3, r1
 800560e:	607b      	str	r3, [r7, #4]
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800561c:	4659      	mov	r1, fp
 800561e:	00cb      	lsls	r3, r1, #3
 8005620:	4651      	mov	r1, sl
 8005622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005626:	4651      	mov	r1, sl
 8005628:	00ca      	lsls	r2, r1, #3
 800562a:	4610      	mov	r0, r2
 800562c:	4619      	mov	r1, r3
 800562e:	4603      	mov	r3, r0
 8005630:	4642      	mov	r2, r8
 8005632:	189b      	adds	r3, r3, r2
 8005634:	66bb      	str	r3, [r7, #104]	; 0x68
 8005636:	464b      	mov	r3, r9
 8005638:	460a      	mov	r2, r1
 800563a:	eb42 0303 	adc.w	r3, r2, r3
 800563e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	663b      	str	r3, [r7, #96]	; 0x60
 800564a:	667a      	str	r2, [r7, #100]	; 0x64
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	f04f 0300 	mov.w	r3, #0
 8005654:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005658:	4649      	mov	r1, r9
 800565a:	008b      	lsls	r3, r1, #2
 800565c:	4641      	mov	r1, r8
 800565e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005662:	4641      	mov	r1, r8
 8005664:	008a      	lsls	r2, r1, #2
 8005666:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800566a:	f7fb fb1d 	bl	8000ca8 <__aeabi_uldivmod>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <UART_SetConfig+0x4e4>)
 8005674:	fba3 1302 	umull	r1, r3, r3, r2
 8005678:	095b      	lsrs	r3, r3, #5
 800567a:	2164      	movs	r1, #100	; 0x64
 800567c:	fb01 f303 	mul.w	r3, r1, r3
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	3332      	adds	r3, #50	; 0x32
 8005686:	4a08      	ldr	r2, [pc, #32]	; (80056a8 <UART_SetConfig+0x4e4>)
 8005688:	fba2 2303 	umull	r2, r3, r2, r3
 800568c:	095b      	lsrs	r3, r3, #5
 800568e:	f003 020f 	and.w	r2, r3, #15
 8005692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4422      	add	r2, r4
 800569a:	609a      	str	r2, [r3, #8]
}
 800569c:	bf00      	nop
 800569e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056a2:	46bd      	mov	sp, r7
 80056a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056a8:	51eb851f 	.word	0x51eb851f

080056ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056ac:	b084      	sub	sp, #16
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b084      	sub	sp, #16
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	f107 001c 	add.w	r0, r7, #28
 80056ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d122      	bne.n	800570a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80056d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d105      	bne.n	80056fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 faa2 	bl	8005c48 <USB_CoreReset>
 8005704:	4603      	mov	r3, r0
 8005706:	73fb      	strb	r3, [r7, #15]
 8005708:	e01a      	b.n	8005740 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fa96 	bl	8005c48 <USB_CoreReset>
 800571c:	4603      	mov	r3, r0
 800571e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005722:	2b00      	cmp	r3, #0
 8005724:	d106      	bne.n	8005734 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	639a      	str	r2, [r3, #56]	; 0x38
 8005732:	e005      	b.n	8005740 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005738:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005742:	2b01      	cmp	r3, #1
 8005744:	d10b      	bne.n	800575e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f043 0206 	orr.w	r2, r3, #6
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f043 0220 	orr.w	r2, r3, #32
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800575e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800576a:	b004      	add	sp, #16
 800576c:	4770      	bx	lr

0800576e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f023 0201 	bic.w	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d115      	bne.n	80057de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057be:	2001      	movs	r0, #1
 80057c0:	f7fc ff16 	bl	80025f0 <HAL_Delay>
      ms++;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	3301      	adds	r3, #1
 80057c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fa2e 	bl	8005c2c <USB_GetMode>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d01e      	beq.n	8005814 <USB_SetCurrentMode+0x84>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b31      	cmp	r3, #49	; 0x31
 80057da:	d9f0      	bls.n	80057be <USB_SetCurrentMode+0x2e>
 80057dc:	e01a      	b.n	8005814 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057de:	78fb      	ldrb	r3, [r7, #3]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d115      	bne.n	8005810 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057f0:	2001      	movs	r0, #1
 80057f2:	f7fc fefd 	bl	80025f0 <HAL_Delay>
      ms++;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3301      	adds	r3, #1
 80057fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fa15 	bl	8005c2c <USB_GetMode>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <USB_SetCurrentMode+0x84>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2b31      	cmp	r3, #49	; 0x31
 800580c:	d9f0      	bls.n	80057f0 <USB_SetCurrentMode+0x60>
 800580e:	e001      	b.n	8005814 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e005      	b.n	8005820 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b32      	cmp	r3, #50	; 0x32
 8005818:	d101      	bne.n	800581e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005828:	b084      	sub	sp, #16
 800582a:	b580      	push	{r7, lr}
 800582c:	b086      	sub	sp, #24
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005842:	2300      	movs	r3, #0
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	e009      	b.n	800585c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	3340      	adds	r3, #64	; 0x40
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	2200      	movs	r2, #0
 8005854:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	3301      	adds	r3, #1
 800585a:	613b      	str	r3, [r7, #16]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2b0e      	cmp	r3, #14
 8005860:	d9f2      	bls.n	8005848 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005864:	2b00      	cmp	r3, #0
 8005866:	d11c      	bne.n	80058a2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005876:	f043 0302 	orr.w	r3, r3, #2
 800587a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005898:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	639a      	str	r2, [r3, #56]	; 0x38
 80058a0:	e00b      	b.n	80058ba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058c0:	461a      	mov	r2, r3
 80058c2:	2300      	movs	r3, #0
 80058c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058cc:	4619      	mov	r1, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d4:	461a      	mov	r2, r3
 80058d6:	680b      	ldr	r3, [r1, #0]
 80058d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d10c      	bne.n	80058fa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d104      	bne.n	80058f0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80058e6:	2100      	movs	r1, #0
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f965 	bl	8005bb8 <USB_SetDevSpeed>
 80058ee:	e008      	b.n	8005902 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80058f0:	2101      	movs	r1, #1
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f960 	bl	8005bb8 <USB_SetDevSpeed>
 80058f8:	e003      	b.n	8005902 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058fa:	2103      	movs	r1, #3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f95b 	bl	8005bb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005902:	2110      	movs	r1, #16
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f8f3 	bl	8005af0 <USB_FlushTxFifo>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f91f 	bl	8005b58 <USB_FlushRxFifo>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592a:	461a      	mov	r2, r3
 800592c:	2300      	movs	r3, #0
 800592e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005936:	461a      	mov	r2, r3
 8005938:	2300      	movs	r3, #0
 800593a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005942:	461a      	mov	r2, r3
 8005944:	2300      	movs	r3, #0
 8005946:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005948:	2300      	movs	r3, #0
 800594a:	613b      	str	r3, [r7, #16]
 800594c:	e043      	b.n	80059d6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005964:	d118      	bne.n	8005998 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10a      	bne.n	8005982 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005978:	461a      	mov	r2, r3
 800597a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	e013      	b.n	80059aa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598e:	461a      	mov	r2, r3
 8005990:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	e008      	b.n	80059aa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a4:	461a      	mov	r2, r3
 80059a6:	2300      	movs	r3, #0
 80059a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b6:	461a      	mov	r2, r3
 80059b8:	2300      	movs	r3, #0
 80059ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c8:	461a      	mov	r2, r3
 80059ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	3301      	adds	r3, #1
 80059d4:	613b      	str	r3, [r7, #16]
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d3b7      	bcc.n	800594e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059de:	2300      	movs	r3, #0
 80059e0:	613b      	str	r3, [r7, #16]
 80059e2:	e043      	b.n	8005a6c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059fa:	d118      	bne.n	8005a2e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10a      	bne.n	8005a18 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	e013      	b.n	8005a40 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a24:	461a      	mov	r2, r3
 8005a26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	e008      	b.n	8005a40 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	2300      	movs	r3, #0
 8005a50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	613b      	str	r3, [r7, #16]
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d3b7      	bcc.n	80059e4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d105      	bne.n	8005aa8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	f043 0210 	orr.w	r2, r3, #16
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	699a      	ldr	r2, [r3, #24]
 8005aac:	4b0f      	ldr	r3, [pc, #60]	; (8005aec <USB_DevInit+0x2c4>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d005      	beq.n	8005ac6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	f043 0208 	orr.w	r2, r3, #8
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d107      	bne.n	8005adc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ad4:	f043 0304 	orr.w	r3, r3, #4
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ae8:	b004      	add	sp, #16
 8005aea:	4770      	bx	lr
 8005aec:	803c3800 	.word	0x803c3800

08005af0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	3301      	adds	r3, #1
 8005b02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4a13      	ldr	r2, [pc, #76]	; (8005b54 <USB_FlushTxFifo+0x64>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d901      	bls.n	8005b10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e01b      	b.n	8005b48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	daf2      	bge.n	8005afe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	019b      	lsls	r3, r3, #6
 8005b20:	f043 0220 	orr.w	r2, r3, #32
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4a08      	ldr	r2, [pc, #32]	; (8005b54 <USB_FlushTxFifo+0x64>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d901      	bls.n	8005b3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e006      	b.n	8005b48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b20      	cmp	r3, #32
 8005b44:	d0f0      	beq.n	8005b28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	00030d40 	.word	0x00030d40

08005b58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3301      	adds	r3, #1
 8005b68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4a11      	ldr	r2, [pc, #68]	; (8005bb4 <USB_FlushRxFifo+0x5c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d901      	bls.n	8005b76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e018      	b.n	8005ba8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	daf2      	bge.n	8005b64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2210      	movs	r2, #16
 8005b86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4a08      	ldr	r2, [pc, #32]	; (8005bb4 <USB_FlushRxFifo+0x5c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d901      	bls.n	8005b9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e006      	b.n	8005ba8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0310 	and.w	r3, r3, #16
 8005ba2:	2b10      	cmp	r3, #16
 8005ba4:	d0f0      	beq.n	8005b88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	00030d40 	.word	0x00030d40

08005bb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	68f9      	ldr	r1, [r7, #12]
 8005bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b085      	sub	sp, #20
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c04:	f023 0303 	bic.w	r3, r3, #3
 8005c08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c18:	f043 0302 	orr.w	r3, r3, #2
 8005c1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	f003 0301 	and.w	r3, r3, #1
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3301      	adds	r3, #1
 8005c58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4a13      	ldr	r2, [pc, #76]	; (8005cac <USB_CoreReset+0x64>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d901      	bls.n	8005c66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e01b      	b.n	8005c9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	daf2      	bge.n	8005c54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f043 0201 	orr.w	r2, r3, #1
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3301      	adds	r3, #1
 8005c82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4a09      	ldr	r2, [pc, #36]	; (8005cac <USB_CoreReset+0x64>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d901      	bls.n	8005c90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e006      	b.n	8005c9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d0f0      	beq.n	8005c7e <USB_CoreReset+0x36>

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	00030d40 	.word	0x00030d40

08005cb0 <__cvt>:
 8005cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb4:	ec55 4b10 	vmov	r4, r5, d0
 8005cb8:	2d00      	cmp	r5, #0
 8005cba:	460e      	mov	r6, r1
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	462b      	mov	r3, r5
 8005cc0:	bfbb      	ittet	lt
 8005cc2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005cc6:	461d      	movlt	r5, r3
 8005cc8:	2300      	movge	r3, #0
 8005cca:	232d      	movlt	r3, #45	; 0x2d
 8005ccc:	700b      	strb	r3, [r1, #0]
 8005cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cd0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005cd4:	4691      	mov	r9, r2
 8005cd6:	f023 0820 	bic.w	r8, r3, #32
 8005cda:	bfbc      	itt	lt
 8005cdc:	4622      	movlt	r2, r4
 8005cde:	4614      	movlt	r4, r2
 8005ce0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ce4:	d005      	beq.n	8005cf2 <__cvt+0x42>
 8005ce6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005cea:	d100      	bne.n	8005cee <__cvt+0x3e>
 8005cec:	3601      	adds	r6, #1
 8005cee:	2102      	movs	r1, #2
 8005cf0:	e000      	b.n	8005cf4 <__cvt+0x44>
 8005cf2:	2103      	movs	r1, #3
 8005cf4:	ab03      	add	r3, sp, #12
 8005cf6:	9301      	str	r3, [sp, #4]
 8005cf8:	ab02      	add	r3, sp, #8
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	ec45 4b10 	vmov	d0, r4, r5
 8005d00:	4653      	mov	r3, sl
 8005d02:	4632      	mov	r2, r6
 8005d04:	f001 f8b4 	bl	8006e70 <_dtoa_r>
 8005d08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d0c:	4607      	mov	r7, r0
 8005d0e:	d102      	bne.n	8005d16 <__cvt+0x66>
 8005d10:	f019 0f01 	tst.w	r9, #1
 8005d14:	d022      	beq.n	8005d5c <__cvt+0xac>
 8005d16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d1a:	eb07 0906 	add.w	r9, r7, r6
 8005d1e:	d110      	bne.n	8005d42 <__cvt+0x92>
 8005d20:	783b      	ldrb	r3, [r7, #0]
 8005d22:	2b30      	cmp	r3, #48	; 0x30
 8005d24:	d10a      	bne.n	8005d3c <__cvt+0x8c>
 8005d26:	2200      	movs	r2, #0
 8005d28:	2300      	movs	r3, #0
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	f7fa fedb 	bl	8000ae8 <__aeabi_dcmpeq>
 8005d32:	b918      	cbnz	r0, 8005d3c <__cvt+0x8c>
 8005d34:	f1c6 0601 	rsb	r6, r6, #1
 8005d38:	f8ca 6000 	str.w	r6, [sl]
 8005d3c:	f8da 3000 	ldr.w	r3, [sl]
 8005d40:	4499      	add	r9, r3
 8005d42:	2200      	movs	r2, #0
 8005d44:	2300      	movs	r3, #0
 8005d46:	4620      	mov	r0, r4
 8005d48:	4629      	mov	r1, r5
 8005d4a:	f7fa fecd 	bl	8000ae8 <__aeabi_dcmpeq>
 8005d4e:	b108      	cbz	r0, 8005d54 <__cvt+0xa4>
 8005d50:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d54:	2230      	movs	r2, #48	; 0x30
 8005d56:	9b03      	ldr	r3, [sp, #12]
 8005d58:	454b      	cmp	r3, r9
 8005d5a:	d307      	bcc.n	8005d6c <__cvt+0xbc>
 8005d5c:	9b03      	ldr	r3, [sp, #12]
 8005d5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d60:	1bdb      	subs	r3, r3, r7
 8005d62:	4638      	mov	r0, r7
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	b004      	add	sp, #16
 8005d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d6c:	1c59      	adds	r1, r3, #1
 8005d6e:	9103      	str	r1, [sp, #12]
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	e7f0      	b.n	8005d56 <__cvt+0xa6>

08005d74 <__exponent>:
 8005d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d76:	4603      	mov	r3, r0
 8005d78:	2900      	cmp	r1, #0
 8005d7a:	bfb8      	it	lt
 8005d7c:	4249      	neglt	r1, r1
 8005d7e:	f803 2b02 	strb.w	r2, [r3], #2
 8005d82:	bfb4      	ite	lt
 8005d84:	222d      	movlt	r2, #45	; 0x2d
 8005d86:	222b      	movge	r2, #43	; 0x2b
 8005d88:	2909      	cmp	r1, #9
 8005d8a:	7042      	strb	r2, [r0, #1]
 8005d8c:	dd2a      	ble.n	8005de4 <__exponent+0x70>
 8005d8e:	f10d 0207 	add.w	r2, sp, #7
 8005d92:	4617      	mov	r7, r2
 8005d94:	260a      	movs	r6, #10
 8005d96:	4694      	mov	ip, r2
 8005d98:	fb91 f5f6 	sdiv	r5, r1, r6
 8005d9c:	fb06 1415 	mls	r4, r6, r5, r1
 8005da0:	3430      	adds	r4, #48	; 0x30
 8005da2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005da6:	460c      	mov	r4, r1
 8005da8:	2c63      	cmp	r4, #99	; 0x63
 8005daa:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005dae:	4629      	mov	r1, r5
 8005db0:	dcf1      	bgt.n	8005d96 <__exponent+0x22>
 8005db2:	3130      	adds	r1, #48	; 0x30
 8005db4:	f1ac 0402 	sub.w	r4, ip, #2
 8005db8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005dbc:	1c41      	adds	r1, r0, #1
 8005dbe:	4622      	mov	r2, r4
 8005dc0:	42ba      	cmp	r2, r7
 8005dc2:	d30a      	bcc.n	8005dda <__exponent+0x66>
 8005dc4:	f10d 0209 	add.w	r2, sp, #9
 8005dc8:	eba2 020c 	sub.w	r2, r2, ip
 8005dcc:	42bc      	cmp	r4, r7
 8005dce:	bf88      	it	hi
 8005dd0:	2200      	movhi	r2, #0
 8005dd2:	4413      	add	r3, r2
 8005dd4:	1a18      	subs	r0, r3, r0
 8005dd6:	b003      	add	sp, #12
 8005dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dda:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005dde:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005de2:	e7ed      	b.n	8005dc0 <__exponent+0x4c>
 8005de4:	2330      	movs	r3, #48	; 0x30
 8005de6:	3130      	adds	r1, #48	; 0x30
 8005de8:	7083      	strb	r3, [r0, #2]
 8005dea:	70c1      	strb	r1, [r0, #3]
 8005dec:	1d03      	adds	r3, r0, #4
 8005dee:	e7f1      	b.n	8005dd4 <__exponent+0x60>

08005df0 <_printf_float>:
 8005df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df4:	ed2d 8b02 	vpush	{d8}
 8005df8:	b08d      	sub	sp, #52	; 0x34
 8005dfa:	460c      	mov	r4, r1
 8005dfc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e00:	4616      	mov	r6, r2
 8005e02:	461f      	mov	r7, r3
 8005e04:	4605      	mov	r5, r0
 8005e06:	f000 ff2b 	bl	8006c60 <_localeconv_r>
 8005e0a:	f8d0 a000 	ldr.w	sl, [r0]
 8005e0e:	4650      	mov	r0, sl
 8005e10:	f7fa fa3e 	bl	8000290 <strlen>
 8005e14:	2300      	movs	r3, #0
 8005e16:	930a      	str	r3, [sp, #40]	; 0x28
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	9305      	str	r3, [sp, #20]
 8005e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e20:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e24:	3307      	adds	r3, #7
 8005e26:	f023 0307 	bic.w	r3, r3, #7
 8005e2a:	f103 0208 	add.w	r2, r3, #8
 8005e2e:	f8c8 2000 	str.w	r2, [r8]
 8005e32:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e3a:	9307      	str	r3, [sp, #28]
 8005e3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e40:	ee08 0a10 	vmov	s16, r0
 8005e44:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005e48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e4c:	4b9e      	ldr	r3, [pc, #632]	; (80060c8 <_printf_float+0x2d8>)
 8005e4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e52:	f7fa fe7b 	bl	8000b4c <__aeabi_dcmpun>
 8005e56:	bb88      	cbnz	r0, 8005ebc <_printf_float+0xcc>
 8005e58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e5c:	4b9a      	ldr	r3, [pc, #616]	; (80060c8 <_printf_float+0x2d8>)
 8005e5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e62:	f7fa fe55 	bl	8000b10 <__aeabi_dcmple>
 8005e66:	bb48      	cbnz	r0, 8005ebc <_printf_float+0xcc>
 8005e68:	2200      	movs	r2, #0
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	4640      	mov	r0, r8
 8005e6e:	4649      	mov	r1, r9
 8005e70:	f7fa fe44 	bl	8000afc <__aeabi_dcmplt>
 8005e74:	b110      	cbz	r0, 8005e7c <_printf_float+0x8c>
 8005e76:	232d      	movs	r3, #45	; 0x2d
 8005e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e7c:	4a93      	ldr	r2, [pc, #588]	; (80060cc <_printf_float+0x2dc>)
 8005e7e:	4b94      	ldr	r3, [pc, #592]	; (80060d0 <_printf_float+0x2e0>)
 8005e80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005e84:	bf94      	ite	ls
 8005e86:	4690      	movls	r8, r2
 8005e88:	4698      	movhi	r8, r3
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	6123      	str	r3, [r4, #16]
 8005e8e:	9b05      	ldr	r3, [sp, #20]
 8005e90:	f023 0304 	bic.w	r3, r3, #4
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	f04f 0900 	mov.w	r9, #0
 8005e9a:	9700      	str	r7, [sp, #0]
 8005e9c:	4633      	mov	r3, r6
 8005e9e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f000 f9da 	bl	800625c <_printf_common>
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	f040 8090 	bne.w	8005fce <_printf_float+0x1de>
 8005eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005eb2:	b00d      	add	sp, #52	; 0x34
 8005eb4:	ecbd 8b02 	vpop	{d8}
 8005eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ebc:	4642      	mov	r2, r8
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	4640      	mov	r0, r8
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	f7fa fe42 	bl	8000b4c <__aeabi_dcmpun>
 8005ec8:	b140      	cbz	r0, 8005edc <_printf_float+0xec>
 8005eca:	464b      	mov	r3, r9
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	bfbc      	itt	lt
 8005ed0:	232d      	movlt	r3, #45	; 0x2d
 8005ed2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ed6:	4a7f      	ldr	r2, [pc, #508]	; (80060d4 <_printf_float+0x2e4>)
 8005ed8:	4b7f      	ldr	r3, [pc, #508]	; (80060d8 <_printf_float+0x2e8>)
 8005eda:	e7d1      	b.n	8005e80 <_printf_float+0x90>
 8005edc:	6863      	ldr	r3, [r4, #4]
 8005ede:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005ee2:	9206      	str	r2, [sp, #24]
 8005ee4:	1c5a      	adds	r2, r3, #1
 8005ee6:	d13f      	bne.n	8005f68 <_printf_float+0x178>
 8005ee8:	2306      	movs	r3, #6
 8005eea:	6063      	str	r3, [r4, #4]
 8005eec:	9b05      	ldr	r3, [sp, #20]
 8005eee:	6861      	ldr	r1, [r4, #4]
 8005ef0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	9303      	str	r3, [sp, #12]
 8005ef8:	ab0a      	add	r3, sp, #40	; 0x28
 8005efa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005efe:	ab09      	add	r3, sp, #36	; 0x24
 8005f00:	ec49 8b10 	vmov	d0, r8, r9
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	6022      	str	r2, [r4, #0]
 8005f08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	f7ff fecf 	bl	8005cb0 <__cvt>
 8005f12:	9b06      	ldr	r3, [sp, #24]
 8005f14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f16:	2b47      	cmp	r3, #71	; 0x47
 8005f18:	4680      	mov	r8, r0
 8005f1a:	d108      	bne.n	8005f2e <_printf_float+0x13e>
 8005f1c:	1cc8      	adds	r0, r1, #3
 8005f1e:	db02      	blt.n	8005f26 <_printf_float+0x136>
 8005f20:	6863      	ldr	r3, [r4, #4]
 8005f22:	4299      	cmp	r1, r3
 8005f24:	dd41      	ble.n	8005faa <_printf_float+0x1ba>
 8005f26:	f1ab 0302 	sub.w	r3, fp, #2
 8005f2a:	fa5f fb83 	uxtb.w	fp, r3
 8005f2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f32:	d820      	bhi.n	8005f76 <_printf_float+0x186>
 8005f34:	3901      	subs	r1, #1
 8005f36:	465a      	mov	r2, fp
 8005f38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f3c:	9109      	str	r1, [sp, #36]	; 0x24
 8005f3e:	f7ff ff19 	bl	8005d74 <__exponent>
 8005f42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f44:	1813      	adds	r3, r2, r0
 8005f46:	2a01      	cmp	r2, #1
 8005f48:	4681      	mov	r9, r0
 8005f4a:	6123      	str	r3, [r4, #16]
 8005f4c:	dc02      	bgt.n	8005f54 <_printf_float+0x164>
 8005f4e:	6822      	ldr	r2, [r4, #0]
 8005f50:	07d2      	lsls	r2, r2, #31
 8005f52:	d501      	bpl.n	8005f58 <_printf_float+0x168>
 8005f54:	3301      	adds	r3, #1
 8005f56:	6123      	str	r3, [r4, #16]
 8005f58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d09c      	beq.n	8005e9a <_printf_float+0xaa>
 8005f60:	232d      	movs	r3, #45	; 0x2d
 8005f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f66:	e798      	b.n	8005e9a <_printf_float+0xaa>
 8005f68:	9a06      	ldr	r2, [sp, #24]
 8005f6a:	2a47      	cmp	r2, #71	; 0x47
 8005f6c:	d1be      	bne.n	8005eec <_printf_float+0xfc>
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1bc      	bne.n	8005eec <_printf_float+0xfc>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e7b9      	b.n	8005eea <_printf_float+0xfa>
 8005f76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005f7a:	d118      	bne.n	8005fae <_printf_float+0x1be>
 8005f7c:	2900      	cmp	r1, #0
 8005f7e:	6863      	ldr	r3, [r4, #4]
 8005f80:	dd0b      	ble.n	8005f9a <_printf_float+0x1aa>
 8005f82:	6121      	str	r1, [r4, #16]
 8005f84:	b913      	cbnz	r3, 8005f8c <_printf_float+0x19c>
 8005f86:	6822      	ldr	r2, [r4, #0]
 8005f88:	07d0      	lsls	r0, r2, #31
 8005f8a:	d502      	bpl.n	8005f92 <_printf_float+0x1a2>
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	440b      	add	r3, r1
 8005f90:	6123      	str	r3, [r4, #16]
 8005f92:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f94:	f04f 0900 	mov.w	r9, #0
 8005f98:	e7de      	b.n	8005f58 <_printf_float+0x168>
 8005f9a:	b913      	cbnz	r3, 8005fa2 <_printf_float+0x1b2>
 8005f9c:	6822      	ldr	r2, [r4, #0]
 8005f9e:	07d2      	lsls	r2, r2, #31
 8005fa0:	d501      	bpl.n	8005fa6 <_printf_float+0x1b6>
 8005fa2:	3302      	adds	r3, #2
 8005fa4:	e7f4      	b.n	8005f90 <_printf_float+0x1a0>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e7f2      	b.n	8005f90 <_printf_float+0x1a0>
 8005faa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fb0:	4299      	cmp	r1, r3
 8005fb2:	db05      	blt.n	8005fc0 <_printf_float+0x1d0>
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	6121      	str	r1, [r4, #16]
 8005fb8:	07d8      	lsls	r0, r3, #31
 8005fba:	d5ea      	bpl.n	8005f92 <_printf_float+0x1a2>
 8005fbc:	1c4b      	adds	r3, r1, #1
 8005fbe:	e7e7      	b.n	8005f90 <_printf_float+0x1a0>
 8005fc0:	2900      	cmp	r1, #0
 8005fc2:	bfd4      	ite	le
 8005fc4:	f1c1 0202 	rsble	r2, r1, #2
 8005fc8:	2201      	movgt	r2, #1
 8005fca:	4413      	add	r3, r2
 8005fcc:	e7e0      	b.n	8005f90 <_printf_float+0x1a0>
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	055a      	lsls	r2, r3, #21
 8005fd2:	d407      	bmi.n	8005fe4 <_printf_float+0x1f4>
 8005fd4:	6923      	ldr	r3, [r4, #16]
 8005fd6:	4642      	mov	r2, r8
 8005fd8:	4631      	mov	r1, r6
 8005fda:	4628      	mov	r0, r5
 8005fdc:	47b8      	blx	r7
 8005fde:	3001      	adds	r0, #1
 8005fe0:	d12c      	bne.n	800603c <_printf_float+0x24c>
 8005fe2:	e764      	b.n	8005eae <_printf_float+0xbe>
 8005fe4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fe8:	f240 80e0 	bls.w	80061ac <_printf_float+0x3bc>
 8005fec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	f7fa fd78 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	d034      	beq.n	8006066 <_printf_float+0x276>
 8005ffc:	4a37      	ldr	r2, [pc, #220]	; (80060dc <_printf_float+0x2ec>)
 8005ffe:	2301      	movs	r3, #1
 8006000:	4631      	mov	r1, r6
 8006002:	4628      	mov	r0, r5
 8006004:	47b8      	blx	r7
 8006006:	3001      	adds	r0, #1
 8006008:	f43f af51 	beq.w	8005eae <_printf_float+0xbe>
 800600c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006010:	429a      	cmp	r2, r3
 8006012:	db02      	blt.n	800601a <_printf_float+0x22a>
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	07d8      	lsls	r0, r3, #31
 8006018:	d510      	bpl.n	800603c <_printf_float+0x24c>
 800601a:	ee18 3a10 	vmov	r3, s16
 800601e:	4652      	mov	r2, sl
 8006020:	4631      	mov	r1, r6
 8006022:	4628      	mov	r0, r5
 8006024:	47b8      	blx	r7
 8006026:	3001      	adds	r0, #1
 8006028:	f43f af41 	beq.w	8005eae <_printf_float+0xbe>
 800602c:	f04f 0800 	mov.w	r8, #0
 8006030:	f104 091a 	add.w	r9, r4, #26
 8006034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006036:	3b01      	subs	r3, #1
 8006038:	4543      	cmp	r3, r8
 800603a:	dc09      	bgt.n	8006050 <_printf_float+0x260>
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	079b      	lsls	r3, r3, #30
 8006040:	f100 8107 	bmi.w	8006252 <_printf_float+0x462>
 8006044:	68e0      	ldr	r0, [r4, #12]
 8006046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006048:	4298      	cmp	r0, r3
 800604a:	bfb8      	it	lt
 800604c:	4618      	movlt	r0, r3
 800604e:	e730      	b.n	8005eb2 <_printf_float+0xc2>
 8006050:	2301      	movs	r3, #1
 8006052:	464a      	mov	r2, r9
 8006054:	4631      	mov	r1, r6
 8006056:	4628      	mov	r0, r5
 8006058:	47b8      	blx	r7
 800605a:	3001      	adds	r0, #1
 800605c:	f43f af27 	beq.w	8005eae <_printf_float+0xbe>
 8006060:	f108 0801 	add.w	r8, r8, #1
 8006064:	e7e6      	b.n	8006034 <_printf_float+0x244>
 8006066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006068:	2b00      	cmp	r3, #0
 800606a:	dc39      	bgt.n	80060e0 <_printf_float+0x2f0>
 800606c:	4a1b      	ldr	r2, [pc, #108]	; (80060dc <_printf_float+0x2ec>)
 800606e:	2301      	movs	r3, #1
 8006070:	4631      	mov	r1, r6
 8006072:	4628      	mov	r0, r5
 8006074:	47b8      	blx	r7
 8006076:	3001      	adds	r0, #1
 8006078:	f43f af19 	beq.w	8005eae <_printf_float+0xbe>
 800607c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006080:	4313      	orrs	r3, r2
 8006082:	d102      	bne.n	800608a <_printf_float+0x29a>
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	07d9      	lsls	r1, r3, #31
 8006088:	d5d8      	bpl.n	800603c <_printf_float+0x24c>
 800608a:	ee18 3a10 	vmov	r3, s16
 800608e:	4652      	mov	r2, sl
 8006090:	4631      	mov	r1, r6
 8006092:	4628      	mov	r0, r5
 8006094:	47b8      	blx	r7
 8006096:	3001      	adds	r0, #1
 8006098:	f43f af09 	beq.w	8005eae <_printf_float+0xbe>
 800609c:	f04f 0900 	mov.w	r9, #0
 80060a0:	f104 0a1a 	add.w	sl, r4, #26
 80060a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a6:	425b      	negs	r3, r3
 80060a8:	454b      	cmp	r3, r9
 80060aa:	dc01      	bgt.n	80060b0 <_printf_float+0x2c0>
 80060ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ae:	e792      	b.n	8005fd6 <_printf_float+0x1e6>
 80060b0:	2301      	movs	r3, #1
 80060b2:	4652      	mov	r2, sl
 80060b4:	4631      	mov	r1, r6
 80060b6:	4628      	mov	r0, r5
 80060b8:	47b8      	blx	r7
 80060ba:	3001      	adds	r0, #1
 80060bc:	f43f aef7 	beq.w	8005eae <_printf_float+0xbe>
 80060c0:	f109 0901 	add.w	r9, r9, #1
 80060c4:	e7ee      	b.n	80060a4 <_printf_float+0x2b4>
 80060c6:	bf00      	nop
 80060c8:	7fefffff 	.word	0x7fefffff
 80060cc:	0800a658 	.word	0x0800a658
 80060d0:	0800a65c 	.word	0x0800a65c
 80060d4:	0800a660 	.word	0x0800a660
 80060d8:	0800a664 	.word	0x0800a664
 80060dc:	0800a668 	.word	0x0800a668
 80060e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060e4:	429a      	cmp	r2, r3
 80060e6:	bfa8      	it	ge
 80060e8:	461a      	movge	r2, r3
 80060ea:	2a00      	cmp	r2, #0
 80060ec:	4691      	mov	r9, r2
 80060ee:	dc37      	bgt.n	8006160 <_printf_float+0x370>
 80060f0:	f04f 0b00 	mov.w	fp, #0
 80060f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060f8:	f104 021a 	add.w	r2, r4, #26
 80060fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060fe:	9305      	str	r3, [sp, #20]
 8006100:	eba3 0309 	sub.w	r3, r3, r9
 8006104:	455b      	cmp	r3, fp
 8006106:	dc33      	bgt.n	8006170 <_printf_float+0x380>
 8006108:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800610c:	429a      	cmp	r2, r3
 800610e:	db3b      	blt.n	8006188 <_printf_float+0x398>
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	07da      	lsls	r2, r3, #31
 8006114:	d438      	bmi.n	8006188 <_printf_float+0x398>
 8006116:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800611a:	eba2 0903 	sub.w	r9, r2, r3
 800611e:	9b05      	ldr	r3, [sp, #20]
 8006120:	1ad2      	subs	r2, r2, r3
 8006122:	4591      	cmp	r9, r2
 8006124:	bfa8      	it	ge
 8006126:	4691      	movge	r9, r2
 8006128:	f1b9 0f00 	cmp.w	r9, #0
 800612c:	dc35      	bgt.n	800619a <_printf_float+0x3aa>
 800612e:	f04f 0800 	mov.w	r8, #0
 8006132:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006136:	f104 0a1a 	add.w	sl, r4, #26
 800613a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800613e:	1a9b      	subs	r3, r3, r2
 8006140:	eba3 0309 	sub.w	r3, r3, r9
 8006144:	4543      	cmp	r3, r8
 8006146:	f77f af79 	ble.w	800603c <_printf_float+0x24c>
 800614a:	2301      	movs	r3, #1
 800614c:	4652      	mov	r2, sl
 800614e:	4631      	mov	r1, r6
 8006150:	4628      	mov	r0, r5
 8006152:	47b8      	blx	r7
 8006154:	3001      	adds	r0, #1
 8006156:	f43f aeaa 	beq.w	8005eae <_printf_float+0xbe>
 800615a:	f108 0801 	add.w	r8, r8, #1
 800615e:	e7ec      	b.n	800613a <_printf_float+0x34a>
 8006160:	4613      	mov	r3, r2
 8006162:	4631      	mov	r1, r6
 8006164:	4642      	mov	r2, r8
 8006166:	4628      	mov	r0, r5
 8006168:	47b8      	blx	r7
 800616a:	3001      	adds	r0, #1
 800616c:	d1c0      	bne.n	80060f0 <_printf_float+0x300>
 800616e:	e69e      	b.n	8005eae <_printf_float+0xbe>
 8006170:	2301      	movs	r3, #1
 8006172:	4631      	mov	r1, r6
 8006174:	4628      	mov	r0, r5
 8006176:	9205      	str	r2, [sp, #20]
 8006178:	47b8      	blx	r7
 800617a:	3001      	adds	r0, #1
 800617c:	f43f ae97 	beq.w	8005eae <_printf_float+0xbe>
 8006180:	9a05      	ldr	r2, [sp, #20]
 8006182:	f10b 0b01 	add.w	fp, fp, #1
 8006186:	e7b9      	b.n	80060fc <_printf_float+0x30c>
 8006188:	ee18 3a10 	vmov	r3, s16
 800618c:	4652      	mov	r2, sl
 800618e:	4631      	mov	r1, r6
 8006190:	4628      	mov	r0, r5
 8006192:	47b8      	blx	r7
 8006194:	3001      	adds	r0, #1
 8006196:	d1be      	bne.n	8006116 <_printf_float+0x326>
 8006198:	e689      	b.n	8005eae <_printf_float+0xbe>
 800619a:	9a05      	ldr	r2, [sp, #20]
 800619c:	464b      	mov	r3, r9
 800619e:	4442      	add	r2, r8
 80061a0:	4631      	mov	r1, r6
 80061a2:	4628      	mov	r0, r5
 80061a4:	47b8      	blx	r7
 80061a6:	3001      	adds	r0, #1
 80061a8:	d1c1      	bne.n	800612e <_printf_float+0x33e>
 80061aa:	e680      	b.n	8005eae <_printf_float+0xbe>
 80061ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061ae:	2a01      	cmp	r2, #1
 80061b0:	dc01      	bgt.n	80061b6 <_printf_float+0x3c6>
 80061b2:	07db      	lsls	r3, r3, #31
 80061b4:	d53a      	bpl.n	800622c <_printf_float+0x43c>
 80061b6:	2301      	movs	r3, #1
 80061b8:	4642      	mov	r2, r8
 80061ba:	4631      	mov	r1, r6
 80061bc:	4628      	mov	r0, r5
 80061be:	47b8      	blx	r7
 80061c0:	3001      	adds	r0, #1
 80061c2:	f43f ae74 	beq.w	8005eae <_printf_float+0xbe>
 80061c6:	ee18 3a10 	vmov	r3, s16
 80061ca:	4652      	mov	r2, sl
 80061cc:	4631      	mov	r1, r6
 80061ce:	4628      	mov	r0, r5
 80061d0:	47b8      	blx	r7
 80061d2:	3001      	adds	r0, #1
 80061d4:	f43f ae6b 	beq.w	8005eae <_printf_float+0xbe>
 80061d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061dc:	2200      	movs	r2, #0
 80061de:	2300      	movs	r3, #0
 80061e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80061e4:	f7fa fc80 	bl	8000ae8 <__aeabi_dcmpeq>
 80061e8:	b9d8      	cbnz	r0, 8006222 <_printf_float+0x432>
 80061ea:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80061ee:	f108 0201 	add.w	r2, r8, #1
 80061f2:	4631      	mov	r1, r6
 80061f4:	4628      	mov	r0, r5
 80061f6:	47b8      	blx	r7
 80061f8:	3001      	adds	r0, #1
 80061fa:	d10e      	bne.n	800621a <_printf_float+0x42a>
 80061fc:	e657      	b.n	8005eae <_printf_float+0xbe>
 80061fe:	2301      	movs	r3, #1
 8006200:	4652      	mov	r2, sl
 8006202:	4631      	mov	r1, r6
 8006204:	4628      	mov	r0, r5
 8006206:	47b8      	blx	r7
 8006208:	3001      	adds	r0, #1
 800620a:	f43f ae50 	beq.w	8005eae <_printf_float+0xbe>
 800620e:	f108 0801 	add.w	r8, r8, #1
 8006212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006214:	3b01      	subs	r3, #1
 8006216:	4543      	cmp	r3, r8
 8006218:	dcf1      	bgt.n	80061fe <_printf_float+0x40e>
 800621a:	464b      	mov	r3, r9
 800621c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006220:	e6da      	b.n	8005fd8 <_printf_float+0x1e8>
 8006222:	f04f 0800 	mov.w	r8, #0
 8006226:	f104 0a1a 	add.w	sl, r4, #26
 800622a:	e7f2      	b.n	8006212 <_printf_float+0x422>
 800622c:	2301      	movs	r3, #1
 800622e:	4642      	mov	r2, r8
 8006230:	e7df      	b.n	80061f2 <_printf_float+0x402>
 8006232:	2301      	movs	r3, #1
 8006234:	464a      	mov	r2, r9
 8006236:	4631      	mov	r1, r6
 8006238:	4628      	mov	r0, r5
 800623a:	47b8      	blx	r7
 800623c:	3001      	adds	r0, #1
 800623e:	f43f ae36 	beq.w	8005eae <_printf_float+0xbe>
 8006242:	f108 0801 	add.w	r8, r8, #1
 8006246:	68e3      	ldr	r3, [r4, #12]
 8006248:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800624a:	1a5b      	subs	r3, r3, r1
 800624c:	4543      	cmp	r3, r8
 800624e:	dcf0      	bgt.n	8006232 <_printf_float+0x442>
 8006250:	e6f8      	b.n	8006044 <_printf_float+0x254>
 8006252:	f04f 0800 	mov.w	r8, #0
 8006256:	f104 0919 	add.w	r9, r4, #25
 800625a:	e7f4      	b.n	8006246 <_printf_float+0x456>

0800625c <_printf_common>:
 800625c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006260:	4616      	mov	r6, r2
 8006262:	4699      	mov	r9, r3
 8006264:	688a      	ldr	r2, [r1, #8]
 8006266:	690b      	ldr	r3, [r1, #16]
 8006268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800626c:	4293      	cmp	r3, r2
 800626e:	bfb8      	it	lt
 8006270:	4613      	movlt	r3, r2
 8006272:	6033      	str	r3, [r6, #0]
 8006274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006278:	4607      	mov	r7, r0
 800627a:	460c      	mov	r4, r1
 800627c:	b10a      	cbz	r2, 8006282 <_printf_common+0x26>
 800627e:	3301      	adds	r3, #1
 8006280:	6033      	str	r3, [r6, #0]
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	0699      	lsls	r1, r3, #26
 8006286:	bf42      	ittt	mi
 8006288:	6833      	ldrmi	r3, [r6, #0]
 800628a:	3302      	addmi	r3, #2
 800628c:	6033      	strmi	r3, [r6, #0]
 800628e:	6825      	ldr	r5, [r4, #0]
 8006290:	f015 0506 	ands.w	r5, r5, #6
 8006294:	d106      	bne.n	80062a4 <_printf_common+0x48>
 8006296:	f104 0a19 	add.w	sl, r4, #25
 800629a:	68e3      	ldr	r3, [r4, #12]
 800629c:	6832      	ldr	r2, [r6, #0]
 800629e:	1a9b      	subs	r3, r3, r2
 80062a0:	42ab      	cmp	r3, r5
 80062a2:	dc26      	bgt.n	80062f2 <_printf_common+0x96>
 80062a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062a8:	1e13      	subs	r3, r2, #0
 80062aa:	6822      	ldr	r2, [r4, #0]
 80062ac:	bf18      	it	ne
 80062ae:	2301      	movne	r3, #1
 80062b0:	0692      	lsls	r2, r2, #26
 80062b2:	d42b      	bmi.n	800630c <_printf_common+0xb0>
 80062b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062b8:	4649      	mov	r1, r9
 80062ba:	4638      	mov	r0, r7
 80062bc:	47c0      	blx	r8
 80062be:	3001      	adds	r0, #1
 80062c0:	d01e      	beq.n	8006300 <_printf_common+0xa4>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	6922      	ldr	r2, [r4, #16]
 80062c6:	f003 0306 	and.w	r3, r3, #6
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	bf02      	ittt	eq
 80062ce:	68e5      	ldreq	r5, [r4, #12]
 80062d0:	6833      	ldreq	r3, [r6, #0]
 80062d2:	1aed      	subeq	r5, r5, r3
 80062d4:	68a3      	ldr	r3, [r4, #8]
 80062d6:	bf0c      	ite	eq
 80062d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062dc:	2500      	movne	r5, #0
 80062de:	4293      	cmp	r3, r2
 80062e0:	bfc4      	itt	gt
 80062e2:	1a9b      	subgt	r3, r3, r2
 80062e4:	18ed      	addgt	r5, r5, r3
 80062e6:	2600      	movs	r6, #0
 80062e8:	341a      	adds	r4, #26
 80062ea:	42b5      	cmp	r5, r6
 80062ec:	d11a      	bne.n	8006324 <_printf_common+0xc8>
 80062ee:	2000      	movs	r0, #0
 80062f0:	e008      	b.n	8006304 <_printf_common+0xa8>
 80062f2:	2301      	movs	r3, #1
 80062f4:	4652      	mov	r2, sl
 80062f6:	4649      	mov	r1, r9
 80062f8:	4638      	mov	r0, r7
 80062fa:	47c0      	blx	r8
 80062fc:	3001      	adds	r0, #1
 80062fe:	d103      	bne.n	8006308 <_printf_common+0xac>
 8006300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006308:	3501      	adds	r5, #1
 800630a:	e7c6      	b.n	800629a <_printf_common+0x3e>
 800630c:	18e1      	adds	r1, r4, r3
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	2030      	movs	r0, #48	; 0x30
 8006312:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006316:	4422      	add	r2, r4
 8006318:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800631c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006320:	3302      	adds	r3, #2
 8006322:	e7c7      	b.n	80062b4 <_printf_common+0x58>
 8006324:	2301      	movs	r3, #1
 8006326:	4622      	mov	r2, r4
 8006328:	4649      	mov	r1, r9
 800632a:	4638      	mov	r0, r7
 800632c:	47c0      	blx	r8
 800632e:	3001      	adds	r0, #1
 8006330:	d0e6      	beq.n	8006300 <_printf_common+0xa4>
 8006332:	3601      	adds	r6, #1
 8006334:	e7d9      	b.n	80062ea <_printf_common+0x8e>
	...

08006338 <_printf_i>:
 8006338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800633c:	7e0f      	ldrb	r7, [r1, #24]
 800633e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006340:	2f78      	cmp	r7, #120	; 0x78
 8006342:	4691      	mov	r9, r2
 8006344:	4680      	mov	r8, r0
 8006346:	460c      	mov	r4, r1
 8006348:	469a      	mov	sl, r3
 800634a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800634e:	d807      	bhi.n	8006360 <_printf_i+0x28>
 8006350:	2f62      	cmp	r7, #98	; 0x62
 8006352:	d80a      	bhi.n	800636a <_printf_i+0x32>
 8006354:	2f00      	cmp	r7, #0
 8006356:	f000 80d4 	beq.w	8006502 <_printf_i+0x1ca>
 800635a:	2f58      	cmp	r7, #88	; 0x58
 800635c:	f000 80c0 	beq.w	80064e0 <_printf_i+0x1a8>
 8006360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006368:	e03a      	b.n	80063e0 <_printf_i+0xa8>
 800636a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800636e:	2b15      	cmp	r3, #21
 8006370:	d8f6      	bhi.n	8006360 <_printf_i+0x28>
 8006372:	a101      	add	r1, pc, #4	; (adr r1, 8006378 <_printf_i+0x40>)
 8006374:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006378:	080063d1 	.word	0x080063d1
 800637c:	080063e5 	.word	0x080063e5
 8006380:	08006361 	.word	0x08006361
 8006384:	08006361 	.word	0x08006361
 8006388:	08006361 	.word	0x08006361
 800638c:	08006361 	.word	0x08006361
 8006390:	080063e5 	.word	0x080063e5
 8006394:	08006361 	.word	0x08006361
 8006398:	08006361 	.word	0x08006361
 800639c:	08006361 	.word	0x08006361
 80063a0:	08006361 	.word	0x08006361
 80063a4:	080064e9 	.word	0x080064e9
 80063a8:	08006411 	.word	0x08006411
 80063ac:	080064a3 	.word	0x080064a3
 80063b0:	08006361 	.word	0x08006361
 80063b4:	08006361 	.word	0x08006361
 80063b8:	0800650b 	.word	0x0800650b
 80063bc:	08006361 	.word	0x08006361
 80063c0:	08006411 	.word	0x08006411
 80063c4:	08006361 	.word	0x08006361
 80063c8:	08006361 	.word	0x08006361
 80063cc:	080064ab 	.word	0x080064ab
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	1d1a      	adds	r2, r3, #4
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	602a      	str	r2, [r5, #0]
 80063d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063e0:	2301      	movs	r3, #1
 80063e2:	e09f      	b.n	8006524 <_printf_i+0x1ec>
 80063e4:	6820      	ldr	r0, [r4, #0]
 80063e6:	682b      	ldr	r3, [r5, #0]
 80063e8:	0607      	lsls	r7, r0, #24
 80063ea:	f103 0104 	add.w	r1, r3, #4
 80063ee:	6029      	str	r1, [r5, #0]
 80063f0:	d501      	bpl.n	80063f6 <_printf_i+0xbe>
 80063f2:	681e      	ldr	r6, [r3, #0]
 80063f4:	e003      	b.n	80063fe <_printf_i+0xc6>
 80063f6:	0646      	lsls	r6, r0, #25
 80063f8:	d5fb      	bpl.n	80063f2 <_printf_i+0xba>
 80063fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80063fe:	2e00      	cmp	r6, #0
 8006400:	da03      	bge.n	800640a <_printf_i+0xd2>
 8006402:	232d      	movs	r3, #45	; 0x2d
 8006404:	4276      	negs	r6, r6
 8006406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800640a:	485a      	ldr	r0, [pc, #360]	; (8006574 <_printf_i+0x23c>)
 800640c:	230a      	movs	r3, #10
 800640e:	e012      	b.n	8006436 <_printf_i+0xfe>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	6820      	ldr	r0, [r4, #0]
 8006414:	1d19      	adds	r1, r3, #4
 8006416:	6029      	str	r1, [r5, #0]
 8006418:	0605      	lsls	r5, r0, #24
 800641a:	d501      	bpl.n	8006420 <_printf_i+0xe8>
 800641c:	681e      	ldr	r6, [r3, #0]
 800641e:	e002      	b.n	8006426 <_printf_i+0xee>
 8006420:	0641      	lsls	r1, r0, #25
 8006422:	d5fb      	bpl.n	800641c <_printf_i+0xe4>
 8006424:	881e      	ldrh	r6, [r3, #0]
 8006426:	4853      	ldr	r0, [pc, #332]	; (8006574 <_printf_i+0x23c>)
 8006428:	2f6f      	cmp	r7, #111	; 0x6f
 800642a:	bf0c      	ite	eq
 800642c:	2308      	moveq	r3, #8
 800642e:	230a      	movne	r3, #10
 8006430:	2100      	movs	r1, #0
 8006432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006436:	6865      	ldr	r5, [r4, #4]
 8006438:	60a5      	str	r5, [r4, #8]
 800643a:	2d00      	cmp	r5, #0
 800643c:	bfa2      	ittt	ge
 800643e:	6821      	ldrge	r1, [r4, #0]
 8006440:	f021 0104 	bicge.w	r1, r1, #4
 8006444:	6021      	strge	r1, [r4, #0]
 8006446:	b90e      	cbnz	r6, 800644c <_printf_i+0x114>
 8006448:	2d00      	cmp	r5, #0
 800644a:	d04b      	beq.n	80064e4 <_printf_i+0x1ac>
 800644c:	4615      	mov	r5, r2
 800644e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006452:	fb03 6711 	mls	r7, r3, r1, r6
 8006456:	5dc7      	ldrb	r7, [r0, r7]
 8006458:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800645c:	4637      	mov	r7, r6
 800645e:	42bb      	cmp	r3, r7
 8006460:	460e      	mov	r6, r1
 8006462:	d9f4      	bls.n	800644e <_printf_i+0x116>
 8006464:	2b08      	cmp	r3, #8
 8006466:	d10b      	bne.n	8006480 <_printf_i+0x148>
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	07de      	lsls	r6, r3, #31
 800646c:	d508      	bpl.n	8006480 <_printf_i+0x148>
 800646e:	6923      	ldr	r3, [r4, #16]
 8006470:	6861      	ldr	r1, [r4, #4]
 8006472:	4299      	cmp	r1, r3
 8006474:	bfde      	ittt	le
 8006476:	2330      	movle	r3, #48	; 0x30
 8006478:	f805 3c01 	strble.w	r3, [r5, #-1]
 800647c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006480:	1b52      	subs	r2, r2, r5
 8006482:	6122      	str	r2, [r4, #16]
 8006484:	f8cd a000 	str.w	sl, [sp]
 8006488:	464b      	mov	r3, r9
 800648a:	aa03      	add	r2, sp, #12
 800648c:	4621      	mov	r1, r4
 800648e:	4640      	mov	r0, r8
 8006490:	f7ff fee4 	bl	800625c <_printf_common>
 8006494:	3001      	adds	r0, #1
 8006496:	d14a      	bne.n	800652e <_printf_i+0x1f6>
 8006498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800649c:	b004      	add	sp, #16
 800649e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	f043 0320 	orr.w	r3, r3, #32
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	4833      	ldr	r0, [pc, #204]	; (8006578 <_printf_i+0x240>)
 80064ac:	2778      	movs	r7, #120	; 0x78
 80064ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	6829      	ldr	r1, [r5, #0]
 80064b6:	061f      	lsls	r7, r3, #24
 80064b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80064bc:	d402      	bmi.n	80064c4 <_printf_i+0x18c>
 80064be:	065f      	lsls	r7, r3, #25
 80064c0:	bf48      	it	mi
 80064c2:	b2b6      	uxthmi	r6, r6
 80064c4:	07df      	lsls	r7, r3, #31
 80064c6:	bf48      	it	mi
 80064c8:	f043 0320 	orrmi.w	r3, r3, #32
 80064cc:	6029      	str	r1, [r5, #0]
 80064ce:	bf48      	it	mi
 80064d0:	6023      	strmi	r3, [r4, #0]
 80064d2:	b91e      	cbnz	r6, 80064dc <_printf_i+0x1a4>
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	f023 0320 	bic.w	r3, r3, #32
 80064da:	6023      	str	r3, [r4, #0]
 80064dc:	2310      	movs	r3, #16
 80064de:	e7a7      	b.n	8006430 <_printf_i+0xf8>
 80064e0:	4824      	ldr	r0, [pc, #144]	; (8006574 <_printf_i+0x23c>)
 80064e2:	e7e4      	b.n	80064ae <_printf_i+0x176>
 80064e4:	4615      	mov	r5, r2
 80064e6:	e7bd      	b.n	8006464 <_printf_i+0x12c>
 80064e8:	682b      	ldr	r3, [r5, #0]
 80064ea:	6826      	ldr	r6, [r4, #0]
 80064ec:	6961      	ldr	r1, [r4, #20]
 80064ee:	1d18      	adds	r0, r3, #4
 80064f0:	6028      	str	r0, [r5, #0]
 80064f2:	0635      	lsls	r5, r6, #24
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	d501      	bpl.n	80064fc <_printf_i+0x1c4>
 80064f8:	6019      	str	r1, [r3, #0]
 80064fa:	e002      	b.n	8006502 <_printf_i+0x1ca>
 80064fc:	0670      	lsls	r0, r6, #25
 80064fe:	d5fb      	bpl.n	80064f8 <_printf_i+0x1c0>
 8006500:	8019      	strh	r1, [r3, #0]
 8006502:	2300      	movs	r3, #0
 8006504:	6123      	str	r3, [r4, #16]
 8006506:	4615      	mov	r5, r2
 8006508:	e7bc      	b.n	8006484 <_printf_i+0x14c>
 800650a:	682b      	ldr	r3, [r5, #0]
 800650c:	1d1a      	adds	r2, r3, #4
 800650e:	602a      	str	r2, [r5, #0]
 8006510:	681d      	ldr	r5, [r3, #0]
 8006512:	6862      	ldr	r2, [r4, #4]
 8006514:	2100      	movs	r1, #0
 8006516:	4628      	mov	r0, r5
 8006518:	f7f9 fe6a 	bl	80001f0 <memchr>
 800651c:	b108      	cbz	r0, 8006522 <_printf_i+0x1ea>
 800651e:	1b40      	subs	r0, r0, r5
 8006520:	6060      	str	r0, [r4, #4]
 8006522:	6863      	ldr	r3, [r4, #4]
 8006524:	6123      	str	r3, [r4, #16]
 8006526:	2300      	movs	r3, #0
 8006528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800652c:	e7aa      	b.n	8006484 <_printf_i+0x14c>
 800652e:	6923      	ldr	r3, [r4, #16]
 8006530:	462a      	mov	r2, r5
 8006532:	4649      	mov	r1, r9
 8006534:	4640      	mov	r0, r8
 8006536:	47d0      	blx	sl
 8006538:	3001      	adds	r0, #1
 800653a:	d0ad      	beq.n	8006498 <_printf_i+0x160>
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	079b      	lsls	r3, r3, #30
 8006540:	d413      	bmi.n	800656a <_printf_i+0x232>
 8006542:	68e0      	ldr	r0, [r4, #12]
 8006544:	9b03      	ldr	r3, [sp, #12]
 8006546:	4298      	cmp	r0, r3
 8006548:	bfb8      	it	lt
 800654a:	4618      	movlt	r0, r3
 800654c:	e7a6      	b.n	800649c <_printf_i+0x164>
 800654e:	2301      	movs	r3, #1
 8006550:	4632      	mov	r2, r6
 8006552:	4649      	mov	r1, r9
 8006554:	4640      	mov	r0, r8
 8006556:	47d0      	blx	sl
 8006558:	3001      	adds	r0, #1
 800655a:	d09d      	beq.n	8006498 <_printf_i+0x160>
 800655c:	3501      	adds	r5, #1
 800655e:	68e3      	ldr	r3, [r4, #12]
 8006560:	9903      	ldr	r1, [sp, #12]
 8006562:	1a5b      	subs	r3, r3, r1
 8006564:	42ab      	cmp	r3, r5
 8006566:	dcf2      	bgt.n	800654e <_printf_i+0x216>
 8006568:	e7eb      	b.n	8006542 <_printf_i+0x20a>
 800656a:	2500      	movs	r5, #0
 800656c:	f104 0619 	add.w	r6, r4, #25
 8006570:	e7f5      	b.n	800655e <_printf_i+0x226>
 8006572:	bf00      	nop
 8006574:	0800a66a 	.word	0x0800a66a
 8006578:	0800a67b 	.word	0x0800a67b

0800657c <_scanf_float>:
 800657c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006580:	b087      	sub	sp, #28
 8006582:	4617      	mov	r7, r2
 8006584:	9303      	str	r3, [sp, #12]
 8006586:	688b      	ldr	r3, [r1, #8]
 8006588:	1e5a      	subs	r2, r3, #1
 800658a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800658e:	bf83      	ittte	hi
 8006590:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006594:	195b      	addhi	r3, r3, r5
 8006596:	9302      	strhi	r3, [sp, #8]
 8006598:	2300      	movls	r3, #0
 800659a:	bf86      	itte	hi
 800659c:	f240 135d 	movwhi	r3, #349	; 0x15d
 80065a0:	608b      	strhi	r3, [r1, #8]
 80065a2:	9302      	strls	r3, [sp, #8]
 80065a4:	680b      	ldr	r3, [r1, #0]
 80065a6:	468b      	mov	fp, r1
 80065a8:	2500      	movs	r5, #0
 80065aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80065ae:	f84b 3b1c 	str.w	r3, [fp], #28
 80065b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80065b6:	4680      	mov	r8, r0
 80065b8:	460c      	mov	r4, r1
 80065ba:	465e      	mov	r6, fp
 80065bc:	46aa      	mov	sl, r5
 80065be:	46a9      	mov	r9, r5
 80065c0:	9501      	str	r5, [sp, #4]
 80065c2:	68a2      	ldr	r2, [r4, #8]
 80065c4:	b152      	cbz	r2, 80065dc <_scanf_float+0x60>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	2b4e      	cmp	r3, #78	; 0x4e
 80065cc:	d864      	bhi.n	8006698 <_scanf_float+0x11c>
 80065ce:	2b40      	cmp	r3, #64	; 0x40
 80065d0:	d83c      	bhi.n	800664c <_scanf_float+0xd0>
 80065d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80065d6:	b2c8      	uxtb	r0, r1
 80065d8:	280e      	cmp	r0, #14
 80065da:	d93a      	bls.n	8006652 <_scanf_float+0xd6>
 80065dc:	f1b9 0f00 	cmp.w	r9, #0
 80065e0:	d003      	beq.n	80065ea <_scanf_float+0x6e>
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065e8:	6023      	str	r3, [r4, #0]
 80065ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80065ee:	f1ba 0f01 	cmp.w	sl, #1
 80065f2:	f200 8113 	bhi.w	800681c <_scanf_float+0x2a0>
 80065f6:	455e      	cmp	r6, fp
 80065f8:	f200 8105 	bhi.w	8006806 <_scanf_float+0x28a>
 80065fc:	2501      	movs	r5, #1
 80065fe:	4628      	mov	r0, r5
 8006600:	b007      	add	sp, #28
 8006602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006606:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800660a:	2a0d      	cmp	r2, #13
 800660c:	d8e6      	bhi.n	80065dc <_scanf_float+0x60>
 800660e:	a101      	add	r1, pc, #4	; (adr r1, 8006614 <_scanf_float+0x98>)
 8006610:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006614:	08006753 	.word	0x08006753
 8006618:	080065dd 	.word	0x080065dd
 800661c:	080065dd 	.word	0x080065dd
 8006620:	080065dd 	.word	0x080065dd
 8006624:	080067b3 	.word	0x080067b3
 8006628:	0800678b 	.word	0x0800678b
 800662c:	080065dd 	.word	0x080065dd
 8006630:	080065dd 	.word	0x080065dd
 8006634:	08006761 	.word	0x08006761
 8006638:	080065dd 	.word	0x080065dd
 800663c:	080065dd 	.word	0x080065dd
 8006640:	080065dd 	.word	0x080065dd
 8006644:	080065dd 	.word	0x080065dd
 8006648:	08006719 	.word	0x08006719
 800664c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006650:	e7db      	b.n	800660a <_scanf_float+0x8e>
 8006652:	290e      	cmp	r1, #14
 8006654:	d8c2      	bhi.n	80065dc <_scanf_float+0x60>
 8006656:	a001      	add	r0, pc, #4	; (adr r0, 800665c <_scanf_float+0xe0>)
 8006658:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800665c:	0800670b 	.word	0x0800670b
 8006660:	080065dd 	.word	0x080065dd
 8006664:	0800670b 	.word	0x0800670b
 8006668:	0800679f 	.word	0x0800679f
 800666c:	080065dd 	.word	0x080065dd
 8006670:	080066b9 	.word	0x080066b9
 8006674:	080066f5 	.word	0x080066f5
 8006678:	080066f5 	.word	0x080066f5
 800667c:	080066f5 	.word	0x080066f5
 8006680:	080066f5 	.word	0x080066f5
 8006684:	080066f5 	.word	0x080066f5
 8006688:	080066f5 	.word	0x080066f5
 800668c:	080066f5 	.word	0x080066f5
 8006690:	080066f5 	.word	0x080066f5
 8006694:	080066f5 	.word	0x080066f5
 8006698:	2b6e      	cmp	r3, #110	; 0x6e
 800669a:	d809      	bhi.n	80066b0 <_scanf_float+0x134>
 800669c:	2b60      	cmp	r3, #96	; 0x60
 800669e:	d8b2      	bhi.n	8006606 <_scanf_float+0x8a>
 80066a0:	2b54      	cmp	r3, #84	; 0x54
 80066a2:	d077      	beq.n	8006794 <_scanf_float+0x218>
 80066a4:	2b59      	cmp	r3, #89	; 0x59
 80066a6:	d199      	bne.n	80065dc <_scanf_float+0x60>
 80066a8:	2d07      	cmp	r5, #7
 80066aa:	d197      	bne.n	80065dc <_scanf_float+0x60>
 80066ac:	2508      	movs	r5, #8
 80066ae:	e029      	b.n	8006704 <_scanf_float+0x188>
 80066b0:	2b74      	cmp	r3, #116	; 0x74
 80066b2:	d06f      	beq.n	8006794 <_scanf_float+0x218>
 80066b4:	2b79      	cmp	r3, #121	; 0x79
 80066b6:	e7f6      	b.n	80066a6 <_scanf_float+0x12a>
 80066b8:	6821      	ldr	r1, [r4, #0]
 80066ba:	05c8      	lsls	r0, r1, #23
 80066bc:	d51a      	bpl.n	80066f4 <_scanf_float+0x178>
 80066be:	9b02      	ldr	r3, [sp, #8]
 80066c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80066c4:	6021      	str	r1, [r4, #0]
 80066c6:	f109 0901 	add.w	r9, r9, #1
 80066ca:	b11b      	cbz	r3, 80066d4 <_scanf_float+0x158>
 80066cc:	3b01      	subs	r3, #1
 80066ce:	3201      	adds	r2, #1
 80066d0:	9302      	str	r3, [sp, #8]
 80066d2:	60a2      	str	r2, [r4, #8]
 80066d4:	68a3      	ldr	r3, [r4, #8]
 80066d6:	3b01      	subs	r3, #1
 80066d8:	60a3      	str	r3, [r4, #8]
 80066da:	6923      	ldr	r3, [r4, #16]
 80066dc:	3301      	adds	r3, #1
 80066de:	6123      	str	r3, [r4, #16]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	607b      	str	r3, [r7, #4]
 80066e8:	f340 8084 	ble.w	80067f4 <_scanf_float+0x278>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	3301      	adds	r3, #1
 80066f0:	603b      	str	r3, [r7, #0]
 80066f2:	e766      	b.n	80065c2 <_scanf_float+0x46>
 80066f4:	eb1a 0f05 	cmn.w	sl, r5
 80066f8:	f47f af70 	bne.w	80065dc <_scanf_float+0x60>
 80066fc:	6822      	ldr	r2, [r4, #0]
 80066fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006702:	6022      	str	r2, [r4, #0]
 8006704:	f806 3b01 	strb.w	r3, [r6], #1
 8006708:	e7e4      	b.n	80066d4 <_scanf_float+0x158>
 800670a:	6822      	ldr	r2, [r4, #0]
 800670c:	0610      	lsls	r0, r2, #24
 800670e:	f57f af65 	bpl.w	80065dc <_scanf_float+0x60>
 8006712:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006716:	e7f4      	b.n	8006702 <_scanf_float+0x186>
 8006718:	f1ba 0f00 	cmp.w	sl, #0
 800671c:	d10e      	bne.n	800673c <_scanf_float+0x1c0>
 800671e:	f1b9 0f00 	cmp.w	r9, #0
 8006722:	d10e      	bne.n	8006742 <_scanf_float+0x1c6>
 8006724:	6822      	ldr	r2, [r4, #0]
 8006726:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800672a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800672e:	d108      	bne.n	8006742 <_scanf_float+0x1c6>
 8006730:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006734:	6022      	str	r2, [r4, #0]
 8006736:	f04f 0a01 	mov.w	sl, #1
 800673a:	e7e3      	b.n	8006704 <_scanf_float+0x188>
 800673c:	f1ba 0f02 	cmp.w	sl, #2
 8006740:	d055      	beq.n	80067ee <_scanf_float+0x272>
 8006742:	2d01      	cmp	r5, #1
 8006744:	d002      	beq.n	800674c <_scanf_float+0x1d0>
 8006746:	2d04      	cmp	r5, #4
 8006748:	f47f af48 	bne.w	80065dc <_scanf_float+0x60>
 800674c:	3501      	adds	r5, #1
 800674e:	b2ed      	uxtb	r5, r5
 8006750:	e7d8      	b.n	8006704 <_scanf_float+0x188>
 8006752:	f1ba 0f01 	cmp.w	sl, #1
 8006756:	f47f af41 	bne.w	80065dc <_scanf_float+0x60>
 800675a:	f04f 0a02 	mov.w	sl, #2
 800675e:	e7d1      	b.n	8006704 <_scanf_float+0x188>
 8006760:	b97d      	cbnz	r5, 8006782 <_scanf_float+0x206>
 8006762:	f1b9 0f00 	cmp.w	r9, #0
 8006766:	f47f af3c 	bne.w	80065e2 <_scanf_float+0x66>
 800676a:	6822      	ldr	r2, [r4, #0]
 800676c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006770:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006774:	f47f af39 	bne.w	80065ea <_scanf_float+0x6e>
 8006778:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800677c:	6022      	str	r2, [r4, #0]
 800677e:	2501      	movs	r5, #1
 8006780:	e7c0      	b.n	8006704 <_scanf_float+0x188>
 8006782:	2d03      	cmp	r5, #3
 8006784:	d0e2      	beq.n	800674c <_scanf_float+0x1d0>
 8006786:	2d05      	cmp	r5, #5
 8006788:	e7de      	b.n	8006748 <_scanf_float+0x1cc>
 800678a:	2d02      	cmp	r5, #2
 800678c:	f47f af26 	bne.w	80065dc <_scanf_float+0x60>
 8006790:	2503      	movs	r5, #3
 8006792:	e7b7      	b.n	8006704 <_scanf_float+0x188>
 8006794:	2d06      	cmp	r5, #6
 8006796:	f47f af21 	bne.w	80065dc <_scanf_float+0x60>
 800679a:	2507      	movs	r5, #7
 800679c:	e7b2      	b.n	8006704 <_scanf_float+0x188>
 800679e:	6822      	ldr	r2, [r4, #0]
 80067a0:	0591      	lsls	r1, r2, #22
 80067a2:	f57f af1b 	bpl.w	80065dc <_scanf_float+0x60>
 80067a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80067aa:	6022      	str	r2, [r4, #0]
 80067ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80067b0:	e7a8      	b.n	8006704 <_scanf_float+0x188>
 80067b2:	6822      	ldr	r2, [r4, #0]
 80067b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80067b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80067bc:	d006      	beq.n	80067cc <_scanf_float+0x250>
 80067be:	0550      	lsls	r0, r2, #21
 80067c0:	f57f af0c 	bpl.w	80065dc <_scanf_float+0x60>
 80067c4:	f1b9 0f00 	cmp.w	r9, #0
 80067c8:	f43f af0f 	beq.w	80065ea <_scanf_float+0x6e>
 80067cc:	0591      	lsls	r1, r2, #22
 80067ce:	bf58      	it	pl
 80067d0:	9901      	ldrpl	r1, [sp, #4]
 80067d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80067d6:	bf58      	it	pl
 80067d8:	eba9 0101 	subpl.w	r1, r9, r1
 80067dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80067e0:	bf58      	it	pl
 80067e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80067e6:	6022      	str	r2, [r4, #0]
 80067e8:	f04f 0900 	mov.w	r9, #0
 80067ec:	e78a      	b.n	8006704 <_scanf_float+0x188>
 80067ee:	f04f 0a03 	mov.w	sl, #3
 80067f2:	e787      	b.n	8006704 <_scanf_float+0x188>
 80067f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80067f8:	4639      	mov	r1, r7
 80067fa:	4640      	mov	r0, r8
 80067fc:	4798      	blx	r3
 80067fe:	2800      	cmp	r0, #0
 8006800:	f43f aedf 	beq.w	80065c2 <_scanf_float+0x46>
 8006804:	e6ea      	b.n	80065dc <_scanf_float+0x60>
 8006806:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800680a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800680e:	463a      	mov	r2, r7
 8006810:	4640      	mov	r0, r8
 8006812:	4798      	blx	r3
 8006814:	6923      	ldr	r3, [r4, #16]
 8006816:	3b01      	subs	r3, #1
 8006818:	6123      	str	r3, [r4, #16]
 800681a:	e6ec      	b.n	80065f6 <_scanf_float+0x7a>
 800681c:	1e6b      	subs	r3, r5, #1
 800681e:	2b06      	cmp	r3, #6
 8006820:	d825      	bhi.n	800686e <_scanf_float+0x2f2>
 8006822:	2d02      	cmp	r5, #2
 8006824:	d836      	bhi.n	8006894 <_scanf_float+0x318>
 8006826:	455e      	cmp	r6, fp
 8006828:	f67f aee8 	bls.w	80065fc <_scanf_float+0x80>
 800682c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006830:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006834:	463a      	mov	r2, r7
 8006836:	4640      	mov	r0, r8
 8006838:	4798      	blx	r3
 800683a:	6923      	ldr	r3, [r4, #16]
 800683c:	3b01      	subs	r3, #1
 800683e:	6123      	str	r3, [r4, #16]
 8006840:	e7f1      	b.n	8006826 <_scanf_float+0x2aa>
 8006842:	9802      	ldr	r0, [sp, #8]
 8006844:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006848:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800684c:	9002      	str	r0, [sp, #8]
 800684e:	463a      	mov	r2, r7
 8006850:	4640      	mov	r0, r8
 8006852:	4798      	blx	r3
 8006854:	6923      	ldr	r3, [r4, #16]
 8006856:	3b01      	subs	r3, #1
 8006858:	6123      	str	r3, [r4, #16]
 800685a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800685e:	fa5f fa8a 	uxtb.w	sl, sl
 8006862:	f1ba 0f02 	cmp.w	sl, #2
 8006866:	d1ec      	bne.n	8006842 <_scanf_float+0x2c6>
 8006868:	3d03      	subs	r5, #3
 800686a:	b2ed      	uxtb	r5, r5
 800686c:	1b76      	subs	r6, r6, r5
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	05da      	lsls	r2, r3, #23
 8006872:	d52f      	bpl.n	80068d4 <_scanf_float+0x358>
 8006874:	055b      	lsls	r3, r3, #21
 8006876:	d510      	bpl.n	800689a <_scanf_float+0x31e>
 8006878:	455e      	cmp	r6, fp
 800687a:	f67f aebf 	bls.w	80065fc <_scanf_float+0x80>
 800687e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006882:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006886:	463a      	mov	r2, r7
 8006888:	4640      	mov	r0, r8
 800688a:	4798      	blx	r3
 800688c:	6923      	ldr	r3, [r4, #16]
 800688e:	3b01      	subs	r3, #1
 8006890:	6123      	str	r3, [r4, #16]
 8006892:	e7f1      	b.n	8006878 <_scanf_float+0x2fc>
 8006894:	46aa      	mov	sl, r5
 8006896:	9602      	str	r6, [sp, #8]
 8006898:	e7df      	b.n	800685a <_scanf_float+0x2de>
 800689a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800689e:	6923      	ldr	r3, [r4, #16]
 80068a0:	2965      	cmp	r1, #101	; 0x65
 80068a2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80068a6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80068aa:	6123      	str	r3, [r4, #16]
 80068ac:	d00c      	beq.n	80068c8 <_scanf_float+0x34c>
 80068ae:	2945      	cmp	r1, #69	; 0x45
 80068b0:	d00a      	beq.n	80068c8 <_scanf_float+0x34c>
 80068b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068b6:	463a      	mov	r2, r7
 80068b8:	4640      	mov	r0, r8
 80068ba:	4798      	blx	r3
 80068bc:	6923      	ldr	r3, [r4, #16]
 80068be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	1eb5      	subs	r5, r6, #2
 80068c6:	6123      	str	r3, [r4, #16]
 80068c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068cc:	463a      	mov	r2, r7
 80068ce:	4640      	mov	r0, r8
 80068d0:	4798      	blx	r3
 80068d2:	462e      	mov	r6, r5
 80068d4:	6825      	ldr	r5, [r4, #0]
 80068d6:	f015 0510 	ands.w	r5, r5, #16
 80068da:	d158      	bne.n	800698e <_scanf_float+0x412>
 80068dc:	7035      	strb	r5, [r6, #0]
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e8:	d11c      	bne.n	8006924 <_scanf_float+0x3a8>
 80068ea:	9b01      	ldr	r3, [sp, #4]
 80068ec:	454b      	cmp	r3, r9
 80068ee:	eba3 0209 	sub.w	r2, r3, r9
 80068f2:	d124      	bne.n	800693e <_scanf_float+0x3c2>
 80068f4:	2200      	movs	r2, #0
 80068f6:	4659      	mov	r1, fp
 80068f8:	4640      	mov	r0, r8
 80068fa:	f002 fc65 	bl	80091c8 <_strtod_r>
 80068fe:	9b03      	ldr	r3, [sp, #12]
 8006900:	6821      	ldr	r1, [r4, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f011 0f02 	tst.w	r1, #2
 8006908:	ec57 6b10 	vmov	r6, r7, d0
 800690c:	f103 0204 	add.w	r2, r3, #4
 8006910:	d020      	beq.n	8006954 <_scanf_float+0x3d8>
 8006912:	9903      	ldr	r1, [sp, #12]
 8006914:	600a      	str	r2, [r1, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	e9c3 6700 	strd	r6, r7, [r3]
 800691c:	68e3      	ldr	r3, [r4, #12]
 800691e:	3301      	adds	r3, #1
 8006920:	60e3      	str	r3, [r4, #12]
 8006922:	e66c      	b.n	80065fe <_scanf_float+0x82>
 8006924:	9b04      	ldr	r3, [sp, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0e4      	beq.n	80068f4 <_scanf_float+0x378>
 800692a:	9905      	ldr	r1, [sp, #20]
 800692c:	230a      	movs	r3, #10
 800692e:	462a      	mov	r2, r5
 8006930:	3101      	adds	r1, #1
 8006932:	4640      	mov	r0, r8
 8006934:	f002 fcd0 	bl	80092d8 <_strtol_r>
 8006938:	9b04      	ldr	r3, [sp, #16]
 800693a:	9e05      	ldr	r6, [sp, #20]
 800693c:	1ac2      	subs	r2, r0, r3
 800693e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006942:	429e      	cmp	r6, r3
 8006944:	bf28      	it	cs
 8006946:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800694a:	4912      	ldr	r1, [pc, #72]	; (8006994 <_scanf_float+0x418>)
 800694c:	4630      	mov	r0, r6
 800694e:	f000 f91b 	bl	8006b88 <siprintf>
 8006952:	e7cf      	b.n	80068f4 <_scanf_float+0x378>
 8006954:	f011 0f04 	tst.w	r1, #4
 8006958:	9903      	ldr	r1, [sp, #12]
 800695a:	600a      	str	r2, [r1, #0]
 800695c:	d1db      	bne.n	8006916 <_scanf_float+0x39a>
 800695e:	f8d3 8000 	ldr.w	r8, [r3]
 8006962:	ee10 2a10 	vmov	r2, s0
 8006966:	ee10 0a10 	vmov	r0, s0
 800696a:	463b      	mov	r3, r7
 800696c:	4639      	mov	r1, r7
 800696e:	f7fa f8ed 	bl	8000b4c <__aeabi_dcmpun>
 8006972:	b128      	cbz	r0, 8006980 <_scanf_float+0x404>
 8006974:	4808      	ldr	r0, [pc, #32]	; (8006998 <_scanf_float+0x41c>)
 8006976:	f000 f9eb 	bl	8006d50 <nanf>
 800697a:	ed88 0a00 	vstr	s0, [r8]
 800697e:	e7cd      	b.n	800691c <_scanf_float+0x3a0>
 8006980:	4630      	mov	r0, r6
 8006982:	4639      	mov	r1, r7
 8006984:	f7fa f940 	bl	8000c08 <__aeabi_d2f>
 8006988:	f8c8 0000 	str.w	r0, [r8]
 800698c:	e7c6      	b.n	800691c <_scanf_float+0x3a0>
 800698e:	2500      	movs	r5, #0
 8006990:	e635      	b.n	80065fe <_scanf_float+0x82>
 8006992:	bf00      	nop
 8006994:	0800a68c 	.word	0x0800a68c
 8006998:	0800aa1d 	.word	0x0800aa1d

0800699c <std>:
 800699c:	2300      	movs	r3, #0
 800699e:	b510      	push	{r4, lr}
 80069a0:	4604      	mov	r4, r0
 80069a2:	e9c0 3300 	strd	r3, r3, [r0]
 80069a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069aa:	6083      	str	r3, [r0, #8]
 80069ac:	8181      	strh	r1, [r0, #12]
 80069ae:	6643      	str	r3, [r0, #100]	; 0x64
 80069b0:	81c2      	strh	r2, [r0, #14]
 80069b2:	6183      	str	r3, [r0, #24]
 80069b4:	4619      	mov	r1, r3
 80069b6:	2208      	movs	r2, #8
 80069b8:	305c      	adds	r0, #92	; 0x5c
 80069ba:	f000 f948 	bl	8006c4e <memset>
 80069be:	4b0d      	ldr	r3, [pc, #52]	; (80069f4 <std+0x58>)
 80069c0:	6263      	str	r3, [r4, #36]	; 0x24
 80069c2:	4b0d      	ldr	r3, [pc, #52]	; (80069f8 <std+0x5c>)
 80069c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80069c6:	4b0d      	ldr	r3, [pc, #52]	; (80069fc <std+0x60>)
 80069c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069ca:	4b0d      	ldr	r3, [pc, #52]	; (8006a00 <std+0x64>)
 80069cc:	6323      	str	r3, [r4, #48]	; 0x30
 80069ce:	4b0d      	ldr	r3, [pc, #52]	; (8006a04 <std+0x68>)
 80069d0:	6224      	str	r4, [r4, #32]
 80069d2:	429c      	cmp	r4, r3
 80069d4:	d006      	beq.n	80069e4 <std+0x48>
 80069d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80069da:	4294      	cmp	r4, r2
 80069dc:	d002      	beq.n	80069e4 <std+0x48>
 80069de:	33d0      	adds	r3, #208	; 0xd0
 80069e0:	429c      	cmp	r4, r3
 80069e2:	d105      	bne.n	80069f0 <std+0x54>
 80069e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069ec:	f000 b9ac 	b.w	8006d48 <__retarget_lock_init_recursive>
 80069f0:	bd10      	pop	{r4, pc}
 80069f2:	bf00      	nop
 80069f4:	08006bc9 	.word	0x08006bc9
 80069f8:	08006beb 	.word	0x08006beb
 80069fc:	08006c23 	.word	0x08006c23
 8006a00:	08006c47 	.word	0x08006c47
 8006a04:	20000a48 	.word	0x20000a48

08006a08 <stdio_exit_handler>:
 8006a08:	4a02      	ldr	r2, [pc, #8]	; (8006a14 <stdio_exit_handler+0xc>)
 8006a0a:	4903      	ldr	r1, [pc, #12]	; (8006a18 <stdio_exit_handler+0x10>)
 8006a0c:	4803      	ldr	r0, [pc, #12]	; (8006a1c <stdio_exit_handler+0x14>)
 8006a0e:	f000 b869 	b.w	8006ae4 <_fwalk_sglue>
 8006a12:	bf00      	nop
 8006a14:	2000000c 	.word	0x2000000c
 8006a18:	08009699 	.word	0x08009699
 8006a1c:	20000018 	.word	0x20000018

08006a20 <cleanup_stdio>:
 8006a20:	6841      	ldr	r1, [r0, #4]
 8006a22:	4b0c      	ldr	r3, [pc, #48]	; (8006a54 <cleanup_stdio+0x34>)
 8006a24:	4299      	cmp	r1, r3
 8006a26:	b510      	push	{r4, lr}
 8006a28:	4604      	mov	r4, r0
 8006a2a:	d001      	beq.n	8006a30 <cleanup_stdio+0x10>
 8006a2c:	f002 fe34 	bl	8009698 <_fflush_r>
 8006a30:	68a1      	ldr	r1, [r4, #8]
 8006a32:	4b09      	ldr	r3, [pc, #36]	; (8006a58 <cleanup_stdio+0x38>)
 8006a34:	4299      	cmp	r1, r3
 8006a36:	d002      	beq.n	8006a3e <cleanup_stdio+0x1e>
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f002 fe2d 	bl	8009698 <_fflush_r>
 8006a3e:	68e1      	ldr	r1, [r4, #12]
 8006a40:	4b06      	ldr	r3, [pc, #24]	; (8006a5c <cleanup_stdio+0x3c>)
 8006a42:	4299      	cmp	r1, r3
 8006a44:	d004      	beq.n	8006a50 <cleanup_stdio+0x30>
 8006a46:	4620      	mov	r0, r4
 8006a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a4c:	f002 be24 	b.w	8009698 <_fflush_r>
 8006a50:	bd10      	pop	{r4, pc}
 8006a52:	bf00      	nop
 8006a54:	20000a48 	.word	0x20000a48
 8006a58:	20000ab0 	.word	0x20000ab0
 8006a5c:	20000b18 	.word	0x20000b18

08006a60 <global_stdio_init.part.0>:
 8006a60:	b510      	push	{r4, lr}
 8006a62:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <global_stdio_init.part.0+0x30>)
 8006a64:	4c0b      	ldr	r4, [pc, #44]	; (8006a94 <global_stdio_init.part.0+0x34>)
 8006a66:	4a0c      	ldr	r2, [pc, #48]	; (8006a98 <global_stdio_init.part.0+0x38>)
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	2104      	movs	r1, #4
 8006a70:	f7ff ff94 	bl	800699c <std>
 8006a74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006a78:	2201      	movs	r2, #1
 8006a7a:	2109      	movs	r1, #9
 8006a7c:	f7ff ff8e 	bl	800699c <std>
 8006a80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006a84:	2202      	movs	r2, #2
 8006a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a8a:	2112      	movs	r1, #18
 8006a8c:	f7ff bf86 	b.w	800699c <std>
 8006a90:	20000b80 	.word	0x20000b80
 8006a94:	20000a48 	.word	0x20000a48
 8006a98:	08006a09 	.word	0x08006a09

08006a9c <__sfp_lock_acquire>:
 8006a9c:	4801      	ldr	r0, [pc, #4]	; (8006aa4 <__sfp_lock_acquire+0x8>)
 8006a9e:	f000 b954 	b.w	8006d4a <__retarget_lock_acquire_recursive>
 8006aa2:	bf00      	nop
 8006aa4:	20000b89 	.word	0x20000b89

08006aa8 <__sfp_lock_release>:
 8006aa8:	4801      	ldr	r0, [pc, #4]	; (8006ab0 <__sfp_lock_release+0x8>)
 8006aaa:	f000 b94f 	b.w	8006d4c <__retarget_lock_release_recursive>
 8006aae:	bf00      	nop
 8006ab0:	20000b89 	.word	0x20000b89

08006ab4 <__sinit>:
 8006ab4:	b510      	push	{r4, lr}
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	f7ff fff0 	bl	8006a9c <__sfp_lock_acquire>
 8006abc:	6a23      	ldr	r3, [r4, #32]
 8006abe:	b11b      	cbz	r3, 8006ac8 <__sinit+0x14>
 8006ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ac4:	f7ff bff0 	b.w	8006aa8 <__sfp_lock_release>
 8006ac8:	4b04      	ldr	r3, [pc, #16]	; (8006adc <__sinit+0x28>)
 8006aca:	6223      	str	r3, [r4, #32]
 8006acc:	4b04      	ldr	r3, [pc, #16]	; (8006ae0 <__sinit+0x2c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1f5      	bne.n	8006ac0 <__sinit+0xc>
 8006ad4:	f7ff ffc4 	bl	8006a60 <global_stdio_init.part.0>
 8006ad8:	e7f2      	b.n	8006ac0 <__sinit+0xc>
 8006ada:	bf00      	nop
 8006adc:	08006a21 	.word	0x08006a21
 8006ae0:	20000b80 	.word	0x20000b80

08006ae4 <_fwalk_sglue>:
 8006ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ae8:	4607      	mov	r7, r0
 8006aea:	4688      	mov	r8, r1
 8006aec:	4614      	mov	r4, r2
 8006aee:	2600      	movs	r6, #0
 8006af0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006af4:	f1b9 0901 	subs.w	r9, r9, #1
 8006af8:	d505      	bpl.n	8006b06 <_fwalk_sglue+0x22>
 8006afa:	6824      	ldr	r4, [r4, #0]
 8006afc:	2c00      	cmp	r4, #0
 8006afe:	d1f7      	bne.n	8006af0 <_fwalk_sglue+0xc>
 8006b00:	4630      	mov	r0, r6
 8006b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b06:	89ab      	ldrh	r3, [r5, #12]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d907      	bls.n	8006b1c <_fwalk_sglue+0x38>
 8006b0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b10:	3301      	adds	r3, #1
 8006b12:	d003      	beq.n	8006b1c <_fwalk_sglue+0x38>
 8006b14:	4629      	mov	r1, r5
 8006b16:	4638      	mov	r0, r7
 8006b18:	47c0      	blx	r8
 8006b1a:	4306      	orrs	r6, r0
 8006b1c:	3568      	adds	r5, #104	; 0x68
 8006b1e:	e7e9      	b.n	8006af4 <_fwalk_sglue+0x10>

08006b20 <sniprintf>:
 8006b20:	b40c      	push	{r2, r3}
 8006b22:	b530      	push	{r4, r5, lr}
 8006b24:	4b17      	ldr	r3, [pc, #92]	; (8006b84 <sniprintf+0x64>)
 8006b26:	1e0c      	subs	r4, r1, #0
 8006b28:	681d      	ldr	r5, [r3, #0]
 8006b2a:	b09d      	sub	sp, #116	; 0x74
 8006b2c:	da08      	bge.n	8006b40 <sniprintf+0x20>
 8006b2e:	238b      	movs	r3, #139	; 0x8b
 8006b30:	602b      	str	r3, [r5, #0]
 8006b32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b36:	b01d      	add	sp, #116	; 0x74
 8006b38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b3c:	b002      	add	sp, #8
 8006b3e:	4770      	bx	lr
 8006b40:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006b44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006b48:	bf14      	ite	ne
 8006b4a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006b4e:	4623      	moveq	r3, r4
 8006b50:	9304      	str	r3, [sp, #16]
 8006b52:	9307      	str	r3, [sp, #28]
 8006b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b58:	9002      	str	r0, [sp, #8]
 8006b5a:	9006      	str	r0, [sp, #24]
 8006b5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006b60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b62:	ab21      	add	r3, sp, #132	; 0x84
 8006b64:	a902      	add	r1, sp, #8
 8006b66:	4628      	mov	r0, r5
 8006b68:	9301      	str	r3, [sp, #4]
 8006b6a:	f002 fc11 	bl	8009390 <_svfiprintf_r>
 8006b6e:	1c43      	adds	r3, r0, #1
 8006b70:	bfbc      	itt	lt
 8006b72:	238b      	movlt	r3, #139	; 0x8b
 8006b74:	602b      	strlt	r3, [r5, #0]
 8006b76:	2c00      	cmp	r4, #0
 8006b78:	d0dd      	beq.n	8006b36 <sniprintf+0x16>
 8006b7a:	9b02      	ldr	r3, [sp, #8]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	701a      	strb	r2, [r3, #0]
 8006b80:	e7d9      	b.n	8006b36 <sniprintf+0x16>
 8006b82:	bf00      	nop
 8006b84:	20000064 	.word	0x20000064

08006b88 <siprintf>:
 8006b88:	b40e      	push	{r1, r2, r3}
 8006b8a:	b500      	push	{lr}
 8006b8c:	b09c      	sub	sp, #112	; 0x70
 8006b8e:	ab1d      	add	r3, sp, #116	; 0x74
 8006b90:	9002      	str	r0, [sp, #8]
 8006b92:	9006      	str	r0, [sp, #24]
 8006b94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b98:	4809      	ldr	r0, [pc, #36]	; (8006bc0 <siprintf+0x38>)
 8006b9a:	9107      	str	r1, [sp, #28]
 8006b9c:	9104      	str	r1, [sp, #16]
 8006b9e:	4909      	ldr	r1, [pc, #36]	; (8006bc4 <siprintf+0x3c>)
 8006ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ba4:	9105      	str	r1, [sp, #20]
 8006ba6:	6800      	ldr	r0, [r0, #0]
 8006ba8:	9301      	str	r3, [sp, #4]
 8006baa:	a902      	add	r1, sp, #8
 8006bac:	f002 fbf0 	bl	8009390 <_svfiprintf_r>
 8006bb0:	9b02      	ldr	r3, [sp, #8]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	701a      	strb	r2, [r3, #0]
 8006bb6:	b01c      	add	sp, #112	; 0x70
 8006bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bbc:	b003      	add	sp, #12
 8006bbe:	4770      	bx	lr
 8006bc0:	20000064 	.word	0x20000064
 8006bc4:	ffff0208 	.word	0xffff0208

08006bc8 <__sread>:
 8006bc8:	b510      	push	{r4, lr}
 8006bca:	460c      	mov	r4, r1
 8006bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd0:	f000 f86c 	bl	8006cac <_read_r>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	bfab      	itete	ge
 8006bd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bda:	89a3      	ldrhlt	r3, [r4, #12]
 8006bdc:	181b      	addge	r3, r3, r0
 8006bde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006be2:	bfac      	ite	ge
 8006be4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006be6:	81a3      	strhlt	r3, [r4, #12]
 8006be8:	bd10      	pop	{r4, pc}

08006bea <__swrite>:
 8006bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bee:	461f      	mov	r7, r3
 8006bf0:	898b      	ldrh	r3, [r1, #12]
 8006bf2:	05db      	lsls	r3, r3, #23
 8006bf4:	4605      	mov	r5, r0
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	4616      	mov	r6, r2
 8006bfa:	d505      	bpl.n	8006c08 <__swrite+0x1e>
 8006bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c00:	2302      	movs	r3, #2
 8006c02:	2200      	movs	r2, #0
 8006c04:	f000 f840 	bl	8006c88 <_lseek_r>
 8006c08:	89a3      	ldrh	r3, [r4, #12]
 8006c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c12:	81a3      	strh	r3, [r4, #12]
 8006c14:	4632      	mov	r2, r6
 8006c16:	463b      	mov	r3, r7
 8006c18:	4628      	mov	r0, r5
 8006c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c1e:	f000 b857 	b.w	8006cd0 <_write_r>

08006c22 <__sseek>:
 8006c22:	b510      	push	{r4, lr}
 8006c24:	460c      	mov	r4, r1
 8006c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c2a:	f000 f82d 	bl	8006c88 <_lseek_r>
 8006c2e:	1c43      	adds	r3, r0, #1
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	bf15      	itete	ne
 8006c34:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c3e:	81a3      	strheq	r3, [r4, #12]
 8006c40:	bf18      	it	ne
 8006c42:	81a3      	strhne	r3, [r4, #12]
 8006c44:	bd10      	pop	{r4, pc}

08006c46 <__sclose>:
 8006c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c4a:	f000 b80d 	b.w	8006c68 <_close_r>

08006c4e <memset>:
 8006c4e:	4402      	add	r2, r0
 8006c50:	4603      	mov	r3, r0
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d100      	bne.n	8006c58 <memset+0xa>
 8006c56:	4770      	bx	lr
 8006c58:	f803 1b01 	strb.w	r1, [r3], #1
 8006c5c:	e7f9      	b.n	8006c52 <memset+0x4>
	...

08006c60 <_localeconv_r>:
 8006c60:	4800      	ldr	r0, [pc, #0]	; (8006c64 <_localeconv_r+0x4>)
 8006c62:	4770      	bx	lr
 8006c64:	20000158 	.word	0x20000158

08006c68 <_close_r>:
 8006c68:	b538      	push	{r3, r4, r5, lr}
 8006c6a:	4d06      	ldr	r5, [pc, #24]	; (8006c84 <_close_r+0x1c>)
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	4604      	mov	r4, r0
 8006c70:	4608      	mov	r0, r1
 8006c72:	602b      	str	r3, [r5, #0]
 8006c74:	f7fa fe19 	bl	80018aa <_close>
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	d102      	bne.n	8006c82 <_close_r+0x1a>
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	b103      	cbz	r3, 8006c82 <_close_r+0x1a>
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	bd38      	pop	{r3, r4, r5, pc}
 8006c84:	20000b84 	.word	0x20000b84

08006c88 <_lseek_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4d07      	ldr	r5, [pc, #28]	; (8006ca8 <_lseek_r+0x20>)
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	4608      	mov	r0, r1
 8006c90:	4611      	mov	r1, r2
 8006c92:	2200      	movs	r2, #0
 8006c94:	602a      	str	r2, [r5, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	f7fa fe2e 	bl	80018f8 <_lseek>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d102      	bne.n	8006ca6 <_lseek_r+0x1e>
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	b103      	cbz	r3, 8006ca6 <_lseek_r+0x1e>
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	20000b84 	.word	0x20000b84

08006cac <_read_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	4d07      	ldr	r5, [pc, #28]	; (8006ccc <_read_r+0x20>)
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	4608      	mov	r0, r1
 8006cb4:	4611      	mov	r1, r2
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	602a      	str	r2, [r5, #0]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	f7fa fdbc 	bl	8001838 <_read>
 8006cc0:	1c43      	adds	r3, r0, #1
 8006cc2:	d102      	bne.n	8006cca <_read_r+0x1e>
 8006cc4:	682b      	ldr	r3, [r5, #0]
 8006cc6:	b103      	cbz	r3, 8006cca <_read_r+0x1e>
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	bd38      	pop	{r3, r4, r5, pc}
 8006ccc:	20000b84 	.word	0x20000b84

08006cd0 <_write_r>:
 8006cd0:	b538      	push	{r3, r4, r5, lr}
 8006cd2:	4d07      	ldr	r5, [pc, #28]	; (8006cf0 <_write_r+0x20>)
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	4608      	mov	r0, r1
 8006cd8:	4611      	mov	r1, r2
 8006cda:	2200      	movs	r2, #0
 8006cdc:	602a      	str	r2, [r5, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f7fa fdc7 	bl	8001872 <_write>
 8006ce4:	1c43      	adds	r3, r0, #1
 8006ce6:	d102      	bne.n	8006cee <_write_r+0x1e>
 8006ce8:	682b      	ldr	r3, [r5, #0]
 8006cea:	b103      	cbz	r3, 8006cee <_write_r+0x1e>
 8006cec:	6023      	str	r3, [r4, #0]
 8006cee:	bd38      	pop	{r3, r4, r5, pc}
 8006cf0:	20000b84 	.word	0x20000b84

08006cf4 <__errno>:
 8006cf4:	4b01      	ldr	r3, [pc, #4]	; (8006cfc <__errno+0x8>)
 8006cf6:	6818      	ldr	r0, [r3, #0]
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	20000064 	.word	0x20000064

08006d00 <__libc_init_array>:
 8006d00:	b570      	push	{r4, r5, r6, lr}
 8006d02:	4d0d      	ldr	r5, [pc, #52]	; (8006d38 <__libc_init_array+0x38>)
 8006d04:	4c0d      	ldr	r4, [pc, #52]	; (8006d3c <__libc_init_array+0x3c>)
 8006d06:	1b64      	subs	r4, r4, r5
 8006d08:	10a4      	asrs	r4, r4, #2
 8006d0a:	2600      	movs	r6, #0
 8006d0c:	42a6      	cmp	r6, r4
 8006d0e:	d109      	bne.n	8006d24 <__libc_init_array+0x24>
 8006d10:	4d0b      	ldr	r5, [pc, #44]	; (8006d40 <__libc_init_array+0x40>)
 8006d12:	4c0c      	ldr	r4, [pc, #48]	; (8006d44 <__libc_init_array+0x44>)
 8006d14:	f003 fbd8 	bl	800a4c8 <_init>
 8006d18:	1b64      	subs	r4, r4, r5
 8006d1a:	10a4      	asrs	r4, r4, #2
 8006d1c:	2600      	movs	r6, #0
 8006d1e:	42a6      	cmp	r6, r4
 8006d20:	d105      	bne.n	8006d2e <__libc_init_array+0x2e>
 8006d22:	bd70      	pop	{r4, r5, r6, pc}
 8006d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d28:	4798      	blx	r3
 8006d2a:	3601      	adds	r6, #1
 8006d2c:	e7ee      	b.n	8006d0c <__libc_init_array+0xc>
 8006d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d32:	4798      	blx	r3
 8006d34:	3601      	adds	r6, #1
 8006d36:	e7f2      	b.n	8006d1e <__libc_init_array+0x1e>
 8006d38:	0800aa88 	.word	0x0800aa88
 8006d3c:	0800aa88 	.word	0x0800aa88
 8006d40:	0800aa88 	.word	0x0800aa88
 8006d44:	0800aa8c 	.word	0x0800aa8c

08006d48 <__retarget_lock_init_recursive>:
 8006d48:	4770      	bx	lr

08006d4a <__retarget_lock_acquire_recursive>:
 8006d4a:	4770      	bx	lr

08006d4c <__retarget_lock_release_recursive>:
 8006d4c:	4770      	bx	lr
	...

08006d50 <nanf>:
 8006d50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006d58 <nanf+0x8>
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	7fc00000 	.word	0x7fc00000

08006d5c <quorem>:
 8006d5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d60:	6903      	ldr	r3, [r0, #16]
 8006d62:	690c      	ldr	r4, [r1, #16]
 8006d64:	42a3      	cmp	r3, r4
 8006d66:	4607      	mov	r7, r0
 8006d68:	db7e      	blt.n	8006e68 <quorem+0x10c>
 8006d6a:	3c01      	subs	r4, #1
 8006d6c:	f101 0814 	add.w	r8, r1, #20
 8006d70:	f100 0514 	add.w	r5, r0, #20
 8006d74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d78:	9301      	str	r3, [sp, #4]
 8006d7a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d82:	3301      	adds	r3, #1
 8006d84:	429a      	cmp	r2, r3
 8006d86:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d8e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d92:	d331      	bcc.n	8006df8 <quorem+0x9c>
 8006d94:	f04f 0e00 	mov.w	lr, #0
 8006d98:	4640      	mov	r0, r8
 8006d9a:	46ac      	mov	ip, r5
 8006d9c:	46f2      	mov	sl, lr
 8006d9e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006da2:	b293      	uxth	r3, r2
 8006da4:	fb06 e303 	mla	r3, r6, r3, lr
 8006da8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006dac:	0c1a      	lsrs	r2, r3, #16
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	ebaa 0303 	sub.w	r3, sl, r3
 8006db4:	f8dc a000 	ldr.w	sl, [ip]
 8006db8:	fa13 f38a 	uxtah	r3, r3, sl
 8006dbc:	fb06 220e 	mla	r2, r6, lr, r2
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	9b00      	ldr	r3, [sp, #0]
 8006dc4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006dc8:	b292      	uxth	r2, r2
 8006dca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006dce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006dd2:	f8bd 3000 	ldrh.w	r3, [sp]
 8006dd6:	4581      	cmp	r9, r0
 8006dd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ddc:	f84c 3b04 	str.w	r3, [ip], #4
 8006de0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006de4:	d2db      	bcs.n	8006d9e <quorem+0x42>
 8006de6:	f855 300b 	ldr.w	r3, [r5, fp]
 8006dea:	b92b      	cbnz	r3, 8006df8 <quorem+0x9c>
 8006dec:	9b01      	ldr	r3, [sp, #4]
 8006dee:	3b04      	subs	r3, #4
 8006df0:	429d      	cmp	r5, r3
 8006df2:	461a      	mov	r2, r3
 8006df4:	d32c      	bcc.n	8006e50 <quorem+0xf4>
 8006df6:	613c      	str	r4, [r7, #16]
 8006df8:	4638      	mov	r0, r7
 8006dfa:	f001 f9f1 	bl	80081e0 <__mcmp>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	db22      	blt.n	8006e48 <quorem+0xec>
 8006e02:	3601      	adds	r6, #1
 8006e04:	4629      	mov	r1, r5
 8006e06:	2000      	movs	r0, #0
 8006e08:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e0c:	f8d1 c000 	ldr.w	ip, [r1]
 8006e10:	b293      	uxth	r3, r2
 8006e12:	1ac3      	subs	r3, r0, r3
 8006e14:	0c12      	lsrs	r2, r2, #16
 8006e16:	fa13 f38c 	uxtah	r3, r3, ip
 8006e1a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006e1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e28:	45c1      	cmp	r9, r8
 8006e2a:	f841 3b04 	str.w	r3, [r1], #4
 8006e2e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e32:	d2e9      	bcs.n	8006e08 <quorem+0xac>
 8006e34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e3c:	b922      	cbnz	r2, 8006e48 <quorem+0xec>
 8006e3e:	3b04      	subs	r3, #4
 8006e40:	429d      	cmp	r5, r3
 8006e42:	461a      	mov	r2, r3
 8006e44:	d30a      	bcc.n	8006e5c <quorem+0x100>
 8006e46:	613c      	str	r4, [r7, #16]
 8006e48:	4630      	mov	r0, r6
 8006e4a:	b003      	add	sp, #12
 8006e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e50:	6812      	ldr	r2, [r2, #0]
 8006e52:	3b04      	subs	r3, #4
 8006e54:	2a00      	cmp	r2, #0
 8006e56:	d1ce      	bne.n	8006df6 <quorem+0x9a>
 8006e58:	3c01      	subs	r4, #1
 8006e5a:	e7c9      	b.n	8006df0 <quorem+0x94>
 8006e5c:	6812      	ldr	r2, [r2, #0]
 8006e5e:	3b04      	subs	r3, #4
 8006e60:	2a00      	cmp	r2, #0
 8006e62:	d1f0      	bne.n	8006e46 <quorem+0xea>
 8006e64:	3c01      	subs	r4, #1
 8006e66:	e7eb      	b.n	8006e40 <quorem+0xe4>
 8006e68:	2000      	movs	r0, #0
 8006e6a:	e7ee      	b.n	8006e4a <quorem+0xee>
 8006e6c:	0000      	movs	r0, r0
	...

08006e70 <_dtoa_r>:
 8006e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e74:	ed2d 8b04 	vpush	{d8-d9}
 8006e78:	69c5      	ldr	r5, [r0, #28]
 8006e7a:	b093      	sub	sp, #76	; 0x4c
 8006e7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006e80:	ec57 6b10 	vmov	r6, r7, d0
 8006e84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006e88:	9107      	str	r1, [sp, #28]
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	920a      	str	r2, [sp, #40]	; 0x28
 8006e8e:	930d      	str	r3, [sp, #52]	; 0x34
 8006e90:	b975      	cbnz	r5, 8006eb0 <_dtoa_r+0x40>
 8006e92:	2010      	movs	r0, #16
 8006e94:	f000 fe2a 	bl	8007aec <malloc>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	61e0      	str	r0, [r4, #28]
 8006e9c:	b920      	cbnz	r0, 8006ea8 <_dtoa_r+0x38>
 8006e9e:	4bae      	ldr	r3, [pc, #696]	; (8007158 <_dtoa_r+0x2e8>)
 8006ea0:	21ef      	movs	r1, #239	; 0xef
 8006ea2:	48ae      	ldr	r0, [pc, #696]	; (800715c <_dtoa_r+0x2ec>)
 8006ea4:	f002 fc74 	bl	8009790 <__assert_func>
 8006ea8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006eac:	6005      	str	r5, [r0, #0]
 8006eae:	60c5      	str	r5, [r0, #12]
 8006eb0:	69e3      	ldr	r3, [r4, #28]
 8006eb2:	6819      	ldr	r1, [r3, #0]
 8006eb4:	b151      	cbz	r1, 8006ecc <_dtoa_r+0x5c>
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	604a      	str	r2, [r1, #4]
 8006eba:	2301      	movs	r3, #1
 8006ebc:	4093      	lsls	r3, r2
 8006ebe:	608b      	str	r3, [r1, #8]
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f000 ff07 	bl	8007cd4 <_Bfree>
 8006ec6:	69e3      	ldr	r3, [r4, #28]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	1e3b      	subs	r3, r7, #0
 8006ece:	bfbb      	ittet	lt
 8006ed0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ed4:	9303      	strlt	r3, [sp, #12]
 8006ed6:	2300      	movge	r3, #0
 8006ed8:	2201      	movlt	r2, #1
 8006eda:	bfac      	ite	ge
 8006edc:	f8c8 3000 	strge.w	r3, [r8]
 8006ee0:	f8c8 2000 	strlt.w	r2, [r8]
 8006ee4:	4b9e      	ldr	r3, [pc, #632]	; (8007160 <_dtoa_r+0x2f0>)
 8006ee6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006eea:	ea33 0308 	bics.w	r3, r3, r8
 8006eee:	d11b      	bne.n	8006f28 <_dtoa_r+0xb8>
 8006ef0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ef2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006efc:	4333      	orrs	r3, r6
 8006efe:	f000 8593 	beq.w	8007a28 <_dtoa_r+0xbb8>
 8006f02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f04:	b963      	cbnz	r3, 8006f20 <_dtoa_r+0xb0>
 8006f06:	4b97      	ldr	r3, [pc, #604]	; (8007164 <_dtoa_r+0x2f4>)
 8006f08:	e027      	b.n	8006f5a <_dtoa_r+0xea>
 8006f0a:	4b97      	ldr	r3, [pc, #604]	; (8007168 <_dtoa_r+0x2f8>)
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	3308      	adds	r3, #8
 8006f10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	9800      	ldr	r0, [sp, #0]
 8006f16:	b013      	add	sp, #76	; 0x4c
 8006f18:	ecbd 8b04 	vpop	{d8-d9}
 8006f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f20:	4b90      	ldr	r3, [pc, #576]	; (8007164 <_dtoa_r+0x2f4>)
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	3303      	adds	r3, #3
 8006f26:	e7f3      	b.n	8006f10 <_dtoa_r+0xa0>
 8006f28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	ec51 0b17 	vmov	r0, r1, d7
 8006f32:	eeb0 8a47 	vmov.f32	s16, s14
 8006f36:	eef0 8a67 	vmov.f32	s17, s15
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	f7f9 fdd4 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f40:	4681      	mov	r9, r0
 8006f42:	b160      	cbz	r0, 8006f5e <_dtoa_r+0xee>
 8006f44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f46:	2301      	movs	r3, #1
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 8568 	beq.w	8007a22 <_dtoa_r+0xbb2>
 8006f52:	4b86      	ldr	r3, [pc, #536]	; (800716c <_dtoa_r+0x2fc>)
 8006f54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	e7da      	b.n	8006f14 <_dtoa_r+0xa4>
 8006f5e:	aa10      	add	r2, sp, #64	; 0x40
 8006f60:	a911      	add	r1, sp, #68	; 0x44
 8006f62:	4620      	mov	r0, r4
 8006f64:	eeb0 0a48 	vmov.f32	s0, s16
 8006f68:	eef0 0a68 	vmov.f32	s1, s17
 8006f6c:	f001 fa4e 	bl	800840c <__d2b>
 8006f70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006f74:	4682      	mov	sl, r0
 8006f76:	2d00      	cmp	r5, #0
 8006f78:	d07f      	beq.n	800707a <_dtoa_r+0x20a>
 8006f7a:	ee18 3a90 	vmov	r3, s17
 8006f7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f82:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006f86:	ec51 0b18 	vmov	r0, r1, d8
 8006f8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006f8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006f92:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006f96:	4619      	mov	r1, r3
 8006f98:	2200      	movs	r2, #0
 8006f9a:	4b75      	ldr	r3, [pc, #468]	; (8007170 <_dtoa_r+0x300>)
 8006f9c:	f7f9 f984 	bl	80002a8 <__aeabi_dsub>
 8006fa0:	a367      	add	r3, pc, #412	; (adr r3, 8007140 <_dtoa_r+0x2d0>)
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	f7f9 fb37 	bl	8000618 <__aeabi_dmul>
 8006faa:	a367      	add	r3, pc, #412	; (adr r3, 8007148 <_dtoa_r+0x2d8>)
 8006fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb0:	f7f9 f97c 	bl	80002ac <__adddf3>
 8006fb4:	4606      	mov	r6, r0
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	460f      	mov	r7, r1
 8006fba:	f7f9 fac3 	bl	8000544 <__aeabi_i2d>
 8006fbe:	a364      	add	r3, pc, #400	; (adr r3, 8007150 <_dtoa_r+0x2e0>)
 8006fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc4:	f7f9 fb28 	bl	8000618 <__aeabi_dmul>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	4630      	mov	r0, r6
 8006fce:	4639      	mov	r1, r7
 8006fd0:	f7f9 f96c 	bl	80002ac <__adddf3>
 8006fd4:	4606      	mov	r6, r0
 8006fd6:	460f      	mov	r7, r1
 8006fd8:	f7f9 fdce 	bl	8000b78 <__aeabi_d2iz>
 8006fdc:	2200      	movs	r2, #0
 8006fde:	4683      	mov	fp, r0
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	4639      	mov	r1, r7
 8006fe6:	f7f9 fd89 	bl	8000afc <__aeabi_dcmplt>
 8006fea:	b148      	cbz	r0, 8007000 <_dtoa_r+0x190>
 8006fec:	4658      	mov	r0, fp
 8006fee:	f7f9 faa9 	bl	8000544 <__aeabi_i2d>
 8006ff2:	4632      	mov	r2, r6
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	f7f9 fd77 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ffa:	b908      	cbnz	r0, 8007000 <_dtoa_r+0x190>
 8006ffc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007000:	f1bb 0f16 	cmp.w	fp, #22
 8007004:	d857      	bhi.n	80070b6 <_dtoa_r+0x246>
 8007006:	4b5b      	ldr	r3, [pc, #364]	; (8007174 <_dtoa_r+0x304>)
 8007008:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800700c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007010:	ec51 0b18 	vmov	r0, r1, d8
 8007014:	f7f9 fd72 	bl	8000afc <__aeabi_dcmplt>
 8007018:	2800      	cmp	r0, #0
 800701a:	d04e      	beq.n	80070ba <_dtoa_r+0x24a>
 800701c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007020:	2300      	movs	r3, #0
 8007022:	930c      	str	r3, [sp, #48]	; 0x30
 8007024:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007026:	1b5b      	subs	r3, r3, r5
 8007028:	1e5a      	subs	r2, r3, #1
 800702a:	bf45      	ittet	mi
 800702c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007030:	9305      	strmi	r3, [sp, #20]
 8007032:	2300      	movpl	r3, #0
 8007034:	2300      	movmi	r3, #0
 8007036:	9206      	str	r2, [sp, #24]
 8007038:	bf54      	ite	pl
 800703a:	9305      	strpl	r3, [sp, #20]
 800703c:	9306      	strmi	r3, [sp, #24]
 800703e:	f1bb 0f00 	cmp.w	fp, #0
 8007042:	db3c      	blt.n	80070be <_dtoa_r+0x24e>
 8007044:	9b06      	ldr	r3, [sp, #24]
 8007046:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800704a:	445b      	add	r3, fp
 800704c:	9306      	str	r3, [sp, #24]
 800704e:	2300      	movs	r3, #0
 8007050:	9308      	str	r3, [sp, #32]
 8007052:	9b07      	ldr	r3, [sp, #28]
 8007054:	2b09      	cmp	r3, #9
 8007056:	d868      	bhi.n	800712a <_dtoa_r+0x2ba>
 8007058:	2b05      	cmp	r3, #5
 800705a:	bfc4      	itt	gt
 800705c:	3b04      	subgt	r3, #4
 800705e:	9307      	strgt	r3, [sp, #28]
 8007060:	9b07      	ldr	r3, [sp, #28]
 8007062:	f1a3 0302 	sub.w	r3, r3, #2
 8007066:	bfcc      	ite	gt
 8007068:	2500      	movgt	r5, #0
 800706a:	2501      	movle	r5, #1
 800706c:	2b03      	cmp	r3, #3
 800706e:	f200 8085 	bhi.w	800717c <_dtoa_r+0x30c>
 8007072:	e8df f003 	tbb	[pc, r3]
 8007076:	3b2e      	.short	0x3b2e
 8007078:	5839      	.short	0x5839
 800707a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800707e:	441d      	add	r5, r3
 8007080:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007084:	2b20      	cmp	r3, #32
 8007086:	bfc1      	itttt	gt
 8007088:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800708c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007090:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007094:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007098:	bfd6      	itet	le
 800709a:	f1c3 0320 	rsble	r3, r3, #32
 800709e:	ea48 0003 	orrgt.w	r0, r8, r3
 80070a2:	fa06 f003 	lslle.w	r0, r6, r3
 80070a6:	f7f9 fa3d 	bl	8000524 <__aeabi_ui2d>
 80070aa:	2201      	movs	r2, #1
 80070ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80070b0:	3d01      	subs	r5, #1
 80070b2:	920e      	str	r2, [sp, #56]	; 0x38
 80070b4:	e76f      	b.n	8006f96 <_dtoa_r+0x126>
 80070b6:	2301      	movs	r3, #1
 80070b8:	e7b3      	b.n	8007022 <_dtoa_r+0x1b2>
 80070ba:	900c      	str	r0, [sp, #48]	; 0x30
 80070bc:	e7b2      	b.n	8007024 <_dtoa_r+0x1b4>
 80070be:	9b05      	ldr	r3, [sp, #20]
 80070c0:	eba3 030b 	sub.w	r3, r3, fp
 80070c4:	9305      	str	r3, [sp, #20]
 80070c6:	f1cb 0300 	rsb	r3, fp, #0
 80070ca:	9308      	str	r3, [sp, #32]
 80070cc:	2300      	movs	r3, #0
 80070ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80070d0:	e7bf      	b.n	8007052 <_dtoa_r+0x1e2>
 80070d2:	2300      	movs	r3, #0
 80070d4:	9309      	str	r3, [sp, #36]	; 0x24
 80070d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070d8:	2b00      	cmp	r3, #0
 80070da:	dc52      	bgt.n	8007182 <_dtoa_r+0x312>
 80070dc:	2301      	movs	r3, #1
 80070de:	9301      	str	r3, [sp, #4]
 80070e0:	9304      	str	r3, [sp, #16]
 80070e2:	461a      	mov	r2, r3
 80070e4:	920a      	str	r2, [sp, #40]	; 0x28
 80070e6:	e00b      	b.n	8007100 <_dtoa_r+0x290>
 80070e8:	2301      	movs	r3, #1
 80070ea:	e7f3      	b.n	80070d4 <_dtoa_r+0x264>
 80070ec:	2300      	movs	r3, #0
 80070ee:	9309      	str	r3, [sp, #36]	; 0x24
 80070f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f2:	445b      	add	r3, fp
 80070f4:	9301      	str	r3, [sp, #4]
 80070f6:	3301      	adds	r3, #1
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	9304      	str	r3, [sp, #16]
 80070fc:	bfb8      	it	lt
 80070fe:	2301      	movlt	r3, #1
 8007100:	69e0      	ldr	r0, [r4, #28]
 8007102:	2100      	movs	r1, #0
 8007104:	2204      	movs	r2, #4
 8007106:	f102 0614 	add.w	r6, r2, #20
 800710a:	429e      	cmp	r6, r3
 800710c:	d93d      	bls.n	800718a <_dtoa_r+0x31a>
 800710e:	6041      	str	r1, [r0, #4]
 8007110:	4620      	mov	r0, r4
 8007112:	f000 fd9f 	bl	8007c54 <_Balloc>
 8007116:	9000      	str	r0, [sp, #0]
 8007118:	2800      	cmp	r0, #0
 800711a:	d139      	bne.n	8007190 <_dtoa_r+0x320>
 800711c:	4b16      	ldr	r3, [pc, #88]	; (8007178 <_dtoa_r+0x308>)
 800711e:	4602      	mov	r2, r0
 8007120:	f240 11af 	movw	r1, #431	; 0x1af
 8007124:	e6bd      	b.n	8006ea2 <_dtoa_r+0x32>
 8007126:	2301      	movs	r3, #1
 8007128:	e7e1      	b.n	80070ee <_dtoa_r+0x27e>
 800712a:	2501      	movs	r5, #1
 800712c:	2300      	movs	r3, #0
 800712e:	9307      	str	r3, [sp, #28]
 8007130:	9509      	str	r5, [sp, #36]	; 0x24
 8007132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007136:	9301      	str	r3, [sp, #4]
 8007138:	9304      	str	r3, [sp, #16]
 800713a:	2200      	movs	r2, #0
 800713c:	2312      	movs	r3, #18
 800713e:	e7d1      	b.n	80070e4 <_dtoa_r+0x274>
 8007140:	636f4361 	.word	0x636f4361
 8007144:	3fd287a7 	.word	0x3fd287a7
 8007148:	8b60c8b3 	.word	0x8b60c8b3
 800714c:	3fc68a28 	.word	0x3fc68a28
 8007150:	509f79fb 	.word	0x509f79fb
 8007154:	3fd34413 	.word	0x3fd34413
 8007158:	0800a69e 	.word	0x0800a69e
 800715c:	0800a6b5 	.word	0x0800a6b5
 8007160:	7ff00000 	.word	0x7ff00000
 8007164:	0800a69a 	.word	0x0800a69a
 8007168:	0800a691 	.word	0x0800a691
 800716c:	0800a669 	.word	0x0800a669
 8007170:	3ff80000 	.word	0x3ff80000
 8007174:	0800a7a0 	.word	0x0800a7a0
 8007178:	0800a70d 	.word	0x0800a70d
 800717c:	2301      	movs	r3, #1
 800717e:	9309      	str	r3, [sp, #36]	; 0x24
 8007180:	e7d7      	b.n	8007132 <_dtoa_r+0x2c2>
 8007182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007184:	9301      	str	r3, [sp, #4]
 8007186:	9304      	str	r3, [sp, #16]
 8007188:	e7ba      	b.n	8007100 <_dtoa_r+0x290>
 800718a:	3101      	adds	r1, #1
 800718c:	0052      	lsls	r2, r2, #1
 800718e:	e7ba      	b.n	8007106 <_dtoa_r+0x296>
 8007190:	69e3      	ldr	r3, [r4, #28]
 8007192:	9a00      	ldr	r2, [sp, #0]
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	9b04      	ldr	r3, [sp, #16]
 8007198:	2b0e      	cmp	r3, #14
 800719a:	f200 80a8 	bhi.w	80072ee <_dtoa_r+0x47e>
 800719e:	2d00      	cmp	r5, #0
 80071a0:	f000 80a5 	beq.w	80072ee <_dtoa_r+0x47e>
 80071a4:	f1bb 0f00 	cmp.w	fp, #0
 80071a8:	dd38      	ble.n	800721c <_dtoa_r+0x3ac>
 80071aa:	4bc0      	ldr	r3, [pc, #768]	; (80074ac <_dtoa_r+0x63c>)
 80071ac:	f00b 020f 	and.w	r2, fp, #15
 80071b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80071b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80071bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80071c0:	d019      	beq.n	80071f6 <_dtoa_r+0x386>
 80071c2:	4bbb      	ldr	r3, [pc, #748]	; (80074b0 <_dtoa_r+0x640>)
 80071c4:	ec51 0b18 	vmov	r0, r1, d8
 80071c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071cc:	f7f9 fb4e 	bl	800086c <__aeabi_ddiv>
 80071d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071d4:	f008 080f 	and.w	r8, r8, #15
 80071d8:	2503      	movs	r5, #3
 80071da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80074b0 <_dtoa_r+0x640>
 80071de:	f1b8 0f00 	cmp.w	r8, #0
 80071e2:	d10a      	bne.n	80071fa <_dtoa_r+0x38a>
 80071e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071e8:	4632      	mov	r2, r6
 80071ea:	463b      	mov	r3, r7
 80071ec:	f7f9 fb3e 	bl	800086c <__aeabi_ddiv>
 80071f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071f4:	e02b      	b.n	800724e <_dtoa_r+0x3de>
 80071f6:	2502      	movs	r5, #2
 80071f8:	e7ef      	b.n	80071da <_dtoa_r+0x36a>
 80071fa:	f018 0f01 	tst.w	r8, #1
 80071fe:	d008      	beq.n	8007212 <_dtoa_r+0x3a2>
 8007200:	4630      	mov	r0, r6
 8007202:	4639      	mov	r1, r7
 8007204:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007208:	f7f9 fa06 	bl	8000618 <__aeabi_dmul>
 800720c:	3501      	adds	r5, #1
 800720e:	4606      	mov	r6, r0
 8007210:	460f      	mov	r7, r1
 8007212:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007216:	f109 0908 	add.w	r9, r9, #8
 800721a:	e7e0      	b.n	80071de <_dtoa_r+0x36e>
 800721c:	f000 809f 	beq.w	800735e <_dtoa_r+0x4ee>
 8007220:	f1cb 0600 	rsb	r6, fp, #0
 8007224:	4ba1      	ldr	r3, [pc, #644]	; (80074ac <_dtoa_r+0x63c>)
 8007226:	4fa2      	ldr	r7, [pc, #648]	; (80074b0 <_dtoa_r+0x640>)
 8007228:	f006 020f 	and.w	r2, r6, #15
 800722c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	ec51 0b18 	vmov	r0, r1, d8
 8007238:	f7f9 f9ee 	bl	8000618 <__aeabi_dmul>
 800723c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007240:	1136      	asrs	r6, r6, #4
 8007242:	2300      	movs	r3, #0
 8007244:	2502      	movs	r5, #2
 8007246:	2e00      	cmp	r6, #0
 8007248:	d17e      	bne.n	8007348 <_dtoa_r+0x4d8>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1d0      	bne.n	80071f0 <_dtoa_r+0x380>
 800724e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007250:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 8084 	beq.w	8007362 <_dtoa_r+0x4f2>
 800725a:	4b96      	ldr	r3, [pc, #600]	; (80074b4 <_dtoa_r+0x644>)
 800725c:	2200      	movs	r2, #0
 800725e:	4640      	mov	r0, r8
 8007260:	4649      	mov	r1, r9
 8007262:	f7f9 fc4b 	bl	8000afc <__aeabi_dcmplt>
 8007266:	2800      	cmp	r0, #0
 8007268:	d07b      	beq.n	8007362 <_dtoa_r+0x4f2>
 800726a:	9b04      	ldr	r3, [sp, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d078      	beq.n	8007362 <_dtoa_r+0x4f2>
 8007270:	9b01      	ldr	r3, [sp, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	dd39      	ble.n	80072ea <_dtoa_r+0x47a>
 8007276:	4b90      	ldr	r3, [pc, #576]	; (80074b8 <_dtoa_r+0x648>)
 8007278:	2200      	movs	r2, #0
 800727a:	4640      	mov	r0, r8
 800727c:	4649      	mov	r1, r9
 800727e:	f7f9 f9cb 	bl	8000618 <__aeabi_dmul>
 8007282:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007286:	9e01      	ldr	r6, [sp, #4]
 8007288:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800728c:	3501      	adds	r5, #1
 800728e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007292:	4628      	mov	r0, r5
 8007294:	f7f9 f956 	bl	8000544 <__aeabi_i2d>
 8007298:	4642      	mov	r2, r8
 800729a:	464b      	mov	r3, r9
 800729c:	f7f9 f9bc 	bl	8000618 <__aeabi_dmul>
 80072a0:	4b86      	ldr	r3, [pc, #536]	; (80074bc <_dtoa_r+0x64c>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	f7f9 f802 	bl	80002ac <__adddf3>
 80072a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80072ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072b0:	9303      	str	r3, [sp, #12]
 80072b2:	2e00      	cmp	r6, #0
 80072b4:	d158      	bne.n	8007368 <_dtoa_r+0x4f8>
 80072b6:	4b82      	ldr	r3, [pc, #520]	; (80074c0 <_dtoa_r+0x650>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	4640      	mov	r0, r8
 80072bc:	4649      	mov	r1, r9
 80072be:	f7f8 fff3 	bl	80002a8 <__aeabi_dsub>
 80072c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072c6:	4680      	mov	r8, r0
 80072c8:	4689      	mov	r9, r1
 80072ca:	f7f9 fc35 	bl	8000b38 <__aeabi_dcmpgt>
 80072ce:	2800      	cmp	r0, #0
 80072d0:	f040 8296 	bne.w	8007800 <_dtoa_r+0x990>
 80072d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80072d8:	4640      	mov	r0, r8
 80072da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072de:	4649      	mov	r1, r9
 80072e0:	f7f9 fc0c 	bl	8000afc <__aeabi_dcmplt>
 80072e4:	2800      	cmp	r0, #0
 80072e6:	f040 8289 	bne.w	80077fc <_dtoa_r+0x98c>
 80072ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80072ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f2c0 814e 	blt.w	8007592 <_dtoa_r+0x722>
 80072f6:	f1bb 0f0e 	cmp.w	fp, #14
 80072fa:	f300 814a 	bgt.w	8007592 <_dtoa_r+0x722>
 80072fe:	4b6b      	ldr	r3, [pc, #428]	; (80074ac <_dtoa_r+0x63c>)
 8007300:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007304:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800730a:	2b00      	cmp	r3, #0
 800730c:	f280 80dc 	bge.w	80074c8 <_dtoa_r+0x658>
 8007310:	9b04      	ldr	r3, [sp, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	f300 80d8 	bgt.w	80074c8 <_dtoa_r+0x658>
 8007318:	f040 826f 	bne.w	80077fa <_dtoa_r+0x98a>
 800731c:	4b68      	ldr	r3, [pc, #416]	; (80074c0 <_dtoa_r+0x650>)
 800731e:	2200      	movs	r2, #0
 8007320:	4640      	mov	r0, r8
 8007322:	4649      	mov	r1, r9
 8007324:	f7f9 f978 	bl	8000618 <__aeabi_dmul>
 8007328:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800732c:	f7f9 fbfa 	bl	8000b24 <__aeabi_dcmpge>
 8007330:	9e04      	ldr	r6, [sp, #16]
 8007332:	4637      	mov	r7, r6
 8007334:	2800      	cmp	r0, #0
 8007336:	f040 8245 	bne.w	80077c4 <_dtoa_r+0x954>
 800733a:	9d00      	ldr	r5, [sp, #0]
 800733c:	2331      	movs	r3, #49	; 0x31
 800733e:	f805 3b01 	strb.w	r3, [r5], #1
 8007342:	f10b 0b01 	add.w	fp, fp, #1
 8007346:	e241      	b.n	80077cc <_dtoa_r+0x95c>
 8007348:	07f2      	lsls	r2, r6, #31
 800734a:	d505      	bpl.n	8007358 <_dtoa_r+0x4e8>
 800734c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007350:	f7f9 f962 	bl	8000618 <__aeabi_dmul>
 8007354:	3501      	adds	r5, #1
 8007356:	2301      	movs	r3, #1
 8007358:	1076      	asrs	r6, r6, #1
 800735a:	3708      	adds	r7, #8
 800735c:	e773      	b.n	8007246 <_dtoa_r+0x3d6>
 800735e:	2502      	movs	r5, #2
 8007360:	e775      	b.n	800724e <_dtoa_r+0x3de>
 8007362:	9e04      	ldr	r6, [sp, #16]
 8007364:	465f      	mov	r7, fp
 8007366:	e792      	b.n	800728e <_dtoa_r+0x41e>
 8007368:	9900      	ldr	r1, [sp, #0]
 800736a:	4b50      	ldr	r3, [pc, #320]	; (80074ac <_dtoa_r+0x63c>)
 800736c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007370:	4431      	add	r1, r6
 8007372:	9102      	str	r1, [sp, #8]
 8007374:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007376:	eeb0 9a47 	vmov.f32	s18, s14
 800737a:	eef0 9a67 	vmov.f32	s19, s15
 800737e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007382:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007386:	2900      	cmp	r1, #0
 8007388:	d044      	beq.n	8007414 <_dtoa_r+0x5a4>
 800738a:	494e      	ldr	r1, [pc, #312]	; (80074c4 <_dtoa_r+0x654>)
 800738c:	2000      	movs	r0, #0
 800738e:	f7f9 fa6d 	bl	800086c <__aeabi_ddiv>
 8007392:	ec53 2b19 	vmov	r2, r3, d9
 8007396:	f7f8 ff87 	bl	80002a8 <__aeabi_dsub>
 800739a:	9d00      	ldr	r5, [sp, #0]
 800739c:	ec41 0b19 	vmov	d9, r0, r1
 80073a0:	4649      	mov	r1, r9
 80073a2:	4640      	mov	r0, r8
 80073a4:	f7f9 fbe8 	bl	8000b78 <__aeabi_d2iz>
 80073a8:	4606      	mov	r6, r0
 80073aa:	f7f9 f8cb 	bl	8000544 <__aeabi_i2d>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	4640      	mov	r0, r8
 80073b4:	4649      	mov	r1, r9
 80073b6:	f7f8 ff77 	bl	80002a8 <__aeabi_dsub>
 80073ba:	3630      	adds	r6, #48	; 0x30
 80073bc:	f805 6b01 	strb.w	r6, [r5], #1
 80073c0:	ec53 2b19 	vmov	r2, r3, d9
 80073c4:	4680      	mov	r8, r0
 80073c6:	4689      	mov	r9, r1
 80073c8:	f7f9 fb98 	bl	8000afc <__aeabi_dcmplt>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d164      	bne.n	800749a <_dtoa_r+0x62a>
 80073d0:	4642      	mov	r2, r8
 80073d2:	464b      	mov	r3, r9
 80073d4:	4937      	ldr	r1, [pc, #220]	; (80074b4 <_dtoa_r+0x644>)
 80073d6:	2000      	movs	r0, #0
 80073d8:	f7f8 ff66 	bl	80002a8 <__aeabi_dsub>
 80073dc:	ec53 2b19 	vmov	r2, r3, d9
 80073e0:	f7f9 fb8c 	bl	8000afc <__aeabi_dcmplt>
 80073e4:	2800      	cmp	r0, #0
 80073e6:	f040 80b6 	bne.w	8007556 <_dtoa_r+0x6e6>
 80073ea:	9b02      	ldr	r3, [sp, #8]
 80073ec:	429d      	cmp	r5, r3
 80073ee:	f43f af7c 	beq.w	80072ea <_dtoa_r+0x47a>
 80073f2:	4b31      	ldr	r3, [pc, #196]	; (80074b8 <_dtoa_r+0x648>)
 80073f4:	ec51 0b19 	vmov	r0, r1, d9
 80073f8:	2200      	movs	r2, #0
 80073fa:	f7f9 f90d 	bl	8000618 <__aeabi_dmul>
 80073fe:	4b2e      	ldr	r3, [pc, #184]	; (80074b8 <_dtoa_r+0x648>)
 8007400:	ec41 0b19 	vmov	d9, r0, r1
 8007404:	2200      	movs	r2, #0
 8007406:	4640      	mov	r0, r8
 8007408:	4649      	mov	r1, r9
 800740a:	f7f9 f905 	bl	8000618 <__aeabi_dmul>
 800740e:	4680      	mov	r8, r0
 8007410:	4689      	mov	r9, r1
 8007412:	e7c5      	b.n	80073a0 <_dtoa_r+0x530>
 8007414:	ec51 0b17 	vmov	r0, r1, d7
 8007418:	f7f9 f8fe 	bl	8000618 <__aeabi_dmul>
 800741c:	9b02      	ldr	r3, [sp, #8]
 800741e:	9d00      	ldr	r5, [sp, #0]
 8007420:	930f      	str	r3, [sp, #60]	; 0x3c
 8007422:	ec41 0b19 	vmov	d9, r0, r1
 8007426:	4649      	mov	r1, r9
 8007428:	4640      	mov	r0, r8
 800742a:	f7f9 fba5 	bl	8000b78 <__aeabi_d2iz>
 800742e:	4606      	mov	r6, r0
 8007430:	f7f9 f888 	bl	8000544 <__aeabi_i2d>
 8007434:	3630      	adds	r6, #48	; 0x30
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	4640      	mov	r0, r8
 800743c:	4649      	mov	r1, r9
 800743e:	f7f8 ff33 	bl	80002a8 <__aeabi_dsub>
 8007442:	f805 6b01 	strb.w	r6, [r5], #1
 8007446:	9b02      	ldr	r3, [sp, #8]
 8007448:	429d      	cmp	r5, r3
 800744a:	4680      	mov	r8, r0
 800744c:	4689      	mov	r9, r1
 800744e:	f04f 0200 	mov.w	r2, #0
 8007452:	d124      	bne.n	800749e <_dtoa_r+0x62e>
 8007454:	4b1b      	ldr	r3, [pc, #108]	; (80074c4 <_dtoa_r+0x654>)
 8007456:	ec51 0b19 	vmov	r0, r1, d9
 800745a:	f7f8 ff27 	bl	80002ac <__adddf3>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4640      	mov	r0, r8
 8007464:	4649      	mov	r1, r9
 8007466:	f7f9 fb67 	bl	8000b38 <__aeabi_dcmpgt>
 800746a:	2800      	cmp	r0, #0
 800746c:	d173      	bne.n	8007556 <_dtoa_r+0x6e6>
 800746e:	ec53 2b19 	vmov	r2, r3, d9
 8007472:	4914      	ldr	r1, [pc, #80]	; (80074c4 <_dtoa_r+0x654>)
 8007474:	2000      	movs	r0, #0
 8007476:	f7f8 ff17 	bl	80002a8 <__aeabi_dsub>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	4640      	mov	r0, r8
 8007480:	4649      	mov	r1, r9
 8007482:	f7f9 fb3b 	bl	8000afc <__aeabi_dcmplt>
 8007486:	2800      	cmp	r0, #0
 8007488:	f43f af2f 	beq.w	80072ea <_dtoa_r+0x47a>
 800748c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800748e:	1e6b      	subs	r3, r5, #1
 8007490:	930f      	str	r3, [sp, #60]	; 0x3c
 8007492:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007496:	2b30      	cmp	r3, #48	; 0x30
 8007498:	d0f8      	beq.n	800748c <_dtoa_r+0x61c>
 800749a:	46bb      	mov	fp, r7
 800749c:	e04a      	b.n	8007534 <_dtoa_r+0x6c4>
 800749e:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <_dtoa_r+0x648>)
 80074a0:	f7f9 f8ba 	bl	8000618 <__aeabi_dmul>
 80074a4:	4680      	mov	r8, r0
 80074a6:	4689      	mov	r9, r1
 80074a8:	e7bd      	b.n	8007426 <_dtoa_r+0x5b6>
 80074aa:	bf00      	nop
 80074ac:	0800a7a0 	.word	0x0800a7a0
 80074b0:	0800a778 	.word	0x0800a778
 80074b4:	3ff00000 	.word	0x3ff00000
 80074b8:	40240000 	.word	0x40240000
 80074bc:	401c0000 	.word	0x401c0000
 80074c0:	40140000 	.word	0x40140000
 80074c4:	3fe00000 	.word	0x3fe00000
 80074c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80074cc:	9d00      	ldr	r5, [sp, #0]
 80074ce:	4642      	mov	r2, r8
 80074d0:	464b      	mov	r3, r9
 80074d2:	4630      	mov	r0, r6
 80074d4:	4639      	mov	r1, r7
 80074d6:	f7f9 f9c9 	bl	800086c <__aeabi_ddiv>
 80074da:	f7f9 fb4d 	bl	8000b78 <__aeabi_d2iz>
 80074de:	9001      	str	r0, [sp, #4]
 80074e0:	f7f9 f830 	bl	8000544 <__aeabi_i2d>
 80074e4:	4642      	mov	r2, r8
 80074e6:	464b      	mov	r3, r9
 80074e8:	f7f9 f896 	bl	8000618 <__aeabi_dmul>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	4630      	mov	r0, r6
 80074f2:	4639      	mov	r1, r7
 80074f4:	f7f8 fed8 	bl	80002a8 <__aeabi_dsub>
 80074f8:	9e01      	ldr	r6, [sp, #4]
 80074fa:	9f04      	ldr	r7, [sp, #16]
 80074fc:	3630      	adds	r6, #48	; 0x30
 80074fe:	f805 6b01 	strb.w	r6, [r5], #1
 8007502:	9e00      	ldr	r6, [sp, #0]
 8007504:	1bae      	subs	r6, r5, r6
 8007506:	42b7      	cmp	r7, r6
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	d134      	bne.n	8007578 <_dtoa_r+0x708>
 800750e:	f7f8 fecd 	bl	80002ac <__adddf3>
 8007512:	4642      	mov	r2, r8
 8007514:	464b      	mov	r3, r9
 8007516:	4606      	mov	r6, r0
 8007518:	460f      	mov	r7, r1
 800751a:	f7f9 fb0d 	bl	8000b38 <__aeabi_dcmpgt>
 800751e:	b9c8      	cbnz	r0, 8007554 <_dtoa_r+0x6e4>
 8007520:	4642      	mov	r2, r8
 8007522:	464b      	mov	r3, r9
 8007524:	4630      	mov	r0, r6
 8007526:	4639      	mov	r1, r7
 8007528:	f7f9 fade 	bl	8000ae8 <__aeabi_dcmpeq>
 800752c:	b110      	cbz	r0, 8007534 <_dtoa_r+0x6c4>
 800752e:	9b01      	ldr	r3, [sp, #4]
 8007530:	07db      	lsls	r3, r3, #31
 8007532:	d40f      	bmi.n	8007554 <_dtoa_r+0x6e4>
 8007534:	4651      	mov	r1, sl
 8007536:	4620      	mov	r0, r4
 8007538:	f000 fbcc 	bl	8007cd4 <_Bfree>
 800753c:	2300      	movs	r3, #0
 800753e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007540:	702b      	strb	r3, [r5, #0]
 8007542:	f10b 0301 	add.w	r3, fp, #1
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800754a:	2b00      	cmp	r3, #0
 800754c:	f43f ace2 	beq.w	8006f14 <_dtoa_r+0xa4>
 8007550:	601d      	str	r5, [r3, #0]
 8007552:	e4df      	b.n	8006f14 <_dtoa_r+0xa4>
 8007554:	465f      	mov	r7, fp
 8007556:	462b      	mov	r3, r5
 8007558:	461d      	mov	r5, r3
 800755a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800755e:	2a39      	cmp	r2, #57	; 0x39
 8007560:	d106      	bne.n	8007570 <_dtoa_r+0x700>
 8007562:	9a00      	ldr	r2, [sp, #0]
 8007564:	429a      	cmp	r2, r3
 8007566:	d1f7      	bne.n	8007558 <_dtoa_r+0x6e8>
 8007568:	9900      	ldr	r1, [sp, #0]
 800756a:	2230      	movs	r2, #48	; 0x30
 800756c:	3701      	adds	r7, #1
 800756e:	700a      	strb	r2, [r1, #0]
 8007570:	781a      	ldrb	r2, [r3, #0]
 8007572:	3201      	adds	r2, #1
 8007574:	701a      	strb	r2, [r3, #0]
 8007576:	e790      	b.n	800749a <_dtoa_r+0x62a>
 8007578:	4ba3      	ldr	r3, [pc, #652]	; (8007808 <_dtoa_r+0x998>)
 800757a:	2200      	movs	r2, #0
 800757c:	f7f9 f84c 	bl	8000618 <__aeabi_dmul>
 8007580:	2200      	movs	r2, #0
 8007582:	2300      	movs	r3, #0
 8007584:	4606      	mov	r6, r0
 8007586:	460f      	mov	r7, r1
 8007588:	f7f9 faae 	bl	8000ae8 <__aeabi_dcmpeq>
 800758c:	2800      	cmp	r0, #0
 800758e:	d09e      	beq.n	80074ce <_dtoa_r+0x65e>
 8007590:	e7d0      	b.n	8007534 <_dtoa_r+0x6c4>
 8007592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007594:	2a00      	cmp	r2, #0
 8007596:	f000 80ca 	beq.w	800772e <_dtoa_r+0x8be>
 800759a:	9a07      	ldr	r2, [sp, #28]
 800759c:	2a01      	cmp	r2, #1
 800759e:	f300 80ad 	bgt.w	80076fc <_dtoa_r+0x88c>
 80075a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075a4:	2a00      	cmp	r2, #0
 80075a6:	f000 80a5 	beq.w	80076f4 <_dtoa_r+0x884>
 80075aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80075ae:	9e08      	ldr	r6, [sp, #32]
 80075b0:	9d05      	ldr	r5, [sp, #20]
 80075b2:	9a05      	ldr	r2, [sp, #20]
 80075b4:	441a      	add	r2, r3
 80075b6:	9205      	str	r2, [sp, #20]
 80075b8:	9a06      	ldr	r2, [sp, #24]
 80075ba:	2101      	movs	r1, #1
 80075bc:	441a      	add	r2, r3
 80075be:	4620      	mov	r0, r4
 80075c0:	9206      	str	r2, [sp, #24]
 80075c2:	f000 fc87 	bl	8007ed4 <__i2b>
 80075c6:	4607      	mov	r7, r0
 80075c8:	b165      	cbz	r5, 80075e4 <_dtoa_r+0x774>
 80075ca:	9b06      	ldr	r3, [sp, #24]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	dd09      	ble.n	80075e4 <_dtoa_r+0x774>
 80075d0:	42ab      	cmp	r3, r5
 80075d2:	9a05      	ldr	r2, [sp, #20]
 80075d4:	bfa8      	it	ge
 80075d6:	462b      	movge	r3, r5
 80075d8:	1ad2      	subs	r2, r2, r3
 80075da:	9205      	str	r2, [sp, #20]
 80075dc:	9a06      	ldr	r2, [sp, #24]
 80075de:	1aed      	subs	r5, r5, r3
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	9306      	str	r3, [sp, #24]
 80075e4:	9b08      	ldr	r3, [sp, #32]
 80075e6:	b1f3      	cbz	r3, 8007626 <_dtoa_r+0x7b6>
 80075e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 80a3 	beq.w	8007736 <_dtoa_r+0x8c6>
 80075f0:	2e00      	cmp	r6, #0
 80075f2:	dd10      	ble.n	8007616 <_dtoa_r+0x7a6>
 80075f4:	4639      	mov	r1, r7
 80075f6:	4632      	mov	r2, r6
 80075f8:	4620      	mov	r0, r4
 80075fa:	f000 fd2b 	bl	8008054 <__pow5mult>
 80075fe:	4652      	mov	r2, sl
 8007600:	4601      	mov	r1, r0
 8007602:	4607      	mov	r7, r0
 8007604:	4620      	mov	r0, r4
 8007606:	f000 fc7b 	bl	8007f00 <__multiply>
 800760a:	4651      	mov	r1, sl
 800760c:	4680      	mov	r8, r0
 800760e:	4620      	mov	r0, r4
 8007610:	f000 fb60 	bl	8007cd4 <_Bfree>
 8007614:	46c2      	mov	sl, r8
 8007616:	9b08      	ldr	r3, [sp, #32]
 8007618:	1b9a      	subs	r2, r3, r6
 800761a:	d004      	beq.n	8007626 <_dtoa_r+0x7b6>
 800761c:	4651      	mov	r1, sl
 800761e:	4620      	mov	r0, r4
 8007620:	f000 fd18 	bl	8008054 <__pow5mult>
 8007624:	4682      	mov	sl, r0
 8007626:	2101      	movs	r1, #1
 8007628:	4620      	mov	r0, r4
 800762a:	f000 fc53 	bl	8007ed4 <__i2b>
 800762e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007630:	2b00      	cmp	r3, #0
 8007632:	4606      	mov	r6, r0
 8007634:	f340 8081 	ble.w	800773a <_dtoa_r+0x8ca>
 8007638:	461a      	mov	r2, r3
 800763a:	4601      	mov	r1, r0
 800763c:	4620      	mov	r0, r4
 800763e:	f000 fd09 	bl	8008054 <__pow5mult>
 8007642:	9b07      	ldr	r3, [sp, #28]
 8007644:	2b01      	cmp	r3, #1
 8007646:	4606      	mov	r6, r0
 8007648:	dd7a      	ble.n	8007740 <_dtoa_r+0x8d0>
 800764a:	f04f 0800 	mov.w	r8, #0
 800764e:	6933      	ldr	r3, [r6, #16]
 8007650:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007654:	6918      	ldr	r0, [r3, #16]
 8007656:	f000 fbef 	bl	8007e38 <__hi0bits>
 800765a:	f1c0 0020 	rsb	r0, r0, #32
 800765e:	9b06      	ldr	r3, [sp, #24]
 8007660:	4418      	add	r0, r3
 8007662:	f010 001f 	ands.w	r0, r0, #31
 8007666:	f000 8094 	beq.w	8007792 <_dtoa_r+0x922>
 800766a:	f1c0 0320 	rsb	r3, r0, #32
 800766e:	2b04      	cmp	r3, #4
 8007670:	f340 8085 	ble.w	800777e <_dtoa_r+0x90e>
 8007674:	9b05      	ldr	r3, [sp, #20]
 8007676:	f1c0 001c 	rsb	r0, r0, #28
 800767a:	4403      	add	r3, r0
 800767c:	9305      	str	r3, [sp, #20]
 800767e:	9b06      	ldr	r3, [sp, #24]
 8007680:	4403      	add	r3, r0
 8007682:	4405      	add	r5, r0
 8007684:	9306      	str	r3, [sp, #24]
 8007686:	9b05      	ldr	r3, [sp, #20]
 8007688:	2b00      	cmp	r3, #0
 800768a:	dd05      	ble.n	8007698 <_dtoa_r+0x828>
 800768c:	4651      	mov	r1, sl
 800768e:	461a      	mov	r2, r3
 8007690:	4620      	mov	r0, r4
 8007692:	f000 fd39 	bl	8008108 <__lshift>
 8007696:	4682      	mov	sl, r0
 8007698:	9b06      	ldr	r3, [sp, #24]
 800769a:	2b00      	cmp	r3, #0
 800769c:	dd05      	ble.n	80076aa <_dtoa_r+0x83a>
 800769e:	4631      	mov	r1, r6
 80076a0:	461a      	mov	r2, r3
 80076a2:	4620      	mov	r0, r4
 80076a4:	f000 fd30 	bl	8008108 <__lshift>
 80076a8:	4606      	mov	r6, r0
 80076aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d072      	beq.n	8007796 <_dtoa_r+0x926>
 80076b0:	4631      	mov	r1, r6
 80076b2:	4650      	mov	r0, sl
 80076b4:	f000 fd94 	bl	80081e0 <__mcmp>
 80076b8:	2800      	cmp	r0, #0
 80076ba:	da6c      	bge.n	8007796 <_dtoa_r+0x926>
 80076bc:	2300      	movs	r3, #0
 80076be:	4651      	mov	r1, sl
 80076c0:	220a      	movs	r2, #10
 80076c2:	4620      	mov	r0, r4
 80076c4:	f000 fb28 	bl	8007d18 <__multadd>
 80076c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80076ce:	4682      	mov	sl, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 81b0 	beq.w	8007a36 <_dtoa_r+0xbc6>
 80076d6:	2300      	movs	r3, #0
 80076d8:	4639      	mov	r1, r7
 80076da:	220a      	movs	r2, #10
 80076dc:	4620      	mov	r0, r4
 80076de:	f000 fb1b 	bl	8007d18 <__multadd>
 80076e2:	9b01      	ldr	r3, [sp, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	4607      	mov	r7, r0
 80076e8:	f300 8096 	bgt.w	8007818 <_dtoa_r+0x9a8>
 80076ec:	9b07      	ldr	r3, [sp, #28]
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	dc59      	bgt.n	80077a6 <_dtoa_r+0x936>
 80076f2:	e091      	b.n	8007818 <_dtoa_r+0x9a8>
 80076f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80076fa:	e758      	b.n	80075ae <_dtoa_r+0x73e>
 80076fc:	9b04      	ldr	r3, [sp, #16]
 80076fe:	1e5e      	subs	r6, r3, #1
 8007700:	9b08      	ldr	r3, [sp, #32]
 8007702:	42b3      	cmp	r3, r6
 8007704:	bfbf      	itttt	lt
 8007706:	9b08      	ldrlt	r3, [sp, #32]
 8007708:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800770a:	9608      	strlt	r6, [sp, #32]
 800770c:	1af3      	sublt	r3, r6, r3
 800770e:	bfb4      	ite	lt
 8007710:	18d2      	addlt	r2, r2, r3
 8007712:	1b9e      	subge	r6, r3, r6
 8007714:	9b04      	ldr	r3, [sp, #16]
 8007716:	bfbc      	itt	lt
 8007718:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800771a:	2600      	movlt	r6, #0
 800771c:	2b00      	cmp	r3, #0
 800771e:	bfb7      	itett	lt
 8007720:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007724:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007728:	1a9d      	sublt	r5, r3, r2
 800772a:	2300      	movlt	r3, #0
 800772c:	e741      	b.n	80075b2 <_dtoa_r+0x742>
 800772e:	9e08      	ldr	r6, [sp, #32]
 8007730:	9d05      	ldr	r5, [sp, #20]
 8007732:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007734:	e748      	b.n	80075c8 <_dtoa_r+0x758>
 8007736:	9a08      	ldr	r2, [sp, #32]
 8007738:	e770      	b.n	800761c <_dtoa_r+0x7ac>
 800773a:	9b07      	ldr	r3, [sp, #28]
 800773c:	2b01      	cmp	r3, #1
 800773e:	dc19      	bgt.n	8007774 <_dtoa_r+0x904>
 8007740:	9b02      	ldr	r3, [sp, #8]
 8007742:	b9bb      	cbnz	r3, 8007774 <_dtoa_r+0x904>
 8007744:	9b03      	ldr	r3, [sp, #12]
 8007746:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800774a:	b99b      	cbnz	r3, 8007774 <_dtoa_r+0x904>
 800774c:	9b03      	ldr	r3, [sp, #12]
 800774e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007752:	0d1b      	lsrs	r3, r3, #20
 8007754:	051b      	lsls	r3, r3, #20
 8007756:	b183      	cbz	r3, 800777a <_dtoa_r+0x90a>
 8007758:	9b05      	ldr	r3, [sp, #20]
 800775a:	3301      	adds	r3, #1
 800775c:	9305      	str	r3, [sp, #20]
 800775e:	9b06      	ldr	r3, [sp, #24]
 8007760:	3301      	adds	r3, #1
 8007762:	9306      	str	r3, [sp, #24]
 8007764:	f04f 0801 	mov.w	r8, #1
 8007768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800776a:	2b00      	cmp	r3, #0
 800776c:	f47f af6f 	bne.w	800764e <_dtoa_r+0x7de>
 8007770:	2001      	movs	r0, #1
 8007772:	e774      	b.n	800765e <_dtoa_r+0x7ee>
 8007774:	f04f 0800 	mov.w	r8, #0
 8007778:	e7f6      	b.n	8007768 <_dtoa_r+0x8f8>
 800777a:	4698      	mov	r8, r3
 800777c:	e7f4      	b.n	8007768 <_dtoa_r+0x8f8>
 800777e:	d082      	beq.n	8007686 <_dtoa_r+0x816>
 8007780:	9a05      	ldr	r2, [sp, #20]
 8007782:	331c      	adds	r3, #28
 8007784:	441a      	add	r2, r3
 8007786:	9205      	str	r2, [sp, #20]
 8007788:	9a06      	ldr	r2, [sp, #24]
 800778a:	441a      	add	r2, r3
 800778c:	441d      	add	r5, r3
 800778e:	9206      	str	r2, [sp, #24]
 8007790:	e779      	b.n	8007686 <_dtoa_r+0x816>
 8007792:	4603      	mov	r3, r0
 8007794:	e7f4      	b.n	8007780 <_dtoa_r+0x910>
 8007796:	9b04      	ldr	r3, [sp, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	dc37      	bgt.n	800780c <_dtoa_r+0x99c>
 800779c:	9b07      	ldr	r3, [sp, #28]
 800779e:	2b02      	cmp	r3, #2
 80077a0:	dd34      	ble.n	800780c <_dtoa_r+0x99c>
 80077a2:	9b04      	ldr	r3, [sp, #16]
 80077a4:	9301      	str	r3, [sp, #4]
 80077a6:	9b01      	ldr	r3, [sp, #4]
 80077a8:	b963      	cbnz	r3, 80077c4 <_dtoa_r+0x954>
 80077aa:	4631      	mov	r1, r6
 80077ac:	2205      	movs	r2, #5
 80077ae:	4620      	mov	r0, r4
 80077b0:	f000 fab2 	bl	8007d18 <__multadd>
 80077b4:	4601      	mov	r1, r0
 80077b6:	4606      	mov	r6, r0
 80077b8:	4650      	mov	r0, sl
 80077ba:	f000 fd11 	bl	80081e0 <__mcmp>
 80077be:	2800      	cmp	r0, #0
 80077c0:	f73f adbb 	bgt.w	800733a <_dtoa_r+0x4ca>
 80077c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077c6:	9d00      	ldr	r5, [sp, #0]
 80077c8:	ea6f 0b03 	mvn.w	fp, r3
 80077cc:	f04f 0800 	mov.w	r8, #0
 80077d0:	4631      	mov	r1, r6
 80077d2:	4620      	mov	r0, r4
 80077d4:	f000 fa7e 	bl	8007cd4 <_Bfree>
 80077d8:	2f00      	cmp	r7, #0
 80077da:	f43f aeab 	beq.w	8007534 <_dtoa_r+0x6c4>
 80077de:	f1b8 0f00 	cmp.w	r8, #0
 80077e2:	d005      	beq.n	80077f0 <_dtoa_r+0x980>
 80077e4:	45b8      	cmp	r8, r7
 80077e6:	d003      	beq.n	80077f0 <_dtoa_r+0x980>
 80077e8:	4641      	mov	r1, r8
 80077ea:	4620      	mov	r0, r4
 80077ec:	f000 fa72 	bl	8007cd4 <_Bfree>
 80077f0:	4639      	mov	r1, r7
 80077f2:	4620      	mov	r0, r4
 80077f4:	f000 fa6e 	bl	8007cd4 <_Bfree>
 80077f8:	e69c      	b.n	8007534 <_dtoa_r+0x6c4>
 80077fa:	2600      	movs	r6, #0
 80077fc:	4637      	mov	r7, r6
 80077fe:	e7e1      	b.n	80077c4 <_dtoa_r+0x954>
 8007800:	46bb      	mov	fp, r7
 8007802:	4637      	mov	r7, r6
 8007804:	e599      	b.n	800733a <_dtoa_r+0x4ca>
 8007806:	bf00      	nop
 8007808:	40240000 	.word	0x40240000
 800780c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 80c8 	beq.w	80079a4 <_dtoa_r+0xb34>
 8007814:	9b04      	ldr	r3, [sp, #16]
 8007816:	9301      	str	r3, [sp, #4]
 8007818:	2d00      	cmp	r5, #0
 800781a:	dd05      	ble.n	8007828 <_dtoa_r+0x9b8>
 800781c:	4639      	mov	r1, r7
 800781e:	462a      	mov	r2, r5
 8007820:	4620      	mov	r0, r4
 8007822:	f000 fc71 	bl	8008108 <__lshift>
 8007826:	4607      	mov	r7, r0
 8007828:	f1b8 0f00 	cmp.w	r8, #0
 800782c:	d05b      	beq.n	80078e6 <_dtoa_r+0xa76>
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	4620      	mov	r0, r4
 8007832:	f000 fa0f 	bl	8007c54 <_Balloc>
 8007836:	4605      	mov	r5, r0
 8007838:	b928      	cbnz	r0, 8007846 <_dtoa_r+0x9d6>
 800783a:	4b83      	ldr	r3, [pc, #524]	; (8007a48 <_dtoa_r+0xbd8>)
 800783c:	4602      	mov	r2, r0
 800783e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007842:	f7ff bb2e 	b.w	8006ea2 <_dtoa_r+0x32>
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	3202      	adds	r2, #2
 800784a:	0092      	lsls	r2, r2, #2
 800784c:	f107 010c 	add.w	r1, r7, #12
 8007850:	300c      	adds	r0, #12
 8007852:	f001 ff85 	bl	8009760 <memcpy>
 8007856:	2201      	movs	r2, #1
 8007858:	4629      	mov	r1, r5
 800785a:	4620      	mov	r0, r4
 800785c:	f000 fc54 	bl	8008108 <__lshift>
 8007860:	9b00      	ldr	r3, [sp, #0]
 8007862:	3301      	adds	r3, #1
 8007864:	9304      	str	r3, [sp, #16]
 8007866:	e9dd 2300 	ldrd	r2, r3, [sp]
 800786a:	4413      	add	r3, r2
 800786c:	9308      	str	r3, [sp, #32]
 800786e:	9b02      	ldr	r3, [sp, #8]
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	46b8      	mov	r8, r7
 8007876:	9306      	str	r3, [sp, #24]
 8007878:	4607      	mov	r7, r0
 800787a:	9b04      	ldr	r3, [sp, #16]
 800787c:	4631      	mov	r1, r6
 800787e:	3b01      	subs	r3, #1
 8007880:	4650      	mov	r0, sl
 8007882:	9301      	str	r3, [sp, #4]
 8007884:	f7ff fa6a 	bl	8006d5c <quorem>
 8007888:	4641      	mov	r1, r8
 800788a:	9002      	str	r0, [sp, #8]
 800788c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007890:	4650      	mov	r0, sl
 8007892:	f000 fca5 	bl	80081e0 <__mcmp>
 8007896:	463a      	mov	r2, r7
 8007898:	9005      	str	r0, [sp, #20]
 800789a:	4631      	mov	r1, r6
 800789c:	4620      	mov	r0, r4
 800789e:	f000 fcbb 	bl	8008218 <__mdiff>
 80078a2:	68c2      	ldr	r2, [r0, #12]
 80078a4:	4605      	mov	r5, r0
 80078a6:	bb02      	cbnz	r2, 80078ea <_dtoa_r+0xa7a>
 80078a8:	4601      	mov	r1, r0
 80078aa:	4650      	mov	r0, sl
 80078ac:	f000 fc98 	bl	80081e0 <__mcmp>
 80078b0:	4602      	mov	r2, r0
 80078b2:	4629      	mov	r1, r5
 80078b4:	4620      	mov	r0, r4
 80078b6:	9209      	str	r2, [sp, #36]	; 0x24
 80078b8:	f000 fa0c 	bl	8007cd4 <_Bfree>
 80078bc:	9b07      	ldr	r3, [sp, #28]
 80078be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078c0:	9d04      	ldr	r5, [sp, #16]
 80078c2:	ea43 0102 	orr.w	r1, r3, r2
 80078c6:	9b06      	ldr	r3, [sp, #24]
 80078c8:	4319      	orrs	r1, r3
 80078ca:	d110      	bne.n	80078ee <_dtoa_r+0xa7e>
 80078cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80078d0:	d029      	beq.n	8007926 <_dtoa_r+0xab6>
 80078d2:	9b05      	ldr	r3, [sp, #20]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	dd02      	ble.n	80078de <_dtoa_r+0xa6e>
 80078d8:	9b02      	ldr	r3, [sp, #8]
 80078da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80078de:	9b01      	ldr	r3, [sp, #4]
 80078e0:	f883 9000 	strb.w	r9, [r3]
 80078e4:	e774      	b.n	80077d0 <_dtoa_r+0x960>
 80078e6:	4638      	mov	r0, r7
 80078e8:	e7ba      	b.n	8007860 <_dtoa_r+0x9f0>
 80078ea:	2201      	movs	r2, #1
 80078ec:	e7e1      	b.n	80078b2 <_dtoa_r+0xa42>
 80078ee:	9b05      	ldr	r3, [sp, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	db04      	blt.n	80078fe <_dtoa_r+0xa8e>
 80078f4:	9907      	ldr	r1, [sp, #28]
 80078f6:	430b      	orrs	r3, r1
 80078f8:	9906      	ldr	r1, [sp, #24]
 80078fa:	430b      	orrs	r3, r1
 80078fc:	d120      	bne.n	8007940 <_dtoa_r+0xad0>
 80078fe:	2a00      	cmp	r2, #0
 8007900:	dded      	ble.n	80078de <_dtoa_r+0xa6e>
 8007902:	4651      	mov	r1, sl
 8007904:	2201      	movs	r2, #1
 8007906:	4620      	mov	r0, r4
 8007908:	f000 fbfe 	bl	8008108 <__lshift>
 800790c:	4631      	mov	r1, r6
 800790e:	4682      	mov	sl, r0
 8007910:	f000 fc66 	bl	80081e0 <__mcmp>
 8007914:	2800      	cmp	r0, #0
 8007916:	dc03      	bgt.n	8007920 <_dtoa_r+0xab0>
 8007918:	d1e1      	bne.n	80078de <_dtoa_r+0xa6e>
 800791a:	f019 0f01 	tst.w	r9, #1
 800791e:	d0de      	beq.n	80078de <_dtoa_r+0xa6e>
 8007920:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007924:	d1d8      	bne.n	80078d8 <_dtoa_r+0xa68>
 8007926:	9a01      	ldr	r2, [sp, #4]
 8007928:	2339      	movs	r3, #57	; 0x39
 800792a:	7013      	strb	r3, [r2, #0]
 800792c:	462b      	mov	r3, r5
 800792e:	461d      	mov	r5, r3
 8007930:	3b01      	subs	r3, #1
 8007932:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007936:	2a39      	cmp	r2, #57	; 0x39
 8007938:	d06c      	beq.n	8007a14 <_dtoa_r+0xba4>
 800793a:	3201      	adds	r2, #1
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	e747      	b.n	80077d0 <_dtoa_r+0x960>
 8007940:	2a00      	cmp	r2, #0
 8007942:	dd07      	ble.n	8007954 <_dtoa_r+0xae4>
 8007944:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007948:	d0ed      	beq.n	8007926 <_dtoa_r+0xab6>
 800794a:	9a01      	ldr	r2, [sp, #4]
 800794c:	f109 0301 	add.w	r3, r9, #1
 8007950:	7013      	strb	r3, [r2, #0]
 8007952:	e73d      	b.n	80077d0 <_dtoa_r+0x960>
 8007954:	9b04      	ldr	r3, [sp, #16]
 8007956:	9a08      	ldr	r2, [sp, #32]
 8007958:	f803 9c01 	strb.w	r9, [r3, #-1]
 800795c:	4293      	cmp	r3, r2
 800795e:	d043      	beq.n	80079e8 <_dtoa_r+0xb78>
 8007960:	4651      	mov	r1, sl
 8007962:	2300      	movs	r3, #0
 8007964:	220a      	movs	r2, #10
 8007966:	4620      	mov	r0, r4
 8007968:	f000 f9d6 	bl	8007d18 <__multadd>
 800796c:	45b8      	cmp	r8, r7
 800796e:	4682      	mov	sl, r0
 8007970:	f04f 0300 	mov.w	r3, #0
 8007974:	f04f 020a 	mov.w	r2, #10
 8007978:	4641      	mov	r1, r8
 800797a:	4620      	mov	r0, r4
 800797c:	d107      	bne.n	800798e <_dtoa_r+0xb1e>
 800797e:	f000 f9cb 	bl	8007d18 <__multadd>
 8007982:	4680      	mov	r8, r0
 8007984:	4607      	mov	r7, r0
 8007986:	9b04      	ldr	r3, [sp, #16]
 8007988:	3301      	adds	r3, #1
 800798a:	9304      	str	r3, [sp, #16]
 800798c:	e775      	b.n	800787a <_dtoa_r+0xa0a>
 800798e:	f000 f9c3 	bl	8007d18 <__multadd>
 8007992:	4639      	mov	r1, r7
 8007994:	4680      	mov	r8, r0
 8007996:	2300      	movs	r3, #0
 8007998:	220a      	movs	r2, #10
 800799a:	4620      	mov	r0, r4
 800799c:	f000 f9bc 	bl	8007d18 <__multadd>
 80079a0:	4607      	mov	r7, r0
 80079a2:	e7f0      	b.n	8007986 <_dtoa_r+0xb16>
 80079a4:	9b04      	ldr	r3, [sp, #16]
 80079a6:	9301      	str	r3, [sp, #4]
 80079a8:	9d00      	ldr	r5, [sp, #0]
 80079aa:	4631      	mov	r1, r6
 80079ac:	4650      	mov	r0, sl
 80079ae:	f7ff f9d5 	bl	8006d5c <quorem>
 80079b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80079b6:	9b00      	ldr	r3, [sp, #0]
 80079b8:	f805 9b01 	strb.w	r9, [r5], #1
 80079bc:	1aea      	subs	r2, r5, r3
 80079be:	9b01      	ldr	r3, [sp, #4]
 80079c0:	4293      	cmp	r3, r2
 80079c2:	dd07      	ble.n	80079d4 <_dtoa_r+0xb64>
 80079c4:	4651      	mov	r1, sl
 80079c6:	2300      	movs	r3, #0
 80079c8:	220a      	movs	r2, #10
 80079ca:	4620      	mov	r0, r4
 80079cc:	f000 f9a4 	bl	8007d18 <__multadd>
 80079d0:	4682      	mov	sl, r0
 80079d2:	e7ea      	b.n	80079aa <_dtoa_r+0xb3a>
 80079d4:	9b01      	ldr	r3, [sp, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	bfc8      	it	gt
 80079da:	461d      	movgt	r5, r3
 80079dc:	9b00      	ldr	r3, [sp, #0]
 80079de:	bfd8      	it	le
 80079e0:	2501      	movle	r5, #1
 80079e2:	441d      	add	r5, r3
 80079e4:	f04f 0800 	mov.w	r8, #0
 80079e8:	4651      	mov	r1, sl
 80079ea:	2201      	movs	r2, #1
 80079ec:	4620      	mov	r0, r4
 80079ee:	f000 fb8b 	bl	8008108 <__lshift>
 80079f2:	4631      	mov	r1, r6
 80079f4:	4682      	mov	sl, r0
 80079f6:	f000 fbf3 	bl	80081e0 <__mcmp>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	dc96      	bgt.n	800792c <_dtoa_r+0xabc>
 80079fe:	d102      	bne.n	8007a06 <_dtoa_r+0xb96>
 8007a00:	f019 0f01 	tst.w	r9, #1
 8007a04:	d192      	bne.n	800792c <_dtoa_r+0xabc>
 8007a06:	462b      	mov	r3, r5
 8007a08:	461d      	mov	r5, r3
 8007a0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a0e:	2a30      	cmp	r2, #48	; 0x30
 8007a10:	d0fa      	beq.n	8007a08 <_dtoa_r+0xb98>
 8007a12:	e6dd      	b.n	80077d0 <_dtoa_r+0x960>
 8007a14:	9a00      	ldr	r2, [sp, #0]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d189      	bne.n	800792e <_dtoa_r+0xabe>
 8007a1a:	f10b 0b01 	add.w	fp, fp, #1
 8007a1e:	2331      	movs	r3, #49	; 0x31
 8007a20:	e796      	b.n	8007950 <_dtoa_r+0xae0>
 8007a22:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <_dtoa_r+0xbdc>)
 8007a24:	f7ff ba99 	b.w	8006f5a <_dtoa_r+0xea>
 8007a28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f47f aa6d 	bne.w	8006f0a <_dtoa_r+0x9a>
 8007a30:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <_dtoa_r+0xbe0>)
 8007a32:	f7ff ba92 	b.w	8006f5a <_dtoa_r+0xea>
 8007a36:	9b01      	ldr	r3, [sp, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	dcb5      	bgt.n	80079a8 <_dtoa_r+0xb38>
 8007a3c:	9b07      	ldr	r3, [sp, #28]
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	f73f aeb1 	bgt.w	80077a6 <_dtoa_r+0x936>
 8007a44:	e7b0      	b.n	80079a8 <_dtoa_r+0xb38>
 8007a46:	bf00      	nop
 8007a48:	0800a70d 	.word	0x0800a70d
 8007a4c:	0800a668 	.word	0x0800a668
 8007a50:	0800a691 	.word	0x0800a691

08007a54 <_free_r>:
 8007a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a56:	2900      	cmp	r1, #0
 8007a58:	d044      	beq.n	8007ae4 <_free_r+0x90>
 8007a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a5e:	9001      	str	r0, [sp, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f1a1 0404 	sub.w	r4, r1, #4
 8007a66:	bfb8      	it	lt
 8007a68:	18e4      	addlt	r4, r4, r3
 8007a6a:	f000 f8e7 	bl	8007c3c <__malloc_lock>
 8007a6e:	4a1e      	ldr	r2, [pc, #120]	; (8007ae8 <_free_r+0x94>)
 8007a70:	9801      	ldr	r0, [sp, #4]
 8007a72:	6813      	ldr	r3, [r2, #0]
 8007a74:	b933      	cbnz	r3, 8007a84 <_free_r+0x30>
 8007a76:	6063      	str	r3, [r4, #4]
 8007a78:	6014      	str	r4, [r2, #0]
 8007a7a:	b003      	add	sp, #12
 8007a7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a80:	f000 b8e2 	b.w	8007c48 <__malloc_unlock>
 8007a84:	42a3      	cmp	r3, r4
 8007a86:	d908      	bls.n	8007a9a <_free_r+0x46>
 8007a88:	6825      	ldr	r5, [r4, #0]
 8007a8a:	1961      	adds	r1, r4, r5
 8007a8c:	428b      	cmp	r3, r1
 8007a8e:	bf01      	itttt	eq
 8007a90:	6819      	ldreq	r1, [r3, #0]
 8007a92:	685b      	ldreq	r3, [r3, #4]
 8007a94:	1949      	addeq	r1, r1, r5
 8007a96:	6021      	streq	r1, [r4, #0]
 8007a98:	e7ed      	b.n	8007a76 <_free_r+0x22>
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	b10b      	cbz	r3, 8007aa4 <_free_r+0x50>
 8007aa0:	42a3      	cmp	r3, r4
 8007aa2:	d9fa      	bls.n	8007a9a <_free_r+0x46>
 8007aa4:	6811      	ldr	r1, [r2, #0]
 8007aa6:	1855      	adds	r5, r2, r1
 8007aa8:	42a5      	cmp	r5, r4
 8007aaa:	d10b      	bne.n	8007ac4 <_free_r+0x70>
 8007aac:	6824      	ldr	r4, [r4, #0]
 8007aae:	4421      	add	r1, r4
 8007ab0:	1854      	adds	r4, r2, r1
 8007ab2:	42a3      	cmp	r3, r4
 8007ab4:	6011      	str	r1, [r2, #0]
 8007ab6:	d1e0      	bne.n	8007a7a <_free_r+0x26>
 8007ab8:	681c      	ldr	r4, [r3, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	6053      	str	r3, [r2, #4]
 8007abe:	440c      	add	r4, r1
 8007ac0:	6014      	str	r4, [r2, #0]
 8007ac2:	e7da      	b.n	8007a7a <_free_r+0x26>
 8007ac4:	d902      	bls.n	8007acc <_free_r+0x78>
 8007ac6:	230c      	movs	r3, #12
 8007ac8:	6003      	str	r3, [r0, #0]
 8007aca:	e7d6      	b.n	8007a7a <_free_r+0x26>
 8007acc:	6825      	ldr	r5, [r4, #0]
 8007ace:	1961      	adds	r1, r4, r5
 8007ad0:	428b      	cmp	r3, r1
 8007ad2:	bf04      	itt	eq
 8007ad4:	6819      	ldreq	r1, [r3, #0]
 8007ad6:	685b      	ldreq	r3, [r3, #4]
 8007ad8:	6063      	str	r3, [r4, #4]
 8007ada:	bf04      	itt	eq
 8007adc:	1949      	addeq	r1, r1, r5
 8007ade:	6021      	streq	r1, [r4, #0]
 8007ae0:	6054      	str	r4, [r2, #4]
 8007ae2:	e7ca      	b.n	8007a7a <_free_r+0x26>
 8007ae4:	b003      	add	sp, #12
 8007ae6:	bd30      	pop	{r4, r5, pc}
 8007ae8:	20000b8c 	.word	0x20000b8c

08007aec <malloc>:
 8007aec:	4b02      	ldr	r3, [pc, #8]	; (8007af8 <malloc+0xc>)
 8007aee:	4601      	mov	r1, r0
 8007af0:	6818      	ldr	r0, [r3, #0]
 8007af2:	f000 b823 	b.w	8007b3c <_malloc_r>
 8007af6:	bf00      	nop
 8007af8:	20000064 	.word	0x20000064

08007afc <sbrk_aligned>:
 8007afc:	b570      	push	{r4, r5, r6, lr}
 8007afe:	4e0e      	ldr	r6, [pc, #56]	; (8007b38 <sbrk_aligned+0x3c>)
 8007b00:	460c      	mov	r4, r1
 8007b02:	6831      	ldr	r1, [r6, #0]
 8007b04:	4605      	mov	r5, r0
 8007b06:	b911      	cbnz	r1, 8007b0e <sbrk_aligned+0x12>
 8007b08:	f001 fe1a 	bl	8009740 <_sbrk_r>
 8007b0c:	6030      	str	r0, [r6, #0]
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4628      	mov	r0, r5
 8007b12:	f001 fe15 	bl	8009740 <_sbrk_r>
 8007b16:	1c43      	adds	r3, r0, #1
 8007b18:	d00a      	beq.n	8007b30 <sbrk_aligned+0x34>
 8007b1a:	1cc4      	adds	r4, r0, #3
 8007b1c:	f024 0403 	bic.w	r4, r4, #3
 8007b20:	42a0      	cmp	r0, r4
 8007b22:	d007      	beq.n	8007b34 <sbrk_aligned+0x38>
 8007b24:	1a21      	subs	r1, r4, r0
 8007b26:	4628      	mov	r0, r5
 8007b28:	f001 fe0a 	bl	8009740 <_sbrk_r>
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	d101      	bne.n	8007b34 <sbrk_aligned+0x38>
 8007b30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007b34:	4620      	mov	r0, r4
 8007b36:	bd70      	pop	{r4, r5, r6, pc}
 8007b38:	20000b90 	.word	0x20000b90

08007b3c <_malloc_r>:
 8007b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b40:	1ccd      	adds	r5, r1, #3
 8007b42:	f025 0503 	bic.w	r5, r5, #3
 8007b46:	3508      	adds	r5, #8
 8007b48:	2d0c      	cmp	r5, #12
 8007b4a:	bf38      	it	cc
 8007b4c:	250c      	movcc	r5, #12
 8007b4e:	2d00      	cmp	r5, #0
 8007b50:	4607      	mov	r7, r0
 8007b52:	db01      	blt.n	8007b58 <_malloc_r+0x1c>
 8007b54:	42a9      	cmp	r1, r5
 8007b56:	d905      	bls.n	8007b64 <_malloc_r+0x28>
 8007b58:	230c      	movs	r3, #12
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	2600      	movs	r6, #0
 8007b5e:	4630      	mov	r0, r6
 8007b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007c38 <_malloc_r+0xfc>
 8007b68:	f000 f868 	bl	8007c3c <__malloc_lock>
 8007b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8007b70:	461c      	mov	r4, r3
 8007b72:	bb5c      	cbnz	r4, 8007bcc <_malloc_r+0x90>
 8007b74:	4629      	mov	r1, r5
 8007b76:	4638      	mov	r0, r7
 8007b78:	f7ff ffc0 	bl	8007afc <sbrk_aligned>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	4604      	mov	r4, r0
 8007b80:	d155      	bne.n	8007c2e <_malloc_r+0xf2>
 8007b82:	f8d8 4000 	ldr.w	r4, [r8]
 8007b86:	4626      	mov	r6, r4
 8007b88:	2e00      	cmp	r6, #0
 8007b8a:	d145      	bne.n	8007c18 <_malloc_r+0xdc>
 8007b8c:	2c00      	cmp	r4, #0
 8007b8e:	d048      	beq.n	8007c22 <_malloc_r+0xe6>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	4631      	mov	r1, r6
 8007b94:	4638      	mov	r0, r7
 8007b96:	eb04 0903 	add.w	r9, r4, r3
 8007b9a:	f001 fdd1 	bl	8009740 <_sbrk_r>
 8007b9e:	4581      	cmp	r9, r0
 8007ba0:	d13f      	bne.n	8007c22 <_malloc_r+0xe6>
 8007ba2:	6821      	ldr	r1, [r4, #0]
 8007ba4:	1a6d      	subs	r5, r5, r1
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	4638      	mov	r0, r7
 8007baa:	f7ff ffa7 	bl	8007afc <sbrk_aligned>
 8007bae:	3001      	adds	r0, #1
 8007bb0:	d037      	beq.n	8007c22 <_malloc_r+0xe6>
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	442b      	add	r3, r5
 8007bb6:	6023      	str	r3, [r4, #0]
 8007bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d038      	beq.n	8007c32 <_malloc_r+0xf6>
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	42a2      	cmp	r2, r4
 8007bc4:	d12b      	bne.n	8007c1e <_malloc_r+0xe2>
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	605a      	str	r2, [r3, #4]
 8007bca:	e00f      	b.n	8007bec <_malloc_r+0xb0>
 8007bcc:	6822      	ldr	r2, [r4, #0]
 8007bce:	1b52      	subs	r2, r2, r5
 8007bd0:	d41f      	bmi.n	8007c12 <_malloc_r+0xd6>
 8007bd2:	2a0b      	cmp	r2, #11
 8007bd4:	d917      	bls.n	8007c06 <_malloc_r+0xca>
 8007bd6:	1961      	adds	r1, r4, r5
 8007bd8:	42a3      	cmp	r3, r4
 8007bda:	6025      	str	r5, [r4, #0]
 8007bdc:	bf18      	it	ne
 8007bde:	6059      	strne	r1, [r3, #4]
 8007be0:	6863      	ldr	r3, [r4, #4]
 8007be2:	bf08      	it	eq
 8007be4:	f8c8 1000 	streq.w	r1, [r8]
 8007be8:	5162      	str	r2, [r4, r5]
 8007bea:	604b      	str	r3, [r1, #4]
 8007bec:	4638      	mov	r0, r7
 8007bee:	f104 060b 	add.w	r6, r4, #11
 8007bf2:	f000 f829 	bl	8007c48 <__malloc_unlock>
 8007bf6:	f026 0607 	bic.w	r6, r6, #7
 8007bfa:	1d23      	adds	r3, r4, #4
 8007bfc:	1af2      	subs	r2, r6, r3
 8007bfe:	d0ae      	beq.n	8007b5e <_malloc_r+0x22>
 8007c00:	1b9b      	subs	r3, r3, r6
 8007c02:	50a3      	str	r3, [r4, r2]
 8007c04:	e7ab      	b.n	8007b5e <_malloc_r+0x22>
 8007c06:	42a3      	cmp	r3, r4
 8007c08:	6862      	ldr	r2, [r4, #4]
 8007c0a:	d1dd      	bne.n	8007bc8 <_malloc_r+0x8c>
 8007c0c:	f8c8 2000 	str.w	r2, [r8]
 8007c10:	e7ec      	b.n	8007bec <_malloc_r+0xb0>
 8007c12:	4623      	mov	r3, r4
 8007c14:	6864      	ldr	r4, [r4, #4]
 8007c16:	e7ac      	b.n	8007b72 <_malloc_r+0x36>
 8007c18:	4634      	mov	r4, r6
 8007c1a:	6876      	ldr	r6, [r6, #4]
 8007c1c:	e7b4      	b.n	8007b88 <_malloc_r+0x4c>
 8007c1e:	4613      	mov	r3, r2
 8007c20:	e7cc      	b.n	8007bbc <_malloc_r+0x80>
 8007c22:	230c      	movs	r3, #12
 8007c24:	603b      	str	r3, [r7, #0]
 8007c26:	4638      	mov	r0, r7
 8007c28:	f000 f80e 	bl	8007c48 <__malloc_unlock>
 8007c2c:	e797      	b.n	8007b5e <_malloc_r+0x22>
 8007c2e:	6025      	str	r5, [r4, #0]
 8007c30:	e7dc      	b.n	8007bec <_malloc_r+0xb0>
 8007c32:	605b      	str	r3, [r3, #4]
 8007c34:	deff      	udf	#255	; 0xff
 8007c36:	bf00      	nop
 8007c38:	20000b8c 	.word	0x20000b8c

08007c3c <__malloc_lock>:
 8007c3c:	4801      	ldr	r0, [pc, #4]	; (8007c44 <__malloc_lock+0x8>)
 8007c3e:	f7ff b884 	b.w	8006d4a <__retarget_lock_acquire_recursive>
 8007c42:	bf00      	nop
 8007c44:	20000b88 	.word	0x20000b88

08007c48 <__malloc_unlock>:
 8007c48:	4801      	ldr	r0, [pc, #4]	; (8007c50 <__malloc_unlock+0x8>)
 8007c4a:	f7ff b87f 	b.w	8006d4c <__retarget_lock_release_recursive>
 8007c4e:	bf00      	nop
 8007c50:	20000b88 	.word	0x20000b88

08007c54 <_Balloc>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	69c6      	ldr	r6, [r0, #28]
 8007c58:	4604      	mov	r4, r0
 8007c5a:	460d      	mov	r5, r1
 8007c5c:	b976      	cbnz	r6, 8007c7c <_Balloc+0x28>
 8007c5e:	2010      	movs	r0, #16
 8007c60:	f7ff ff44 	bl	8007aec <malloc>
 8007c64:	4602      	mov	r2, r0
 8007c66:	61e0      	str	r0, [r4, #28]
 8007c68:	b920      	cbnz	r0, 8007c74 <_Balloc+0x20>
 8007c6a:	4b18      	ldr	r3, [pc, #96]	; (8007ccc <_Balloc+0x78>)
 8007c6c:	4818      	ldr	r0, [pc, #96]	; (8007cd0 <_Balloc+0x7c>)
 8007c6e:	216b      	movs	r1, #107	; 0x6b
 8007c70:	f001 fd8e 	bl	8009790 <__assert_func>
 8007c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c78:	6006      	str	r6, [r0, #0]
 8007c7a:	60c6      	str	r6, [r0, #12]
 8007c7c:	69e6      	ldr	r6, [r4, #28]
 8007c7e:	68f3      	ldr	r3, [r6, #12]
 8007c80:	b183      	cbz	r3, 8007ca4 <_Balloc+0x50>
 8007c82:	69e3      	ldr	r3, [r4, #28]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c8a:	b9b8      	cbnz	r0, 8007cbc <_Balloc+0x68>
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	fa01 f605 	lsl.w	r6, r1, r5
 8007c92:	1d72      	adds	r2, r6, #5
 8007c94:	0092      	lsls	r2, r2, #2
 8007c96:	4620      	mov	r0, r4
 8007c98:	f001 fd98 	bl	80097cc <_calloc_r>
 8007c9c:	b160      	cbz	r0, 8007cb8 <_Balloc+0x64>
 8007c9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ca2:	e00e      	b.n	8007cc2 <_Balloc+0x6e>
 8007ca4:	2221      	movs	r2, #33	; 0x21
 8007ca6:	2104      	movs	r1, #4
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f001 fd8f 	bl	80097cc <_calloc_r>
 8007cae:	69e3      	ldr	r3, [r4, #28]
 8007cb0:	60f0      	str	r0, [r6, #12]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1e4      	bne.n	8007c82 <_Balloc+0x2e>
 8007cb8:	2000      	movs	r0, #0
 8007cba:	bd70      	pop	{r4, r5, r6, pc}
 8007cbc:	6802      	ldr	r2, [r0, #0]
 8007cbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007cc8:	e7f7      	b.n	8007cba <_Balloc+0x66>
 8007cca:	bf00      	nop
 8007ccc:	0800a69e 	.word	0x0800a69e
 8007cd0:	0800a71e 	.word	0x0800a71e

08007cd4 <_Bfree>:
 8007cd4:	b570      	push	{r4, r5, r6, lr}
 8007cd6:	69c6      	ldr	r6, [r0, #28]
 8007cd8:	4605      	mov	r5, r0
 8007cda:	460c      	mov	r4, r1
 8007cdc:	b976      	cbnz	r6, 8007cfc <_Bfree+0x28>
 8007cde:	2010      	movs	r0, #16
 8007ce0:	f7ff ff04 	bl	8007aec <malloc>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	61e8      	str	r0, [r5, #28]
 8007ce8:	b920      	cbnz	r0, 8007cf4 <_Bfree+0x20>
 8007cea:	4b09      	ldr	r3, [pc, #36]	; (8007d10 <_Bfree+0x3c>)
 8007cec:	4809      	ldr	r0, [pc, #36]	; (8007d14 <_Bfree+0x40>)
 8007cee:	218f      	movs	r1, #143	; 0x8f
 8007cf0:	f001 fd4e 	bl	8009790 <__assert_func>
 8007cf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cf8:	6006      	str	r6, [r0, #0]
 8007cfa:	60c6      	str	r6, [r0, #12]
 8007cfc:	b13c      	cbz	r4, 8007d0e <_Bfree+0x3a>
 8007cfe:	69eb      	ldr	r3, [r5, #28]
 8007d00:	6862      	ldr	r2, [r4, #4]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d08:	6021      	str	r1, [r4, #0]
 8007d0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}
 8007d10:	0800a69e 	.word	0x0800a69e
 8007d14:	0800a71e 	.word	0x0800a71e

08007d18 <__multadd>:
 8007d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1c:	690d      	ldr	r5, [r1, #16]
 8007d1e:	4607      	mov	r7, r0
 8007d20:	460c      	mov	r4, r1
 8007d22:	461e      	mov	r6, r3
 8007d24:	f101 0c14 	add.w	ip, r1, #20
 8007d28:	2000      	movs	r0, #0
 8007d2a:	f8dc 3000 	ldr.w	r3, [ip]
 8007d2e:	b299      	uxth	r1, r3
 8007d30:	fb02 6101 	mla	r1, r2, r1, r6
 8007d34:	0c1e      	lsrs	r6, r3, #16
 8007d36:	0c0b      	lsrs	r3, r1, #16
 8007d38:	fb02 3306 	mla	r3, r2, r6, r3
 8007d3c:	b289      	uxth	r1, r1
 8007d3e:	3001      	adds	r0, #1
 8007d40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d44:	4285      	cmp	r5, r0
 8007d46:	f84c 1b04 	str.w	r1, [ip], #4
 8007d4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d4e:	dcec      	bgt.n	8007d2a <__multadd+0x12>
 8007d50:	b30e      	cbz	r6, 8007d96 <__multadd+0x7e>
 8007d52:	68a3      	ldr	r3, [r4, #8]
 8007d54:	42ab      	cmp	r3, r5
 8007d56:	dc19      	bgt.n	8007d8c <__multadd+0x74>
 8007d58:	6861      	ldr	r1, [r4, #4]
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	3101      	adds	r1, #1
 8007d5e:	f7ff ff79 	bl	8007c54 <_Balloc>
 8007d62:	4680      	mov	r8, r0
 8007d64:	b928      	cbnz	r0, 8007d72 <__multadd+0x5a>
 8007d66:	4602      	mov	r2, r0
 8007d68:	4b0c      	ldr	r3, [pc, #48]	; (8007d9c <__multadd+0x84>)
 8007d6a:	480d      	ldr	r0, [pc, #52]	; (8007da0 <__multadd+0x88>)
 8007d6c:	21ba      	movs	r1, #186	; 0xba
 8007d6e:	f001 fd0f 	bl	8009790 <__assert_func>
 8007d72:	6922      	ldr	r2, [r4, #16]
 8007d74:	3202      	adds	r2, #2
 8007d76:	f104 010c 	add.w	r1, r4, #12
 8007d7a:	0092      	lsls	r2, r2, #2
 8007d7c:	300c      	adds	r0, #12
 8007d7e:	f001 fcef 	bl	8009760 <memcpy>
 8007d82:	4621      	mov	r1, r4
 8007d84:	4638      	mov	r0, r7
 8007d86:	f7ff ffa5 	bl	8007cd4 <_Bfree>
 8007d8a:	4644      	mov	r4, r8
 8007d8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d90:	3501      	adds	r5, #1
 8007d92:	615e      	str	r6, [r3, #20]
 8007d94:	6125      	str	r5, [r4, #16]
 8007d96:	4620      	mov	r0, r4
 8007d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d9c:	0800a70d 	.word	0x0800a70d
 8007da0:	0800a71e 	.word	0x0800a71e

08007da4 <__s2b>:
 8007da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007da8:	460c      	mov	r4, r1
 8007daa:	4615      	mov	r5, r2
 8007dac:	461f      	mov	r7, r3
 8007dae:	2209      	movs	r2, #9
 8007db0:	3308      	adds	r3, #8
 8007db2:	4606      	mov	r6, r0
 8007db4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007db8:	2100      	movs	r1, #0
 8007dba:	2201      	movs	r2, #1
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	db09      	blt.n	8007dd4 <__s2b+0x30>
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	f7ff ff47 	bl	8007c54 <_Balloc>
 8007dc6:	b940      	cbnz	r0, 8007dda <__s2b+0x36>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	4b19      	ldr	r3, [pc, #100]	; (8007e30 <__s2b+0x8c>)
 8007dcc:	4819      	ldr	r0, [pc, #100]	; (8007e34 <__s2b+0x90>)
 8007dce:	21d3      	movs	r1, #211	; 0xd3
 8007dd0:	f001 fcde 	bl	8009790 <__assert_func>
 8007dd4:	0052      	lsls	r2, r2, #1
 8007dd6:	3101      	adds	r1, #1
 8007dd8:	e7f0      	b.n	8007dbc <__s2b+0x18>
 8007dda:	9b08      	ldr	r3, [sp, #32]
 8007ddc:	6143      	str	r3, [r0, #20]
 8007dde:	2d09      	cmp	r5, #9
 8007de0:	f04f 0301 	mov.w	r3, #1
 8007de4:	6103      	str	r3, [r0, #16]
 8007de6:	dd16      	ble.n	8007e16 <__s2b+0x72>
 8007de8:	f104 0909 	add.w	r9, r4, #9
 8007dec:	46c8      	mov	r8, r9
 8007dee:	442c      	add	r4, r5
 8007df0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007df4:	4601      	mov	r1, r0
 8007df6:	3b30      	subs	r3, #48	; 0x30
 8007df8:	220a      	movs	r2, #10
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f7ff ff8c 	bl	8007d18 <__multadd>
 8007e00:	45a0      	cmp	r8, r4
 8007e02:	d1f5      	bne.n	8007df0 <__s2b+0x4c>
 8007e04:	f1a5 0408 	sub.w	r4, r5, #8
 8007e08:	444c      	add	r4, r9
 8007e0a:	1b2d      	subs	r5, r5, r4
 8007e0c:	1963      	adds	r3, r4, r5
 8007e0e:	42bb      	cmp	r3, r7
 8007e10:	db04      	blt.n	8007e1c <__s2b+0x78>
 8007e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e16:	340a      	adds	r4, #10
 8007e18:	2509      	movs	r5, #9
 8007e1a:	e7f6      	b.n	8007e0a <__s2b+0x66>
 8007e1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e20:	4601      	mov	r1, r0
 8007e22:	3b30      	subs	r3, #48	; 0x30
 8007e24:	220a      	movs	r2, #10
 8007e26:	4630      	mov	r0, r6
 8007e28:	f7ff ff76 	bl	8007d18 <__multadd>
 8007e2c:	e7ee      	b.n	8007e0c <__s2b+0x68>
 8007e2e:	bf00      	nop
 8007e30:	0800a70d 	.word	0x0800a70d
 8007e34:	0800a71e 	.word	0x0800a71e

08007e38 <__hi0bits>:
 8007e38:	0c03      	lsrs	r3, r0, #16
 8007e3a:	041b      	lsls	r3, r3, #16
 8007e3c:	b9d3      	cbnz	r3, 8007e74 <__hi0bits+0x3c>
 8007e3e:	0400      	lsls	r0, r0, #16
 8007e40:	2310      	movs	r3, #16
 8007e42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007e46:	bf04      	itt	eq
 8007e48:	0200      	lsleq	r0, r0, #8
 8007e4a:	3308      	addeq	r3, #8
 8007e4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007e50:	bf04      	itt	eq
 8007e52:	0100      	lsleq	r0, r0, #4
 8007e54:	3304      	addeq	r3, #4
 8007e56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007e5a:	bf04      	itt	eq
 8007e5c:	0080      	lsleq	r0, r0, #2
 8007e5e:	3302      	addeq	r3, #2
 8007e60:	2800      	cmp	r0, #0
 8007e62:	db05      	blt.n	8007e70 <__hi0bits+0x38>
 8007e64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007e68:	f103 0301 	add.w	r3, r3, #1
 8007e6c:	bf08      	it	eq
 8007e6e:	2320      	moveq	r3, #32
 8007e70:	4618      	mov	r0, r3
 8007e72:	4770      	bx	lr
 8007e74:	2300      	movs	r3, #0
 8007e76:	e7e4      	b.n	8007e42 <__hi0bits+0xa>

08007e78 <__lo0bits>:
 8007e78:	6803      	ldr	r3, [r0, #0]
 8007e7a:	f013 0207 	ands.w	r2, r3, #7
 8007e7e:	d00c      	beq.n	8007e9a <__lo0bits+0x22>
 8007e80:	07d9      	lsls	r1, r3, #31
 8007e82:	d422      	bmi.n	8007eca <__lo0bits+0x52>
 8007e84:	079a      	lsls	r2, r3, #30
 8007e86:	bf49      	itett	mi
 8007e88:	085b      	lsrmi	r3, r3, #1
 8007e8a:	089b      	lsrpl	r3, r3, #2
 8007e8c:	6003      	strmi	r3, [r0, #0]
 8007e8e:	2201      	movmi	r2, #1
 8007e90:	bf5c      	itt	pl
 8007e92:	6003      	strpl	r3, [r0, #0]
 8007e94:	2202      	movpl	r2, #2
 8007e96:	4610      	mov	r0, r2
 8007e98:	4770      	bx	lr
 8007e9a:	b299      	uxth	r1, r3
 8007e9c:	b909      	cbnz	r1, 8007ea2 <__lo0bits+0x2a>
 8007e9e:	0c1b      	lsrs	r3, r3, #16
 8007ea0:	2210      	movs	r2, #16
 8007ea2:	b2d9      	uxtb	r1, r3
 8007ea4:	b909      	cbnz	r1, 8007eaa <__lo0bits+0x32>
 8007ea6:	3208      	adds	r2, #8
 8007ea8:	0a1b      	lsrs	r3, r3, #8
 8007eaa:	0719      	lsls	r1, r3, #28
 8007eac:	bf04      	itt	eq
 8007eae:	091b      	lsreq	r3, r3, #4
 8007eb0:	3204      	addeq	r2, #4
 8007eb2:	0799      	lsls	r1, r3, #30
 8007eb4:	bf04      	itt	eq
 8007eb6:	089b      	lsreq	r3, r3, #2
 8007eb8:	3202      	addeq	r2, #2
 8007eba:	07d9      	lsls	r1, r3, #31
 8007ebc:	d403      	bmi.n	8007ec6 <__lo0bits+0x4e>
 8007ebe:	085b      	lsrs	r3, r3, #1
 8007ec0:	f102 0201 	add.w	r2, r2, #1
 8007ec4:	d003      	beq.n	8007ece <__lo0bits+0x56>
 8007ec6:	6003      	str	r3, [r0, #0]
 8007ec8:	e7e5      	b.n	8007e96 <__lo0bits+0x1e>
 8007eca:	2200      	movs	r2, #0
 8007ecc:	e7e3      	b.n	8007e96 <__lo0bits+0x1e>
 8007ece:	2220      	movs	r2, #32
 8007ed0:	e7e1      	b.n	8007e96 <__lo0bits+0x1e>
	...

08007ed4 <__i2b>:
 8007ed4:	b510      	push	{r4, lr}
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	2101      	movs	r1, #1
 8007eda:	f7ff febb 	bl	8007c54 <_Balloc>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	b928      	cbnz	r0, 8007eee <__i2b+0x1a>
 8007ee2:	4b05      	ldr	r3, [pc, #20]	; (8007ef8 <__i2b+0x24>)
 8007ee4:	4805      	ldr	r0, [pc, #20]	; (8007efc <__i2b+0x28>)
 8007ee6:	f240 1145 	movw	r1, #325	; 0x145
 8007eea:	f001 fc51 	bl	8009790 <__assert_func>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	6144      	str	r4, [r0, #20]
 8007ef2:	6103      	str	r3, [r0, #16]
 8007ef4:	bd10      	pop	{r4, pc}
 8007ef6:	bf00      	nop
 8007ef8:	0800a70d 	.word	0x0800a70d
 8007efc:	0800a71e 	.word	0x0800a71e

08007f00 <__multiply>:
 8007f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f04:	4691      	mov	r9, r2
 8007f06:	690a      	ldr	r2, [r1, #16]
 8007f08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	bfb8      	it	lt
 8007f10:	460b      	movlt	r3, r1
 8007f12:	460c      	mov	r4, r1
 8007f14:	bfbc      	itt	lt
 8007f16:	464c      	movlt	r4, r9
 8007f18:	4699      	movlt	r9, r3
 8007f1a:	6927      	ldr	r7, [r4, #16]
 8007f1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007f20:	68a3      	ldr	r3, [r4, #8]
 8007f22:	6861      	ldr	r1, [r4, #4]
 8007f24:	eb07 060a 	add.w	r6, r7, sl
 8007f28:	42b3      	cmp	r3, r6
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	bfb8      	it	lt
 8007f2e:	3101      	addlt	r1, #1
 8007f30:	f7ff fe90 	bl	8007c54 <_Balloc>
 8007f34:	b930      	cbnz	r0, 8007f44 <__multiply+0x44>
 8007f36:	4602      	mov	r2, r0
 8007f38:	4b44      	ldr	r3, [pc, #272]	; (800804c <__multiply+0x14c>)
 8007f3a:	4845      	ldr	r0, [pc, #276]	; (8008050 <__multiply+0x150>)
 8007f3c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007f40:	f001 fc26 	bl	8009790 <__assert_func>
 8007f44:	f100 0514 	add.w	r5, r0, #20
 8007f48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f4c:	462b      	mov	r3, r5
 8007f4e:	2200      	movs	r2, #0
 8007f50:	4543      	cmp	r3, r8
 8007f52:	d321      	bcc.n	8007f98 <__multiply+0x98>
 8007f54:	f104 0314 	add.w	r3, r4, #20
 8007f58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007f5c:	f109 0314 	add.w	r3, r9, #20
 8007f60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007f64:	9202      	str	r2, [sp, #8]
 8007f66:	1b3a      	subs	r2, r7, r4
 8007f68:	3a15      	subs	r2, #21
 8007f6a:	f022 0203 	bic.w	r2, r2, #3
 8007f6e:	3204      	adds	r2, #4
 8007f70:	f104 0115 	add.w	r1, r4, #21
 8007f74:	428f      	cmp	r7, r1
 8007f76:	bf38      	it	cc
 8007f78:	2204      	movcc	r2, #4
 8007f7a:	9201      	str	r2, [sp, #4]
 8007f7c:	9a02      	ldr	r2, [sp, #8]
 8007f7e:	9303      	str	r3, [sp, #12]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d80c      	bhi.n	8007f9e <__multiply+0x9e>
 8007f84:	2e00      	cmp	r6, #0
 8007f86:	dd03      	ble.n	8007f90 <__multiply+0x90>
 8007f88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d05b      	beq.n	8008048 <__multiply+0x148>
 8007f90:	6106      	str	r6, [r0, #16]
 8007f92:	b005      	add	sp, #20
 8007f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f98:	f843 2b04 	str.w	r2, [r3], #4
 8007f9c:	e7d8      	b.n	8007f50 <__multiply+0x50>
 8007f9e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007fa2:	f1ba 0f00 	cmp.w	sl, #0
 8007fa6:	d024      	beq.n	8007ff2 <__multiply+0xf2>
 8007fa8:	f104 0e14 	add.w	lr, r4, #20
 8007fac:	46a9      	mov	r9, r5
 8007fae:	f04f 0c00 	mov.w	ip, #0
 8007fb2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007fb6:	f8d9 1000 	ldr.w	r1, [r9]
 8007fba:	fa1f fb82 	uxth.w	fp, r2
 8007fbe:	b289      	uxth	r1, r1
 8007fc0:	fb0a 110b 	mla	r1, sl, fp, r1
 8007fc4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007fc8:	f8d9 2000 	ldr.w	r2, [r9]
 8007fcc:	4461      	add	r1, ip
 8007fce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007fd2:	fb0a c20b 	mla	r2, sl, fp, ip
 8007fd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007fda:	b289      	uxth	r1, r1
 8007fdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007fe0:	4577      	cmp	r7, lr
 8007fe2:	f849 1b04 	str.w	r1, [r9], #4
 8007fe6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007fea:	d8e2      	bhi.n	8007fb2 <__multiply+0xb2>
 8007fec:	9a01      	ldr	r2, [sp, #4]
 8007fee:	f845 c002 	str.w	ip, [r5, r2]
 8007ff2:	9a03      	ldr	r2, [sp, #12]
 8007ff4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	f1b9 0f00 	cmp.w	r9, #0
 8007ffe:	d021      	beq.n	8008044 <__multiply+0x144>
 8008000:	6829      	ldr	r1, [r5, #0]
 8008002:	f104 0c14 	add.w	ip, r4, #20
 8008006:	46ae      	mov	lr, r5
 8008008:	f04f 0a00 	mov.w	sl, #0
 800800c:	f8bc b000 	ldrh.w	fp, [ip]
 8008010:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008014:	fb09 220b 	mla	r2, r9, fp, r2
 8008018:	4452      	add	r2, sl
 800801a:	b289      	uxth	r1, r1
 800801c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008020:	f84e 1b04 	str.w	r1, [lr], #4
 8008024:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008028:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800802c:	f8be 1000 	ldrh.w	r1, [lr]
 8008030:	fb09 110a 	mla	r1, r9, sl, r1
 8008034:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008038:	4567      	cmp	r7, ip
 800803a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800803e:	d8e5      	bhi.n	800800c <__multiply+0x10c>
 8008040:	9a01      	ldr	r2, [sp, #4]
 8008042:	50a9      	str	r1, [r5, r2]
 8008044:	3504      	adds	r5, #4
 8008046:	e799      	b.n	8007f7c <__multiply+0x7c>
 8008048:	3e01      	subs	r6, #1
 800804a:	e79b      	b.n	8007f84 <__multiply+0x84>
 800804c:	0800a70d 	.word	0x0800a70d
 8008050:	0800a71e 	.word	0x0800a71e

08008054 <__pow5mult>:
 8008054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008058:	4615      	mov	r5, r2
 800805a:	f012 0203 	ands.w	r2, r2, #3
 800805e:	4606      	mov	r6, r0
 8008060:	460f      	mov	r7, r1
 8008062:	d007      	beq.n	8008074 <__pow5mult+0x20>
 8008064:	4c25      	ldr	r4, [pc, #148]	; (80080fc <__pow5mult+0xa8>)
 8008066:	3a01      	subs	r2, #1
 8008068:	2300      	movs	r3, #0
 800806a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800806e:	f7ff fe53 	bl	8007d18 <__multadd>
 8008072:	4607      	mov	r7, r0
 8008074:	10ad      	asrs	r5, r5, #2
 8008076:	d03d      	beq.n	80080f4 <__pow5mult+0xa0>
 8008078:	69f4      	ldr	r4, [r6, #28]
 800807a:	b97c      	cbnz	r4, 800809c <__pow5mult+0x48>
 800807c:	2010      	movs	r0, #16
 800807e:	f7ff fd35 	bl	8007aec <malloc>
 8008082:	4602      	mov	r2, r0
 8008084:	61f0      	str	r0, [r6, #28]
 8008086:	b928      	cbnz	r0, 8008094 <__pow5mult+0x40>
 8008088:	4b1d      	ldr	r3, [pc, #116]	; (8008100 <__pow5mult+0xac>)
 800808a:	481e      	ldr	r0, [pc, #120]	; (8008104 <__pow5mult+0xb0>)
 800808c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008090:	f001 fb7e 	bl	8009790 <__assert_func>
 8008094:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008098:	6004      	str	r4, [r0, #0]
 800809a:	60c4      	str	r4, [r0, #12]
 800809c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80080a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080a4:	b94c      	cbnz	r4, 80080ba <__pow5mult+0x66>
 80080a6:	f240 2171 	movw	r1, #625	; 0x271
 80080aa:	4630      	mov	r0, r6
 80080ac:	f7ff ff12 	bl	8007ed4 <__i2b>
 80080b0:	2300      	movs	r3, #0
 80080b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80080b6:	4604      	mov	r4, r0
 80080b8:	6003      	str	r3, [r0, #0]
 80080ba:	f04f 0900 	mov.w	r9, #0
 80080be:	07eb      	lsls	r3, r5, #31
 80080c0:	d50a      	bpl.n	80080d8 <__pow5mult+0x84>
 80080c2:	4639      	mov	r1, r7
 80080c4:	4622      	mov	r2, r4
 80080c6:	4630      	mov	r0, r6
 80080c8:	f7ff ff1a 	bl	8007f00 <__multiply>
 80080cc:	4639      	mov	r1, r7
 80080ce:	4680      	mov	r8, r0
 80080d0:	4630      	mov	r0, r6
 80080d2:	f7ff fdff 	bl	8007cd4 <_Bfree>
 80080d6:	4647      	mov	r7, r8
 80080d8:	106d      	asrs	r5, r5, #1
 80080da:	d00b      	beq.n	80080f4 <__pow5mult+0xa0>
 80080dc:	6820      	ldr	r0, [r4, #0]
 80080de:	b938      	cbnz	r0, 80080f0 <__pow5mult+0x9c>
 80080e0:	4622      	mov	r2, r4
 80080e2:	4621      	mov	r1, r4
 80080e4:	4630      	mov	r0, r6
 80080e6:	f7ff ff0b 	bl	8007f00 <__multiply>
 80080ea:	6020      	str	r0, [r4, #0]
 80080ec:	f8c0 9000 	str.w	r9, [r0]
 80080f0:	4604      	mov	r4, r0
 80080f2:	e7e4      	b.n	80080be <__pow5mult+0x6a>
 80080f4:	4638      	mov	r0, r7
 80080f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080fa:	bf00      	nop
 80080fc:	0800a868 	.word	0x0800a868
 8008100:	0800a69e 	.word	0x0800a69e
 8008104:	0800a71e 	.word	0x0800a71e

08008108 <__lshift>:
 8008108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800810c:	460c      	mov	r4, r1
 800810e:	6849      	ldr	r1, [r1, #4]
 8008110:	6923      	ldr	r3, [r4, #16]
 8008112:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008116:	68a3      	ldr	r3, [r4, #8]
 8008118:	4607      	mov	r7, r0
 800811a:	4691      	mov	r9, r2
 800811c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008120:	f108 0601 	add.w	r6, r8, #1
 8008124:	42b3      	cmp	r3, r6
 8008126:	db0b      	blt.n	8008140 <__lshift+0x38>
 8008128:	4638      	mov	r0, r7
 800812a:	f7ff fd93 	bl	8007c54 <_Balloc>
 800812e:	4605      	mov	r5, r0
 8008130:	b948      	cbnz	r0, 8008146 <__lshift+0x3e>
 8008132:	4602      	mov	r2, r0
 8008134:	4b28      	ldr	r3, [pc, #160]	; (80081d8 <__lshift+0xd0>)
 8008136:	4829      	ldr	r0, [pc, #164]	; (80081dc <__lshift+0xd4>)
 8008138:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800813c:	f001 fb28 	bl	8009790 <__assert_func>
 8008140:	3101      	adds	r1, #1
 8008142:	005b      	lsls	r3, r3, #1
 8008144:	e7ee      	b.n	8008124 <__lshift+0x1c>
 8008146:	2300      	movs	r3, #0
 8008148:	f100 0114 	add.w	r1, r0, #20
 800814c:	f100 0210 	add.w	r2, r0, #16
 8008150:	4618      	mov	r0, r3
 8008152:	4553      	cmp	r3, sl
 8008154:	db33      	blt.n	80081be <__lshift+0xb6>
 8008156:	6920      	ldr	r0, [r4, #16]
 8008158:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800815c:	f104 0314 	add.w	r3, r4, #20
 8008160:	f019 091f 	ands.w	r9, r9, #31
 8008164:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008168:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800816c:	d02b      	beq.n	80081c6 <__lshift+0xbe>
 800816e:	f1c9 0e20 	rsb	lr, r9, #32
 8008172:	468a      	mov	sl, r1
 8008174:	2200      	movs	r2, #0
 8008176:	6818      	ldr	r0, [r3, #0]
 8008178:	fa00 f009 	lsl.w	r0, r0, r9
 800817c:	4310      	orrs	r0, r2
 800817e:	f84a 0b04 	str.w	r0, [sl], #4
 8008182:	f853 2b04 	ldr.w	r2, [r3], #4
 8008186:	459c      	cmp	ip, r3
 8008188:	fa22 f20e 	lsr.w	r2, r2, lr
 800818c:	d8f3      	bhi.n	8008176 <__lshift+0x6e>
 800818e:	ebac 0304 	sub.w	r3, ip, r4
 8008192:	3b15      	subs	r3, #21
 8008194:	f023 0303 	bic.w	r3, r3, #3
 8008198:	3304      	adds	r3, #4
 800819a:	f104 0015 	add.w	r0, r4, #21
 800819e:	4584      	cmp	ip, r0
 80081a0:	bf38      	it	cc
 80081a2:	2304      	movcc	r3, #4
 80081a4:	50ca      	str	r2, [r1, r3]
 80081a6:	b10a      	cbz	r2, 80081ac <__lshift+0xa4>
 80081a8:	f108 0602 	add.w	r6, r8, #2
 80081ac:	3e01      	subs	r6, #1
 80081ae:	4638      	mov	r0, r7
 80081b0:	612e      	str	r6, [r5, #16]
 80081b2:	4621      	mov	r1, r4
 80081b4:	f7ff fd8e 	bl	8007cd4 <_Bfree>
 80081b8:	4628      	mov	r0, r5
 80081ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081be:	f842 0f04 	str.w	r0, [r2, #4]!
 80081c2:	3301      	adds	r3, #1
 80081c4:	e7c5      	b.n	8008152 <__lshift+0x4a>
 80081c6:	3904      	subs	r1, #4
 80081c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80081cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80081d0:	459c      	cmp	ip, r3
 80081d2:	d8f9      	bhi.n	80081c8 <__lshift+0xc0>
 80081d4:	e7ea      	b.n	80081ac <__lshift+0xa4>
 80081d6:	bf00      	nop
 80081d8:	0800a70d 	.word	0x0800a70d
 80081dc:	0800a71e 	.word	0x0800a71e

080081e0 <__mcmp>:
 80081e0:	b530      	push	{r4, r5, lr}
 80081e2:	6902      	ldr	r2, [r0, #16]
 80081e4:	690c      	ldr	r4, [r1, #16]
 80081e6:	1b12      	subs	r2, r2, r4
 80081e8:	d10e      	bne.n	8008208 <__mcmp+0x28>
 80081ea:	f100 0314 	add.w	r3, r0, #20
 80081ee:	3114      	adds	r1, #20
 80081f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80081f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80081f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80081fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008200:	42a5      	cmp	r5, r4
 8008202:	d003      	beq.n	800820c <__mcmp+0x2c>
 8008204:	d305      	bcc.n	8008212 <__mcmp+0x32>
 8008206:	2201      	movs	r2, #1
 8008208:	4610      	mov	r0, r2
 800820a:	bd30      	pop	{r4, r5, pc}
 800820c:	4283      	cmp	r3, r0
 800820e:	d3f3      	bcc.n	80081f8 <__mcmp+0x18>
 8008210:	e7fa      	b.n	8008208 <__mcmp+0x28>
 8008212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008216:	e7f7      	b.n	8008208 <__mcmp+0x28>

08008218 <__mdiff>:
 8008218:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	460c      	mov	r4, r1
 800821e:	4606      	mov	r6, r0
 8008220:	4611      	mov	r1, r2
 8008222:	4620      	mov	r0, r4
 8008224:	4690      	mov	r8, r2
 8008226:	f7ff ffdb 	bl	80081e0 <__mcmp>
 800822a:	1e05      	subs	r5, r0, #0
 800822c:	d110      	bne.n	8008250 <__mdiff+0x38>
 800822e:	4629      	mov	r1, r5
 8008230:	4630      	mov	r0, r6
 8008232:	f7ff fd0f 	bl	8007c54 <_Balloc>
 8008236:	b930      	cbnz	r0, 8008246 <__mdiff+0x2e>
 8008238:	4b3a      	ldr	r3, [pc, #232]	; (8008324 <__mdiff+0x10c>)
 800823a:	4602      	mov	r2, r0
 800823c:	f240 2137 	movw	r1, #567	; 0x237
 8008240:	4839      	ldr	r0, [pc, #228]	; (8008328 <__mdiff+0x110>)
 8008242:	f001 faa5 	bl	8009790 <__assert_func>
 8008246:	2301      	movs	r3, #1
 8008248:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800824c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008250:	bfa4      	itt	ge
 8008252:	4643      	movge	r3, r8
 8008254:	46a0      	movge	r8, r4
 8008256:	4630      	mov	r0, r6
 8008258:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800825c:	bfa6      	itte	ge
 800825e:	461c      	movge	r4, r3
 8008260:	2500      	movge	r5, #0
 8008262:	2501      	movlt	r5, #1
 8008264:	f7ff fcf6 	bl	8007c54 <_Balloc>
 8008268:	b920      	cbnz	r0, 8008274 <__mdiff+0x5c>
 800826a:	4b2e      	ldr	r3, [pc, #184]	; (8008324 <__mdiff+0x10c>)
 800826c:	4602      	mov	r2, r0
 800826e:	f240 2145 	movw	r1, #581	; 0x245
 8008272:	e7e5      	b.n	8008240 <__mdiff+0x28>
 8008274:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008278:	6926      	ldr	r6, [r4, #16]
 800827a:	60c5      	str	r5, [r0, #12]
 800827c:	f104 0914 	add.w	r9, r4, #20
 8008280:	f108 0514 	add.w	r5, r8, #20
 8008284:	f100 0e14 	add.w	lr, r0, #20
 8008288:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800828c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008290:	f108 0210 	add.w	r2, r8, #16
 8008294:	46f2      	mov	sl, lr
 8008296:	2100      	movs	r1, #0
 8008298:	f859 3b04 	ldr.w	r3, [r9], #4
 800829c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80082a0:	fa11 f88b 	uxtah	r8, r1, fp
 80082a4:	b299      	uxth	r1, r3
 80082a6:	0c1b      	lsrs	r3, r3, #16
 80082a8:	eba8 0801 	sub.w	r8, r8, r1
 80082ac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80082b0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80082b4:	fa1f f888 	uxth.w	r8, r8
 80082b8:	1419      	asrs	r1, r3, #16
 80082ba:	454e      	cmp	r6, r9
 80082bc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80082c0:	f84a 3b04 	str.w	r3, [sl], #4
 80082c4:	d8e8      	bhi.n	8008298 <__mdiff+0x80>
 80082c6:	1b33      	subs	r3, r6, r4
 80082c8:	3b15      	subs	r3, #21
 80082ca:	f023 0303 	bic.w	r3, r3, #3
 80082ce:	3304      	adds	r3, #4
 80082d0:	3415      	adds	r4, #21
 80082d2:	42a6      	cmp	r6, r4
 80082d4:	bf38      	it	cc
 80082d6:	2304      	movcc	r3, #4
 80082d8:	441d      	add	r5, r3
 80082da:	4473      	add	r3, lr
 80082dc:	469e      	mov	lr, r3
 80082de:	462e      	mov	r6, r5
 80082e0:	4566      	cmp	r6, ip
 80082e2:	d30e      	bcc.n	8008302 <__mdiff+0xea>
 80082e4:	f10c 0203 	add.w	r2, ip, #3
 80082e8:	1b52      	subs	r2, r2, r5
 80082ea:	f022 0203 	bic.w	r2, r2, #3
 80082ee:	3d03      	subs	r5, #3
 80082f0:	45ac      	cmp	ip, r5
 80082f2:	bf38      	it	cc
 80082f4:	2200      	movcc	r2, #0
 80082f6:	4413      	add	r3, r2
 80082f8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80082fc:	b17a      	cbz	r2, 800831e <__mdiff+0x106>
 80082fe:	6107      	str	r7, [r0, #16]
 8008300:	e7a4      	b.n	800824c <__mdiff+0x34>
 8008302:	f856 8b04 	ldr.w	r8, [r6], #4
 8008306:	fa11 f288 	uxtah	r2, r1, r8
 800830a:	1414      	asrs	r4, r2, #16
 800830c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008310:	b292      	uxth	r2, r2
 8008312:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008316:	f84e 2b04 	str.w	r2, [lr], #4
 800831a:	1421      	asrs	r1, r4, #16
 800831c:	e7e0      	b.n	80082e0 <__mdiff+0xc8>
 800831e:	3f01      	subs	r7, #1
 8008320:	e7ea      	b.n	80082f8 <__mdiff+0xe0>
 8008322:	bf00      	nop
 8008324:	0800a70d 	.word	0x0800a70d
 8008328:	0800a71e 	.word	0x0800a71e

0800832c <__ulp>:
 800832c:	b082      	sub	sp, #8
 800832e:	ed8d 0b00 	vstr	d0, [sp]
 8008332:	9a01      	ldr	r2, [sp, #4]
 8008334:	4b0f      	ldr	r3, [pc, #60]	; (8008374 <__ulp+0x48>)
 8008336:	4013      	ands	r3, r2
 8008338:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800833c:	2b00      	cmp	r3, #0
 800833e:	dc08      	bgt.n	8008352 <__ulp+0x26>
 8008340:	425b      	negs	r3, r3
 8008342:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008346:	ea4f 5223 	mov.w	r2, r3, asr #20
 800834a:	da04      	bge.n	8008356 <__ulp+0x2a>
 800834c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008350:	4113      	asrs	r3, r2
 8008352:	2200      	movs	r2, #0
 8008354:	e008      	b.n	8008368 <__ulp+0x3c>
 8008356:	f1a2 0314 	sub.w	r3, r2, #20
 800835a:	2b1e      	cmp	r3, #30
 800835c:	bfda      	itte	le
 800835e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008362:	40da      	lsrle	r2, r3
 8008364:	2201      	movgt	r2, #1
 8008366:	2300      	movs	r3, #0
 8008368:	4619      	mov	r1, r3
 800836a:	4610      	mov	r0, r2
 800836c:	ec41 0b10 	vmov	d0, r0, r1
 8008370:	b002      	add	sp, #8
 8008372:	4770      	bx	lr
 8008374:	7ff00000 	.word	0x7ff00000

08008378 <__b2d>:
 8008378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800837c:	6906      	ldr	r6, [r0, #16]
 800837e:	f100 0814 	add.w	r8, r0, #20
 8008382:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008386:	1f37      	subs	r7, r6, #4
 8008388:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800838c:	4610      	mov	r0, r2
 800838e:	f7ff fd53 	bl	8007e38 <__hi0bits>
 8008392:	f1c0 0320 	rsb	r3, r0, #32
 8008396:	280a      	cmp	r0, #10
 8008398:	600b      	str	r3, [r1, #0]
 800839a:	491b      	ldr	r1, [pc, #108]	; (8008408 <__b2d+0x90>)
 800839c:	dc15      	bgt.n	80083ca <__b2d+0x52>
 800839e:	f1c0 0c0b 	rsb	ip, r0, #11
 80083a2:	fa22 f30c 	lsr.w	r3, r2, ip
 80083a6:	45b8      	cmp	r8, r7
 80083a8:	ea43 0501 	orr.w	r5, r3, r1
 80083ac:	bf34      	ite	cc
 80083ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80083b2:	2300      	movcs	r3, #0
 80083b4:	3015      	adds	r0, #21
 80083b6:	fa02 f000 	lsl.w	r0, r2, r0
 80083ba:	fa23 f30c 	lsr.w	r3, r3, ip
 80083be:	4303      	orrs	r3, r0
 80083c0:	461c      	mov	r4, r3
 80083c2:	ec45 4b10 	vmov	d0, r4, r5
 80083c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083ca:	45b8      	cmp	r8, r7
 80083cc:	bf3a      	itte	cc
 80083ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80083d2:	f1a6 0708 	subcc.w	r7, r6, #8
 80083d6:	2300      	movcs	r3, #0
 80083d8:	380b      	subs	r0, #11
 80083da:	d012      	beq.n	8008402 <__b2d+0x8a>
 80083dc:	f1c0 0120 	rsb	r1, r0, #32
 80083e0:	fa23 f401 	lsr.w	r4, r3, r1
 80083e4:	4082      	lsls	r2, r0
 80083e6:	4322      	orrs	r2, r4
 80083e8:	4547      	cmp	r7, r8
 80083ea:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80083ee:	bf8c      	ite	hi
 80083f0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80083f4:	2200      	movls	r2, #0
 80083f6:	4083      	lsls	r3, r0
 80083f8:	40ca      	lsrs	r2, r1
 80083fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80083fe:	4313      	orrs	r3, r2
 8008400:	e7de      	b.n	80083c0 <__b2d+0x48>
 8008402:	ea42 0501 	orr.w	r5, r2, r1
 8008406:	e7db      	b.n	80083c0 <__b2d+0x48>
 8008408:	3ff00000 	.word	0x3ff00000

0800840c <__d2b>:
 800840c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008410:	460f      	mov	r7, r1
 8008412:	2101      	movs	r1, #1
 8008414:	ec59 8b10 	vmov	r8, r9, d0
 8008418:	4616      	mov	r6, r2
 800841a:	f7ff fc1b 	bl	8007c54 <_Balloc>
 800841e:	4604      	mov	r4, r0
 8008420:	b930      	cbnz	r0, 8008430 <__d2b+0x24>
 8008422:	4602      	mov	r2, r0
 8008424:	4b24      	ldr	r3, [pc, #144]	; (80084b8 <__d2b+0xac>)
 8008426:	4825      	ldr	r0, [pc, #148]	; (80084bc <__d2b+0xb0>)
 8008428:	f240 310f 	movw	r1, #783	; 0x30f
 800842c:	f001 f9b0 	bl	8009790 <__assert_func>
 8008430:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008434:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008438:	bb2d      	cbnz	r5, 8008486 <__d2b+0x7a>
 800843a:	9301      	str	r3, [sp, #4]
 800843c:	f1b8 0300 	subs.w	r3, r8, #0
 8008440:	d026      	beq.n	8008490 <__d2b+0x84>
 8008442:	4668      	mov	r0, sp
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	f7ff fd17 	bl	8007e78 <__lo0bits>
 800844a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800844e:	b1e8      	cbz	r0, 800848c <__d2b+0x80>
 8008450:	f1c0 0320 	rsb	r3, r0, #32
 8008454:	fa02 f303 	lsl.w	r3, r2, r3
 8008458:	430b      	orrs	r3, r1
 800845a:	40c2      	lsrs	r2, r0
 800845c:	6163      	str	r3, [r4, #20]
 800845e:	9201      	str	r2, [sp, #4]
 8008460:	9b01      	ldr	r3, [sp, #4]
 8008462:	61a3      	str	r3, [r4, #24]
 8008464:	2b00      	cmp	r3, #0
 8008466:	bf14      	ite	ne
 8008468:	2202      	movne	r2, #2
 800846a:	2201      	moveq	r2, #1
 800846c:	6122      	str	r2, [r4, #16]
 800846e:	b1bd      	cbz	r5, 80084a0 <__d2b+0x94>
 8008470:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008474:	4405      	add	r5, r0
 8008476:	603d      	str	r5, [r7, #0]
 8008478:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800847c:	6030      	str	r0, [r6, #0]
 800847e:	4620      	mov	r0, r4
 8008480:	b003      	add	sp, #12
 8008482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800848a:	e7d6      	b.n	800843a <__d2b+0x2e>
 800848c:	6161      	str	r1, [r4, #20]
 800848e:	e7e7      	b.n	8008460 <__d2b+0x54>
 8008490:	a801      	add	r0, sp, #4
 8008492:	f7ff fcf1 	bl	8007e78 <__lo0bits>
 8008496:	9b01      	ldr	r3, [sp, #4]
 8008498:	6163      	str	r3, [r4, #20]
 800849a:	3020      	adds	r0, #32
 800849c:	2201      	movs	r2, #1
 800849e:	e7e5      	b.n	800846c <__d2b+0x60>
 80084a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084a8:	6038      	str	r0, [r7, #0]
 80084aa:	6918      	ldr	r0, [r3, #16]
 80084ac:	f7ff fcc4 	bl	8007e38 <__hi0bits>
 80084b0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084b4:	e7e2      	b.n	800847c <__d2b+0x70>
 80084b6:	bf00      	nop
 80084b8:	0800a70d 	.word	0x0800a70d
 80084bc:	0800a71e 	.word	0x0800a71e

080084c0 <__ratio>:
 80084c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c4:	4688      	mov	r8, r1
 80084c6:	4669      	mov	r1, sp
 80084c8:	4681      	mov	r9, r0
 80084ca:	f7ff ff55 	bl	8008378 <__b2d>
 80084ce:	a901      	add	r1, sp, #4
 80084d0:	4640      	mov	r0, r8
 80084d2:	ec55 4b10 	vmov	r4, r5, d0
 80084d6:	f7ff ff4f 	bl	8008378 <__b2d>
 80084da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80084e2:	eba3 0c02 	sub.w	ip, r3, r2
 80084e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80084ea:	1a9b      	subs	r3, r3, r2
 80084ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80084f0:	ec51 0b10 	vmov	r0, r1, d0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	bfd6      	itet	le
 80084f8:	460a      	movle	r2, r1
 80084fa:	462a      	movgt	r2, r5
 80084fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008500:	468b      	mov	fp, r1
 8008502:	462f      	mov	r7, r5
 8008504:	bfd4      	ite	le
 8008506:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800850a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800850e:	4620      	mov	r0, r4
 8008510:	ee10 2a10 	vmov	r2, s0
 8008514:	465b      	mov	r3, fp
 8008516:	4639      	mov	r1, r7
 8008518:	f7f8 f9a8 	bl	800086c <__aeabi_ddiv>
 800851c:	ec41 0b10 	vmov	d0, r0, r1
 8008520:	b003      	add	sp, #12
 8008522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008526 <__copybits>:
 8008526:	3901      	subs	r1, #1
 8008528:	b570      	push	{r4, r5, r6, lr}
 800852a:	1149      	asrs	r1, r1, #5
 800852c:	6914      	ldr	r4, [r2, #16]
 800852e:	3101      	adds	r1, #1
 8008530:	f102 0314 	add.w	r3, r2, #20
 8008534:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008538:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800853c:	1f05      	subs	r5, r0, #4
 800853e:	42a3      	cmp	r3, r4
 8008540:	d30c      	bcc.n	800855c <__copybits+0x36>
 8008542:	1aa3      	subs	r3, r4, r2
 8008544:	3b11      	subs	r3, #17
 8008546:	f023 0303 	bic.w	r3, r3, #3
 800854a:	3211      	adds	r2, #17
 800854c:	42a2      	cmp	r2, r4
 800854e:	bf88      	it	hi
 8008550:	2300      	movhi	r3, #0
 8008552:	4418      	add	r0, r3
 8008554:	2300      	movs	r3, #0
 8008556:	4288      	cmp	r0, r1
 8008558:	d305      	bcc.n	8008566 <__copybits+0x40>
 800855a:	bd70      	pop	{r4, r5, r6, pc}
 800855c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008560:	f845 6f04 	str.w	r6, [r5, #4]!
 8008564:	e7eb      	b.n	800853e <__copybits+0x18>
 8008566:	f840 3b04 	str.w	r3, [r0], #4
 800856a:	e7f4      	b.n	8008556 <__copybits+0x30>

0800856c <__any_on>:
 800856c:	f100 0214 	add.w	r2, r0, #20
 8008570:	6900      	ldr	r0, [r0, #16]
 8008572:	114b      	asrs	r3, r1, #5
 8008574:	4298      	cmp	r0, r3
 8008576:	b510      	push	{r4, lr}
 8008578:	db11      	blt.n	800859e <__any_on+0x32>
 800857a:	dd0a      	ble.n	8008592 <__any_on+0x26>
 800857c:	f011 011f 	ands.w	r1, r1, #31
 8008580:	d007      	beq.n	8008592 <__any_on+0x26>
 8008582:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008586:	fa24 f001 	lsr.w	r0, r4, r1
 800858a:	fa00 f101 	lsl.w	r1, r0, r1
 800858e:	428c      	cmp	r4, r1
 8008590:	d10b      	bne.n	80085aa <__any_on+0x3e>
 8008592:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008596:	4293      	cmp	r3, r2
 8008598:	d803      	bhi.n	80085a2 <__any_on+0x36>
 800859a:	2000      	movs	r0, #0
 800859c:	bd10      	pop	{r4, pc}
 800859e:	4603      	mov	r3, r0
 80085a0:	e7f7      	b.n	8008592 <__any_on+0x26>
 80085a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085a6:	2900      	cmp	r1, #0
 80085a8:	d0f5      	beq.n	8008596 <__any_on+0x2a>
 80085aa:	2001      	movs	r0, #1
 80085ac:	e7f6      	b.n	800859c <__any_on+0x30>

080085ae <sulp>:
 80085ae:	b570      	push	{r4, r5, r6, lr}
 80085b0:	4604      	mov	r4, r0
 80085b2:	460d      	mov	r5, r1
 80085b4:	ec45 4b10 	vmov	d0, r4, r5
 80085b8:	4616      	mov	r6, r2
 80085ba:	f7ff feb7 	bl	800832c <__ulp>
 80085be:	ec51 0b10 	vmov	r0, r1, d0
 80085c2:	b17e      	cbz	r6, 80085e4 <sulp+0x36>
 80085c4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80085c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	dd09      	ble.n	80085e4 <sulp+0x36>
 80085d0:	051b      	lsls	r3, r3, #20
 80085d2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80085d6:	2400      	movs	r4, #0
 80085d8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80085dc:	4622      	mov	r2, r4
 80085de:	462b      	mov	r3, r5
 80085e0:	f7f8 f81a 	bl	8000618 <__aeabi_dmul>
 80085e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080085e8 <_strtod_l>:
 80085e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ec:	ed2d 8b02 	vpush	{d8}
 80085f0:	b09b      	sub	sp, #108	; 0x6c
 80085f2:	4604      	mov	r4, r0
 80085f4:	9213      	str	r2, [sp, #76]	; 0x4c
 80085f6:	2200      	movs	r2, #0
 80085f8:	9216      	str	r2, [sp, #88]	; 0x58
 80085fa:	460d      	mov	r5, r1
 80085fc:	f04f 0800 	mov.w	r8, #0
 8008600:	f04f 0900 	mov.w	r9, #0
 8008604:	460a      	mov	r2, r1
 8008606:	9215      	str	r2, [sp, #84]	; 0x54
 8008608:	7811      	ldrb	r1, [r2, #0]
 800860a:	292b      	cmp	r1, #43	; 0x2b
 800860c:	d04c      	beq.n	80086a8 <_strtod_l+0xc0>
 800860e:	d83a      	bhi.n	8008686 <_strtod_l+0x9e>
 8008610:	290d      	cmp	r1, #13
 8008612:	d834      	bhi.n	800867e <_strtod_l+0x96>
 8008614:	2908      	cmp	r1, #8
 8008616:	d834      	bhi.n	8008682 <_strtod_l+0x9a>
 8008618:	2900      	cmp	r1, #0
 800861a:	d03d      	beq.n	8008698 <_strtod_l+0xb0>
 800861c:	2200      	movs	r2, #0
 800861e:	920a      	str	r2, [sp, #40]	; 0x28
 8008620:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008622:	7832      	ldrb	r2, [r6, #0]
 8008624:	2a30      	cmp	r2, #48	; 0x30
 8008626:	f040 80b4 	bne.w	8008792 <_strtod_l+0x1aa>
 800862a:	7872      	ldrb	r2, [r6, #1]
 800862c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008630:	2a58      	cmp	r2, #88	; 0x58
 8008632:	d170      	bne.n	8008716 <_strtod_l+0x12e>
 8008634:	9302      	str	r3, [sp, #8]
 8008636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008638:	9301      	str	r3, [sp, #4]
 800863a:	ab16      	add	r3, sp, #88	; 0x58
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	4a8e      	ldr	r2, [pc, #568]	; (8008878 <_strtod_l+0x290>)
 8008640:	ab17      	add	r3, sp, #92	; 0x5c
 8008642:	a915      	add	r1, sp, #84	; 0x54
 8008644:	4620      	mov	r0, r4
 8008646:	f001 f93f 	bl	80098c8 <__gethex>
 800864a:	f010 070f 	ands.w	r7, r0, #15
 800864e:	4605      	mov	r5, r0
 8008650:	d005      	beq.n	800865e <_strtod_l+0x76>
 8008652:	2f06      	cmp	r7, #6
 8008654:	d12a      	bne.n	80086ac <_strtod_l+0xc4>
 8008656:	3601      	adds	r6, #1
 8008658:	2300      	movs	r3, #0
 800865a:	9615      	str	r6, [sp, #84]	; 0x54
 800865c:	930a      	str	r3, [sp, #40]	; 0x28
 800865e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008660:	2b00      	cmp	r3, #0
 8008662:	f040 857f 	bne.w	8009164 <_strtod_l+0xb7c>
 8008666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008668:	b1db      	cbz	r3, 80086a2 <_strtod_l+0xba>
 800866a:	4642      	mov	r2, r8
 800866c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008670:	ec43 2b10 	vmov	d0, r2, r3
 8008674:	b01b      	add	sp, #108	; 0x6c
 8008676:	ecbd 8b02 	vpop	{d8}
 800867a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800867e:	2920      	cmp	r1, #32
 8008680:	d1cc      	bne.n	800861c <_strtod_l+0x34>
 8008682:	3201      	adds	r2, #1
 8008684:	e7bf      	b.n	8008606 <_strtod_l+0x1e>
 8008686:	292d      	cmp	r1, #45	; 0x2d
 8008688:	d1c8      	bne.n	800861c <_strtod_l+0x34>
 800868a:	2101      	movs	r1, #1
 800868c:	910a      	str	r1, [sp, #40]	; 0x28
 800868e:	1c51      	adds	r1, r2, #1
 8008690:	9115      	str	r1, [sp, #84]	; 0x54
 8008692:	7852      	ldrb	r2, [r2, #1]
 8008694:	2a00      	cmp	r2, #0
 8008696:	d1c3      	bne.n	8008620 <_strtod_l+0x38>
 8008698:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800869a:	9515      	str	r5, [sp, #84]	; 0x54
 800869c:	2b00      	cmp	r3, #0
 800869e:	f040 855f 	bne.w	8009160 <_strtod_l+0xb78>
 80086a2:	4642      	mov	r2, r8
 80086a4:	464b      	mov	r3, r9
 80086a6:	e7e3      	b.n	8008670 <_strtod_l+0x88>
 80086a8:	2100      	movs	r1, #0
 80086aa:	e7ef      	b.n	800868c <_strtod_l+0xa4>
 80086ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80086ae:	b13a      	cbz	r2, 80086c0 <_strtod_l+0xd8>
 80086b0:	2135      	movs	r1, #53	; 0x35
 80086b2:	a818      	add	r0, sp, #96	; 0x60
 80086b4:	f7ff ff37 	bl	8008526 <__copybits>
 80086b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80086ba:	4620      	mov	r0, r4
 80086bc:	f7ff fb0a 	bl	8007cd4 <_Bfree>
 80086c0:	3f01      	subs	r7, #1
 80086c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80086c4:	2f04      	cmp	r7, #4
 80086c6:	d806      	bhi.n	80086d6 <_strtod_l+0xee>
 80086c8:	e8df f007 	tbb	[pc, r7]
 80086cc:	201d0314 	.word	0x201d0314
 80086d0:	14          	.byte	0x14
 80086d1:	00          	.byte	0x00
 80086d2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80086d6:	05e9      	lsls	r1, r5, #23
 80086d8:	bf48      	it	mi
 80086da:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80086de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086e2:	0d1b      	lsrs	r3, r3, #20
 80086e4:	051b      	lsls	r3, r3, #20
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1b9      	bne.n	800865e <_strtod_l+0x76>
 80086ea:	f7fe fb03 	bl	8006cf4 <__errno>
 80086ee:	2322      	movs	r3, #34	; 0x22
 80086f0:	6003      	str	r3, [r0, #0]
 80086f2:	e7b4      	b.n	800865e <_strtod_l+0x76>
 80086f4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80086f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80086fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008700:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008704:	e7e7      	b.n	80086d6 <_strtod_l+0xee>
 8008706:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008880 <_strtod_l+0x298>
 800870a:	e7e4      	b.n	80086d6 <_strtod_l+0xee>
 800870c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008710:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008714:	e7df      	b.n	80086d6 <_strtod_l+0xee>
 8008716:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	9215      	str	r2, [sp, #84]	; 0x54
 800871c:	785b      	ldrb	r3, [r3, #1]
 800871e:	2b30      	cmp	r3, #48	; 0x30
 8008720:	d0f9      	beq.n	8008716 <_strtod_l+0x12e>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d09b      	beq.n	800865e <_strtod_l+0x76>
 8008726:	2301      	movs	r3, #1
 8008728:	f04f 0a00 	mov.w	sl, #0
 800872c:	9304      	str	r3, [sp, #16]
 800872e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008730:	930b      	str	r3, [sp, #44]	; 0x2c
 8008732:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008736:	46d3      	mov	fp, sl
 8008738:	220a      	movs	r2, #10
 800873a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800873c:	7806      	ldrb	r6, [r0, #0]
 800873e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008742:	b2d9      	uxtb	r1, r3
 8008744:	2909      	cmp	r1, #9
 8008746:	d926      	bls.n	8008796 <_strtod_l+0x1ae>
 8008748:	494c      	ldr	r1, [pc, #304]	; (800887c <_strtod_l+0x294>)
 800874a:	2201      	movs	r2, #1
 800874c:	f000 ffe6 	bl	800971c <strncmp>
 8008750:	2800      	cmp	r0, #0
 8008752:	d030      	beq.n	80087b6 <_strtod_l+0x1ce>
 8008754:	2000      	movs	r0, #0
 8008756:	4632      	mov	r2, r6
 8008758:	9005      	str	r0, [sp, #20]
 800875a:	465e      	mov	r6, fp
 800875c:	4603      	mov	r3, r0
 800875e:	2a65      	cmp	r2, #101	; 0x65
 8008760:	d001      	beq.n	8008766 <_strtod_l+0x17e>
 8008762:	2a45      	cmp	r2, #69	; 0x45
 8008764:	d113      	bne.n	800878e <_strtod_l+0x1a6>
 8008766:	b91e      	cbnz	r6, 8008770 <_strtod_l+0x188>
 8008768:	9a04      	ldr	r2, [sp, #16]
 800876a:	4302      	orrs	r2, r0
 800876c:	d094      	beq.n	8008698 <_strtod_l+0xb0>
 800876e:	2600      	movs	r6, #0
 8008770:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008772:	1c6a      	adds	r2, r5, #1
 8008774:	9215      	str	r2, [sp, #84]	; 0x54
 8008776:	786a      	ldrb	r2, [r5, #1]
 8008778:	2a2b      	cmp	r2, #43	; 0x2b
 800877a:	d074      	beq.n	8008866 <_strtod_l+0x27e>
 800877c:	2a2d      	cmp	r2, #45	; 0x2d
 800877e:	d078      	beq.n	8008872 <_strtod_l+0x28a>
 8008780:	f04f 0c00 	mov.w	ip, #0
 8008784:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008788:	2909      	cmp	r1, #9
 800878a:	d97f      	bls.n	800888c <_strtod_l+0x2a4>
 800878c:	9515      	str	r5, [sp, #84]	; 0x54
 800878e:	2700      	movs	r7, #0
 8008790:	e09e      	b.n	80088d0 <_strtod_l+0x2e8>
 8008792:	2300      	movs	r3, #0
 8008794:	e7c8      	b.n	8008728 <_strtod_l+0x140>
 8008796:	f1bb 0f08 	cmp.w	fp, #8
 800879a:	bfd8      	it	le
 800879c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800879e:	f100 0001 	add.w	r0, r0, #1
 80087a2:	bfda      	itte	le
 80087a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80087a8:	9309      	strle	r3, [sp, #36]	; 0x24
 80087aa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80087ae:	f10b 0b01 	add.w	fp, fp, #1
 80087b2:	9015      	str	r0, [sp, #84]	; 0x54
 80087b4:	e7c1      	b.n	800873a <_strtod_l+0x152>
 80087b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	9215      	str	r2, [sp, #84]	; 0x54
 80087bc:	785a      	ldrb	r2, [r3, #1]
 80087be:	f1bb 0f00 	cmp.w	fp, #0
 80087c2:	d037      	beq.n	8008834 <_strtod_l+0x24c>
 80087c4:	9005      	str	r0, [sp, #20]
 80087c6:	465e      	mov	r6, fp
 80087c8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80087cc:	2b09      	cmp	r3, #9
 80087ce:	d912      	bls.n	80087f6 <_strtod_l+0x20e>
 80087d0:	2301      	movs	r3, #1
 80087d2:	e7c4      	b.n	800875e <_strtod_l+0x176>
 80087d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087d6:	1c5a      	adds	r2, r3, #1
 80087d8:	9215      	str	r2, [sp, #84]	; 0x54
 80087da:	785a      	ldrb	r2, [r3, #1]
 80087dc:	3001      	adds	r0, #1
 80087de:	2a30      	cmp	r2, #48	; 0x30
 80087e0:	d0f8      	beq.n	80087d4 <_strtod_l+0x1ec>
 80087e2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80087e6:	2b08      	cmp	r3, #8
 80087e8:	f200 84c1 	bhi.w	800916e <_strtod_l+0xb86>
 80087ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087ee:	9005      	str	r0, [sp, #20]
 80087f0:	2000      	movs	r0, #0
 80087f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80087f4:	4606      	mov	r6, r0
 80087f6:	3a30      	subs	r2, #48	; 0x30
 80087f8:	f100 0301 	add.w	r3, r0, #1
 80087fc:	d014      	beq.n	8008828 <_strtod_l+0x240>
 80087fe:	9905      	ldr	r1, [sp, #20]
 8008800:	4419      	add	r1, r3
 8008802:	9105      	str	r1, [sp, #20]
 8008804:	4633      	mov	r3, r6
 8008806:	eb00 0c06 	add.w	ip, r0, r6
 800880a:	210a      	movs	r1, #10
 800880c:	4563      	cmp	r3, ip
 800880e:	d113      	bne.n	8008838 <_strtod_l+0x250>
 8008810:	1833      	adds	r3, r6, r0
 8008812:	2b08      	cmp	r3, #8
 8008814:	f106 0601 	add.w	r6, r6, #1
 8008818:	4406      	add	r6, r0
 800881a:	dc1a      	bgt.n	8008852 <_strtod_l+0x26a>
 800881c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800881e:	230a      	movs	r3, #10
 8008820:	fb03 2301 	mla	r3, r3, r1, r2
 8008824:	9309      	str	r3, [sp, #36]	; 0x24
 8008826:	2300      	movs	r3, #0
 8008828:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800882a:	1c51      	adds	r1, r2, #1
 800882c:	9115      	str	r1, [sp, #84]	; 0x54
 800882e:	7852      	ldrb	r2, [r2, #1]
 8008830:	4618      	mov	r0, r3
 8008832:	e7c9      	b.n	80087c8 <_strtod_l+0x1e0>
 8008834:	4658      	mov	r0, fp
 8008836:	e7d2      	b.n	80087de <_strtod_l+0x1f6>
 8008838:	2b08      	cmp	r3, #8
 800883a:	f103 0301 	add.w	r3, r3, #1
 800883e:	dc03      	bgt.n	8008848 <_strtod_l+0x260>
 8008840:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008842:	434f      	muls	r7, r1
 8008844:	9709      	str	r7, [sp, #36]	; 0x24
 8008846:	e7e1      	b.n	800880c <_strtod_l+0x224>
 8008848:	2b10      	cmp	r3, #16
 800884a:	bfd8      	it	le
 800884c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008850:	e7dc      	b.n	800880c <_strtod_l+0x224>
 8008852:	2e10      	cmp	r6, #16
 8008854:	bfdc      	itt	le
 8008856:	230a      	movle	r3, #10
 8008858:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800885c:	e7e3      	b.n	8008826 <_strtod_l+0x23e>
 800885e:	2300      	movs	r3, #0
 8008860:	9305      	str	r3, [sp, #20]
 8008862:	2301      	movs	r3, #1
 8008864:	e780      	b.n	8008768 <_strtod_l+0x180>
 8008866:	f04f 0c00 	mov.w	ip, #0
 800886a:	1caa      	adds	r2, r5, #2
 800886c:	9215      	str	r2, [sp, #84]	; 0x54
 800886e:	78aa      	ldrb	r2, [r5, #2]
 8008870:	e788      	b.n	8008784 <_strtod_l+0x19c>
 8008872:	f04f 0c01 	mov.w	ip, #1
 8008876:	e7f8      	b.n	800886a <_strtod_l+0x282>
 8008878:	0800a878 	.word	0x0800a878
 800887c:	0800a874 	.word	0x0800a874
 8008880:	7ff00000 	.word	0x7ff00000
 8008884:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008886:	1c51      	adds	r1, r2, #1
 8008888:	9115      	str	r1, [sp, #84]	; 0x54
 800888a:	7852      	ldrb	r2, [r2, #1]
 800888c:	2a30      	cmp	r2, #48	; 0x30
 800888e:	d0f9      	beq.n	8008884 <_strtod_l+0x29c>
 8008890:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008894:	2908      	cmp	r1, #8
 8008896:	f63f af7a 	bhi.w	800878e <_strtod_l+0x1a6>
 800889a:	3a30      	subs	r2, #48	; 0x30
 800889c:	9208      	str	r2, [sp, #32]
 800889e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80088a0:	920c      	str	r2, [sp, #48]	; 0x30
 80088a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80088a4:	1c57      	adds	r7, r2, #1
 80088a6:	9715      	str	r7, [sp, #84]	; 0x54
 80088a8:	7852      	ldrb	r2, [r2, #1]
 80088aa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80088ae:	f1be 0f09 	cmp.w	lr, #9
 80088b2:	d938      	bls.n	8008926 <_strtod_l+0x33e>
 80088b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088b6:	1a7f      	subs	r7, r7, r1
 80088b8:	2f08      	cmp	r7, #8
 80088ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80088be:	dc03      	bgt.n	80088c8 <_strtod_l+0x2e0>
 80088c0:	9908      	ldr	r1, [sp, #32]
 80088c2:	428f      	cmp	r7, r1
 80088c4:	bfa8      	it	ge
 80088c6:	460f      	movge	r7, r1
 80088c8:	f1bc 0f00 	cmp.w	ip, #0
 80088cc:	d000      	beq.n	80088d0 <_strtod_l+0x2e8>
 80088ce:	427f      	negs	r7, r7
 80088d0:	2e00      	cmp	r6, #0
 80088d2:	d14f      	bne.n	8008974 <_strtod_l+0x38c>
 80088d4:	9904      	ldr	r1, [sp, #16]
 80088d6:	4301      	orrs	r1, r0
 80088d8:	f47f aec1 	bne.w	800865e <_strtod_l+0x76>
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f47f aedb 	bne.w	8008698 <_strtod_l+0xb0>
 80088e2:	2a69      	cmp	r2, #105	; 0x69
 80088e4:	d029      	beq.n	800893a <_strtod_l+0x352>
 80088e6:	dc26      	bgt.n	8008936 <_strtod_l+0x34e>
 80088e8:	2a49      	cmp	r2, #73	; 0x49
 80088ea:	d026      	beq.n	800893a <_strtod_l+0x352>
 80088ec:	2a4e      	cmp	r2, #78	; 0x4e
 80088ee:	f47f aed3 	bne.w	8008698 <_strtod_l+0xb0>
 80088f2:	499b      	ldr	r1, [pc, #620]	; (8008b60 <_strtod_l+0x578>)
 80088f4:	a815      	add	r0, sp, #84	; 0x54
 80088f6:	f001 fa27 	bl	8009d48 <__match>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	f43f aecc 	beq.w	8008698 <_strtod_l+0xb0>
 8008900:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	2b28      	cmp	r3, #40	; 0x28
 8008906:	d12f      	bne.n	8008968 <_strtod_l+0x380>
 8008908:	4996      	ldr	r1, [pc, #600]	; (8008b64 <_strtod_l+0x57c>)
 800890a:	aa18      	add	r2, sp, #96	; 0x60
 800890c:	a815      	add	r0, sp, #84	; 0x54
 800890e:	f001 fa2f 	bl	8009d70 <__hexnan>
 8008912:	2805      	cmp	r0, #5
 8008914:	d128      	bne.n	8008968 <_strtod_l+0x380>
 8008916:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008918:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800891c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008920:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008924:	e69b      	b.n	800865e <_strtod_l+0x76>
 8008926:	9f08      	ldr	r7, [sp, #32]
 8008928:	210a      	movs	r1, #10
 800892a:	fb01 2107 	mla	r1, r1, r7, r2
 800892e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008932:	9208      	str	r2, [sp, #32]
 8008934:	e7b5      	b.n	80088a2 <_strtod_l+0x2ba>
 8008936:	2a6e      	cmp	r2, #110	; 0x6e
 8008938:	e7d9      	b.n	80088ee <_strtod_l+0x306>
 800893a:	498b      	ldr	r1, [pc, #556]	; (8008b68 <_strtod_l+0x580>)
 800893c:	a815      	add	r0, sp, #84	; 0x54
 800893e:	f001 fa03 	bl	8009d48 <__match>
 8008942:	2800      	cmp	r0, #0
 8008944:	f43f aea8 	beq.w	8008698 <_strtod_l+0xb0>
 8008948:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800894a:	4988      	ldr	r1, [pc, #544]	; (8008b6c <_strtod_l+0x584>)
 800894c:	3b01      	subs	r3, #1
 800894e:	a815      	add	r0, sp, #84	; 0x54
 8008950:	9315      	str	r3, [sp, #84]	; 0x54
 8008952:	f001 f9f9 	bl	8009d48 <__match>
 8008956:	b910      	cbnz	r0, 800895e <_strtod_l+0x376>
 8008958:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800895a:	3301      	adds	r3, #1
 800895c:	9315      	str	r3, [sp, #84]	; 0x54
 800895e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008b7c <_strtod_l+0x594>
 8008962:	f04f 0800 	mov.w	r8, #0
 8008966:	e67a      	b.n	800865e <_strtod_l+0x76>
 8008968:	4881      	ldr	r0, [pc, #516]	; (8008b70 <_strtod_l+0x588>)
 800896a:	f000 ff09 	bl	8009780 <nan>
 800896e:	ec59 8b10 	vmov	r8, r9, d0
 8008972:	e674      	b.n	800865e <_strtod_l+0x76>
 8008974:	9b05      	ldr	r3, [sp, #20]
 8008976:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008978:	1afb      	subs	r3, r7, r3
 800897a:	f1bb 0f00 	cmp.w	fp, #0
 800897e:	bf08      	it	eq
 8008980:	46b3      	moveq	fp, r6
 8008982:	2e10      	cmp	r6, #16
 8008984:	9308      	str	r3, [sp, #32]
 8008986:	4635      	mov	r5, r6
 8008988:	bfa8      	it	ge
 800898a:	2510      	movge	r5, #16
 800898c:	f7f7 fdca 	bl	8000524 <__aeabi_ui2d>
 8008990:	2e09      	cmp	r6, #9
 8008992:	4680      	mov	r8, r0
 8008994:	4689      	mov	r9, r1
 8008996:	dd13      	ble.n	80089c0 <_strtod_l+0x3d8>
 8008998:	4b76      	ldr	r3, [pc, #472]	; (8008b74 <_strtod_l+0x58c>)
 800899a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800899e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80089a2:	f7f7 fe39 	bl	8000618 <__aeabi_dmul>
 80089a6:	4680      	mov	r8, r0
 80089a8:	4650      	mov	r0, sl
 80089aa:	4689      	mov	r9, r1
 80089ac:	f7f7 fdba 	bl	8000524 <__aeabi_ui2d>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	4640      	mov	r0, r8
 80089b6:	4649      	mov	r1, r9
 80089b8:	f7f7 fc78 	bl	80002ac <__adddf3>
 80089bc:	4680      	mov	r8, r0
 80089be:	4689      	mov	r9, r1
 80089c0:	2e0f      	cmp	r6, #15
 80089c2:	dc38      	bgt.n	8008a36 <_strtod_l+0x44e>
 80089c4:	9b08      	ldr	r3, [sp, #32]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f43f ae49 	beq.w	800865e <_strtod_l+0x76>
 80089cc:	dd24      	ble.n	8008a18 <_strtod_l+0x430>
 80089ce:	2b16      	cmp	r3, #22
 80089d0:	dc0b      	bgt.n	80089ea <_strtod_l+0x402>
 80089d2:	4968      	ldr	r1, [pc, #416]	; (8008b74 <_strtod_l+0x58c>)
 80089d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80089d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089dc:	4642      	mov	r2, r8
 80089de:	464b      	mov	r3, r9
 80089e0:	f7f7 fe1a 	bl	8000618 <__aeabi_dmul>
 80089e4:	4680      	mov	r8, r0
 80089e6:	4689      	mov	r9, r1
 80089e8:	e639      	b.n	800865e <_strtod_l+0x76>
 80089ea:	9a08      	ldr	r2, [sp, #32]
 80089ec:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80089f0:	4293      	cmp	r3, r2
 80089f2:	db20      	blt.n	8008a36 <_strtod_l+0x44e>
 80089f4:	4c5f      	ldr	r4, [pc, #380]	; (8008b74 <_strtod_l+0x58c>)
 80089f6:	f1c6 060f 	rsb	r6, r6, #15
 80089fa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80089fe:	4642      	mov	r2, r8
 8008a00:	464b      	mov	r3, r9
 8008a02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a06:	f7f7 fe07 	bl	8000618 <__aeabi_dmul>
 8008a0a:	9b08      	ldr	r3, [sp, #32]
 8008a0c:	1b9e      	subs	r6, r3, r6
 8008a0e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008a12:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008a16:	e7e3      	b.n	80089e0 <_strtod_l+0x3f8>
 8008a18:	9b08      	ldr	r3, [sp, #32]
 8008a1a:	3316      	adds	r3, #22
 8008a1c:	db0b      	blt.n	8008a36 <_strtod_l+0x44e>
 8008a1e:	9b05      	ldr	r3, [sp, #20]
 8008a20:	1bdf      	subs	r7, r3, r7
 8008a22:	4b54      	ldr	r3, [pc, #336]	; (8008b74 <_strtod_l+0x58c>)
 8008a24:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a2c:	4640      	mov	r0, r8
 8008a2e:	4649      	mov	r1, r9
 8008a30:	f7f7 ff1c 	bl	800086c <__aeabi_ddiv>
 8008a34:	e7d6      	b.n	80089e4 <_strtod_l+0x3fc>
 8008a36:	9b08      	ldr	r3, [sp, #32]
 8008a38:	1b75      	subs	r5, r6, r5
 8008a3a:	441d      	add	r5, r3
 8008a3c:	2d00      	cmp	r5, #0
 8008a3e:	dd70      	ble.n	8008b22 <_strtod_l+0x53a>
 8008a40:	f015 030f 	ands.w	r3, r5, #15
 8008a44:	d00a      	beq.n	8008a5c <_strtod_l+0x474>
 8008a46:	494b      	ldr	r1, [pc, #300]	; (8008b74 <_strtod_l+0x58c>)
 8008a48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008a4c:	4642      	mov	r2, r8
 8008a4e:	464b      	mov	r3, r9
 8008a50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a54:	f7f7 fde0 	bl	8000618 <__aeabi_dmul>
 8008a58:	4680      	mov	r8, r0
 8008a5a:	4689      	mov	r9, r1
 8008a5c:	f035 050f 	bics.w	r5, r5, #15
 8008a60:	d04d      	beq.n	8008afe <_strtod_l+0x516>
 8008a62:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008a66:	dd22      	ble.n	8008aae <_strtod_l+0x4c6>
 8008a68:	2500      	movs	r5, #0
 8008a6a:	46ab      	mov	fp, r5
 8008a6c:	9509      	str	r5, [sp, #36]	; 0x24
 8008a6e:	9505      	str	r5, [sp, #20]
 8008a70:	2322      	movs	r3, #34	; 0x22
 8008a72:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008b7c <_strtod_l+0x594>
 8008a76:	6023      	str	r3, [r4, #0]
 8008a78:	f04f 0800 	mov.w	r8, #0
 8008a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f43f aded 	beq.w	800865e <_strtod_l+0x76>
 8008a84:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008a86:	4620      	mov	r0, r4
 8008a88:	f7ff f924 	bl	8007cd4 <_Bfree>
 8008a8c:	9905      	ldr	r1, [sp, #20]
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f7ff f920 	bl	8007cd4 <_Bfree>
 8008a94:	4659      	mov	r1, fp
 8008a96:	4620      	mov	r0, r4
 8008a98:	f7ff f91c 	bl	8007cd4 <_Bfree>
 8008a9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f7ff f918 	bl	8007cd4 <_Bfree>
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f7ff f914 	bl	8007cd4 <_Bfree>
 8008aac:	e5d7      	b.n	800865e <_strtod_l+0x76>
 8008aae:	4b32      	ldr	r3, [pc, #200]	; (8008b78 <_strtod_l+0x590>)
 8008ab0:	9304      	str	r3, [sp, #16]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	112d      	asrs	r5, r5, #4
 8008ab6:	4640      	mov	r0, r8
 8008ab8:	4649      	mov	r1, r9
 8008aba:	469a      	mov	sl, r3
 8008abc:	2d01      	cmp	r5, #1
 8008abe:	dc21      	bgt.n	8008b04 <_strtod_l+0x51c>
 8008ac0:	b10b      	cbz	r3, 8008ac6 <_strtod_l+0x4de>
 8008ac2:	4680      	mov	r8, r0
 8008ac4:	4689      	mov	r9, r1
 8008ac6:	492c      	ldr	r1, [pc, #176]	; (8008b78 <_strtod_l+0x590>)
 8008ac8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008acc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008ad0:	4642      	mov	r2, r8
 8008ad2:	464b      	mov	r3, r9
 8008ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ad8:	f7f7 fd9e 	bl	8000618 <__aeabi_dmul>
 8008adc:	4b27      	ldr	r3, [pc, #156]	; (8008b7c <_strtod_l+0x594>)
 8008ade:	460a      	mov	r2, r1
 8008ae0:	400b      	ands	r3, r1
 8008ae2:	4927      	ldr	r1, [pc, #156]	; (8008b80 <_strtod_l+0x598>)
 8008ae4:	428b      	cmp	r3, r1
 8008ae6:	4680      	mov	r8, r0
 8008ae8:	d8be      	bhi.n	8008a68 <_strtod_l+0x480>
 8008aea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008aee:	428b      	cmp	r3, r1
 8008af0:	bf86      	itte	hi
 8008af2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008b84 <_strtod_l+0x59c>
 8008af6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8008afa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008afe:	2300      	movs	r3, #0
 8008b00:	9304      	str	r3, [sp, #16]
 8008b02:	e07b      	b.n	8008bfc <_strtod_l+0x614>
 8008b04:	07ea      	lsls	r2, r5, #31
 8008b06:	d505      	bpl.n	8008b14 <_strtod_l+0x52c>
 8008b08:	9b04      	ldr	r3, [sp, #16]
 8008b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0e:	f7f7 fd83 	bl	8000618 <__aeabi_dmul>
 8008b12:	2301      	movs	r3, #1
 8008b14:	9a04      	ldr	r2, [sp, #16]
 8008b16:	3208      	adds	r2, #8
 8008b18:	f10a 0a01 	add.w	sl, sl, #1
 8008b1c:	106d      	asrs	r5, r5, #1
 8008b1e:	9204      	str	r2, [sp, #16]
 8008b20:	e7cc      	b.n	8008abc <_strtod_l+0x4d4>
 8008b22:	d0ec      	beq.n	8008afe <_strtod_l+0x516>
 8008b24:	426d      	negs	r5, r5
 8008b26:	f015 020f 	ands.w	r2, r5, #15
 8008b2a:	d00a      	beq.n	8008b42 <_strtod_l+0x55a>
 8008b2c:	4b11      	ldr	r3, [pc, #68]	; (8008b74 <_strtod_l+0x58c>)
 8008b2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b32:	4640      	mov	r0, r8
 8008b34:	4649      	mov	r1, r9
 8008b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3a:	f7f7 fe97 	bl	800086c <__aeabi_ddiv>
 8008b3e:	4680      	mov	r8, r0
 8008b40:	4689      	mov	r9, r1
 8008b42:	112d      	asrs	r5, r5, #4
 8008b44:	d0db      	beq.n	8008afe <_strtod_l+0x516>
 8008b46:	2d1f      	cmp	r5, #31
 8008b48:	dd1e      	ble.n	8008b88 <_strtod_l+0x5a0>
 8008b4a:	2500      	movs	r5, #0
 8008b4c:	46ab      	mov	fp, r5
 8008b4e:	9509      	str	r5, [sp, #36]	; 0x24
 8008b50:	9505      	str	r5, [sp, #20]
 8008b52:	2322      	movs	r3, #34	; 0x22
 8008b54:	f04f 0800 	mov.w	r8, #0
 8008b58:	f04f 0900 	mov.w	r9, #0
 8008b5c:	6023      	str	r3, [r4, #0]
 8008b5e:	e78d      	b.n	8008a7c <_strtod_l+0x494>
 8008b60:	0800a665 	.word	0x0800a665
 8008b64:	0800a88c 	.word	0x0800a88c
 8008b68:	0800a65d 	.word	0x0800a65d
 8008b6c:	0800a694 	.word	0x0800a694
 8008b70:	0800aa1d 	.word	0x0800aa1d
 8008b74:	0800a7a0 	.word	0x0800a7a0
 8008b78:	0800a778 	.word	0x0800a778
 8008b7c:	7ff00000 	.word	0x7ff00000
 8008b80:	7ca00000 	.word	0x7ca00000
 8008b84:	7fefffff 	.word	0x7fefffff
 8008b88:	f015 0310 	ands.w	r3, r5, #16
 8008b8c:	bf18      	it	ne
 8008b8e:	236a      	movne	r3, #106	; 0x6a
 8008b90:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008f34 <_strtod_l+0x94c>
 8008b94:	9304      	str	r3, [sp, #16]
 8008b96:	4640      	mov	r0, r8
 8008b98:	4649      	mov	r1, r9
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	07ea      	lsls	r2, r5, #31
 8008b9e:	d504      	bpl.n	8008baa <_strtod_l+0x5c2>
 8008ba0:	e9da 2300 	ldrd	r2, r3, [sl]
 8008ba4:	f7f7 fd38 	bl	8000618 <__aeabi_dmul>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	106d      	asrs	r5, r5, #1
 8008bac:	f10a 0a08 	add.w	sl, sl, #8
 8008bb0:	d1f4      	bne.n	8008b9c <_strtod_l+0x5b4>
 8008bb2:	b10b      	cbz	r3, 8008bb8 <_strtod_l+0x5d0>
 8008bb4:	4680      	mov	r8, r0
 8008bb6:	4689      	mov	r9, r1
 8008bb8:	9b04      	ldr	r3, [sp, #16]
 8008bba:	b1bb      	cbz	r3, 8008bec <_strtod_l+0x604>
 8008bbc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008bc0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	4649      	mov	r1, r9
 8008bc8:	dd10      	ble.n	8008bec <_strtod_l+0x604>
 8008bca:	2b1f      	cmp	r3, #31
 8008bcc:	f340 811e 	ble.w	8008e0c <_strtod_l+0x824>
 8008bd0:	2b34      	cmp	r3, #52	; 0x34
 8008bd2:	bfde      	ittt	le
 8008bd4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8008bd8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008bdc:	4093      	lslle	r3, r2
 8008bde:	f04f 0800 	mov.w	r8, #0
 8008be2:	bfcc      	ite	gt
 8008be4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008be8:	ea03 0901 	andle.w	r9, r3, r1
 8008bec:	2200      	movs	r2, #0
 8008bee:	2300      	movs	r3, #0
 8008bf0:	4640      	mov	r0, r8
 8008bf2:	4649      	mov	r1, r9
 8008bf4:	f7f7 ff78 	bl	8000ae8 <__aeabi_dcmpeq>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d1a6      	bne.n	8008b4a <_strtod_l+0x562>
 8008bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c02:	4633      	mov	r3, r6
 8008c04:	465a      	mov	r2, fp
 8008c06:	4620      	mov	r0, r4
 8008c08:	f7ff f8cc 	bl	8007da4 <__s2b>
 8008c0c:	9009      	str	r0, [sp, #36]	; 0x24
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	f43f af2a 	beq.w	8008a68 <_strtod_l+0x480>
 8008c14:	9a08      	ldr	r2, [sp, #32]
 8008c16:	9b05      	ldr	r3, [sp, #20]
 8008c18:	2a00      	cmp	r2, #0
 8008c1a:	eba3 0307 	sub.w	r3, r3, r7
 8008c1e:	bfa8      	it	ge
 8008c20:	2300      	movge	r3, #0
 8008c22:	930c      	str	r3, [sp, #48]	; 0x30
 8008c24:	2500      	movs	r5, #0
 8008c26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008c2a:	9312      	str	r3, [sp, #72]	; 0x48
 8008c2c:	46ab      	mov	fp, r5
 8008c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c30:	4620      	mov	r0, r4
 8008c32:	6859      	ldr	r1, [r3, #4]
 8008c34:	f7ff f80e 	bl	8007c54 <_Balloc>
 8008c38:	9005      	str	r0, [sp, #20]
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	f43f af18 	beq.w	8008a70 <_strtod_l+0x488>
 8008c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c42:	691a      	ldr	r2, [r3, #16]
 8008c44:	3202      	adds	r2, #2
 8008c46:	f103 010c 	add.w	r1, r3, #12
 8008c4a:	0092      	lsls	r2, r2, #2
 8008c4c:	300c      	adds	r0, #12
 8008c4e:	f000 fd87 	bl	8009760 <memcpy>
 8008c52:	ec49 8b10 	vmov	d0, r8, r9
 8008c56:	aa18      	add	r2, sp, #96	; 0x60
 8008c58:	a917      	add	r1, sp, #92	; 0x5c
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f7ff fbd6 	bl	800840c <__d2b>
 8008c60:	ec49 8b18 	vmov	d8, r8, r9
 8008c64:	9016      	str	r0, [sp, #88]	; 0x58
 8008c66:	2800      	cmp	r0, #0
 8008c68:	f43f af02 	beq.w	8008a70 <_strtod_l+0x488>
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f7ff f930 	bl	8007ed4 <__i2b>
 8008c74:	4683      	mov	fp, r0
 8008c76:	2800      	cmp	r0, #0
 8008c78:	f43f aefa 	beq.w	8008a70 <_strtod_l+0x488>
 8008c7c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008c7e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008c80:	2e00      	cmp	r6, #0
 8008c82:	bfab      	itete	ge
 8008c84:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008c86:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008c88:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008c8a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008c8e:	bfac      	ite	ge
 8008c90:	eb06 0a03 	addge.w	sl, r6, r3
 8008c94:	1b9f      	sublt	r7, r3, r6
 8008c96:	9b04      	ldr	r3, [sp, #16]
 8008c98:	1af6      	subs	r6, r6, r3
 8008c9a:	4416      	add	r6, r2
 8008c9c:	4ba0      	ldr	r3, [pc, #640]	; (8008f20 <_strtod_l+0x938>)
 8008c9e:	3e01      	subs	r6, #1
 8008ca0:	429e      	cmp	r6, r3
 8008ca2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008ca6:	f280 80c4 	bge.w	8008e32 <_strtod_l+0x84a>
 8008caa:	1b9b      	subs	r3, r3, r6
 8008cac:	2b1f      	cmp	r3, #31
 8008cae:	eba2 0203 	sub.w	r2, r2, r3
 8008cb2:	f04f 0101 	mov.w	r1, #1
 8008cb6:	f300 80b0 	bgt.w	8008e1a <_strtod_l+0x832>
 8008cba:	fa01 f303 	lsl.w	r3, r1, r3
 8008cbe:	930e      	str	r3, [sp, #56]	; 0x38
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	930d      	str	r3, [sp, #52]	; 0x34
 8008cc4:	eb0a 0602 	add.w	r6, sl, r2
 8008cc8:	9b04      	ldr	r3, [sp, #16]
 8008cca:	45b2      	cmp	sl, r6
 8008ccc:	4417      	add	r7, r2
 8008cce:	441f      	add	r7, r3
 8008cd0:	4653      	mov	r3, sl
 8008cd2:	bfa8      	it	ge
 8008cd4:	4633      	movge	r3, r6
 8008cd6:	42bb      	cmp	r3, r7
 8008cd8:	bfa8      	it	ge
 8008cda:	463b      	movge	r3, r7
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	bfc2      	ittt	gt
 8008ce0:	1af6      	subgt	r6, r6, r3
 8008ce2:	1aff      	subgt	r7, r7, r3
 8008ce4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008ce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	dd17      	ble.n	8008d1e <_strtod_l+0x736>
 8008cee:	4659      	mov	r1, fp
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f7ff f9ae 	bl	8008054 <__pow5mult>
 8008cf8:	4683      	mov	fp, r0
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	f43f aeb8 	beq.w	8008a70 <_strtod_l+0x488>
 8008d00:	4601      	mov	r1, r0
 8008d02:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008d04:	4620      	mov	r0, r4
 8008d06:	f7ff f8fb 	bl	8007f00 <__multiply>
 8008d0a:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	f43f aeaf 	beq.w	8008a70 <_strtod_l+0x488>
 8008d12:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d14:	4620      	mov	r0, r4
 8008d16:	f7fe ffdd 	bl	8007cd4 <_Bfree>
 8008d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d1c:	9316      	str	r3, [sp, #88]	; 0x58
 8008d1e:	2e00      	cmp	r6, #0
 8008d20:	f300 808c 	bgt.w	8008e3c <_strtod_l+0x854>
 8008d24:	9b08      	ldr	r3, [sp, #32]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	dd08      	ble.n	8008d3c <_strtod_l+0x754>
 8008d2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d2c:	9905      	ldr	r1, [sp, #20]
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f7ff f990 	bl	8008054 <__pow5mult>
 8008d34:	9005      	str	r0, [sp, #20]
 8008d36:	2800      	cmp	r0, #0
 8008d38:	f43f ae9a 	beq.w	8008a70 <_strtod_l+0x488>
 8008d3c:	2f00      	cmp	r7, #0
 8008d3e:	dd08      	ble.n	8008d52 <_strtod_l+0x76a>
 8008d40:	9905      	ldr	r1, [sp, #20]
 8008d42:	463a      	mov	r2, r7
 8008d44:	4620      	mov	r0, r4
 8008d46:	f7ff f9df 	bl	8008108 <__lshift>
 8008d4a:	9005      	str	r0, [sp, #20]
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	f43f ae8f 	beq.w	8008a70 <_strtod_l+0x488>
 8008d52:	f1ba 0f00 	cmp.w	sl, #0
 8008d56:	dd08      	ble.n	8008d6a <_strtod_l+0x782>
 8008d58:	4659      	mov	r1, fp
 8008d5a:	4652      	mov	r2, sl
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f7ff f9d3 	bl	8008108 <__lshift>
 8008d62:	4683      	mov	fp, r0
 8008d64:	2800      	cmp	r0, #0
 8008d66:	f43f ae83 	beq.w	8008a70 <_strtod_l+0x488>
 8008d6a:	9a05      	ldr	r2, [sp, #20]
 8008d6c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f7ff fa52 	bl	8008218 <__mdiff>
 8008d74:	4605      	mov	r5, r0
 8008d76:	2800      	cmp	r0, #0
 8008d78:	f43f ae7a 	beq.w	8008a70 <_strtod_l+0x488>
 8008d7c:	68c3      	ldr	r3, [r0, #12]
 8008d7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d80:	2300      	movs	r3, #0
 8008d82:	60c3      	str	r3, [r0, #12]
 8008d84:	4659      	mov	r1, fp
 8008d86:	f7ff fa2b 	bl	80081e0 <__mcmp>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	da60      	bge.n	8008e50 <_strtod_l+0x868>
 8008d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d90:	ea53 0308 	orrs.w	r3, r3, r8
 8008d94:	f040 8084 	bne.w	8008ea0 <_strtod_l+0x8b8>
 8008d98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d17f      	bne.n	8008ea0 <_strtod_l+0x8b8>
 8008da0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008da4:	0d1b      	lsrs	r3, r3, #20
 8008da6:	051b      	lsls	r3, r3, #20
 8008da8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008dac:	d978      	bls.n	8008ea0 <_strtod_l+0x8b8>
 8008dae:	696b      	ldr	r3, [r5, #20]
 8008db0:	b913      	cbnz	r3, 8008db8 <_strtod_l+0x7d0>
 8008db2:	692b      	ldr	r3, [r5, #16]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	dd73      	ble.n	8008ea0 <_strtod_l+0x8b8>
 8008db8:	4629      	mov	r1, r5
 8008dba:	2201      	movs	r2, #1
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f7ff f9a3 	bl	8008108 <__lshift>
 8008dc2:	4659      	mov	r1, fp
 8008dc4:	4605      	mov	r5, r0
 8008dc6:	f7ff fa0b 	bl	80081e0 <__mcmp>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	dd68      	ble.n	8008ea0 <_strtod_l+0x8b8>
 8008dce:	9904      	ldr	r1, [sp, #16]
 8008dd0:	4a54      	ldr	r2, [pc, #336]	; (8008f24 <_strtod_l+0x93c>)
 8008dd2:	464b      	mov	r3, r9
 8008dd4:	2900      	cmp	r1, #0
 8008dd6:	f000 8084 	beq.w	8008ee2 <_strtod_l+0x8fa>
 8008dda:	ea02 0109 	and.w	r1, r2, r9
 8008dde:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008de2:	dc7e      	bgt.n	8008ee2 <_strtod_l+0x8fa>
 8008de4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008de8:	f77f aeb3 	ble.w	8008b52 <_strtod_l+0x56a>
 8008dec:	4b4e      	ldr	r3, [pc, #312]	; (8008f28 <_strtod_l+0x940>)
 8008dee:	4640      	mov	r0, r8
 8008df0:	4649      	mov	r1, r9
 8008df2:	2200      	movs	r2, #0
 8008df4:	f7f7 fc10 	bl	8000618 <__aeabi_dmul>
 8008df8:	4b4a      	ldr	r3, [pc, #296]	; (8008f24 <_strtod_l+0x93c>)
 8008dfa:	400b      	ands	r3, r1
 8008dfc:	4680      	mov	r8, r0
 8008dfe:	4689      	mov	r9, r1
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f47f ae3f 	bne.w	8008a84 <_strtod_l+0x49c>
 8008e06:	2322      	movs	r3, #34	; 0x22
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	e63b      	b.n	8008a84 <_strtod_l+0x49c>
 8008e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e10:	fa02 f303 	lsl.w	r3, r2, r3
 8008e14:	ea03 0808 	and.w	r8, r3, r8
 8008e18:	e6e8      	b.n	8008bec <_strtod_l+0x604>
 8008e1a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008e1e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008e22:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008e26:	36e2      	adds	r6, #226	; 0xe2
 8008e28:	fa01 f306 	lsl.w	r3, r1, r6
 8008e2c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008e30:	e748      	b.n	8008cc4 <_strtod_l+0x6dc>
 8008e32:	2100      	movs	r1, #0
 8008e34:	2301      	movs	r3, #1
 8008e36:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008e3a:	e743      	b.n	8008cc4 <_strtod_l+0x6dc>
 8008e3c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008e3e:	4632      	mov	r2, r6
 8008e40:	4620      	mov	r0, r4
 8008e42:	f7ff f961 	bl	8008108 <__lshift>
 8008e46:	9016      	str	r0, [sp, #88]	; 0x58
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	f47f af6b 	bne.w	8008d24 <_strtod_l+0x73c>
 8008e4e:	e60f      	b.n	8008a70 <_strtod_l+0x488>
 8008e50:	46ca      	mov	sl, r9
 8008e52:	d171      	bne.n	8008f38 <_strtod_l+0x950>
 8008e54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e5a:	b352      	cbz	r2, 8008eb2 <_strtod_l+0x8ca>
 8008e5c:	4a33      	ldr	r2, [pc, #204]	; (8008f2c <_strtod_l+0x944>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d12a      	bne.n	8008eb8 <_strtod_l+0x8d0>
 8008e62:	9b04      	ldr	r3, [sp, #16]
 8008e64:	4641      	mov	r1, r8
 8008e66:	b1fb      	cbz	r3, 8008ea8 <_strtod_l+0x8c0>
 8008e68:	4b2e      	ldr	r3, [pc, #184]	; (8008f24 <_strtod_l+0x93c>)
 8008e6a:	ea09 0303 	and.w	r3, r9, r3
 8008e6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008e72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e76:	d81a      	bhi.n	8008eae <_strtod_l+0x8c6>
 8008e78:	0d1b      	lsrs	r3, r3, #20
 8008e7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e82:	4299      	cmp	r1, r3
 8008e84:	d118      	bne.n	8008eb8 <_strtod_l+0x8d0>
 8008e86:	4b2a      	ldr	r3, [pc, #168]	; (8008f30 <_strtod_l+0x948>)
 8008e88:	459a      	cmp	sl, r3
 8008e8a:	d102      	bne.n	8008e92 <_strtod_l+0x8aa>
 8008e8c:	3101      	adds	r1, #1
 8008e8e:	f43f adef 	beq.w	8008a70 <_strtod_l+0x488>
 8008e92:	4b24      	ldr	r3, [pc, #144]	; (8008f24 <_strtod_l+0x93c>)
 8008e94:	ea0a 0303 	and.w	r3, sl, r3
 8008e98:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008e9c:	f04f 0800 	mov.w	r8, #0
 8008ea0:	9b04      	ldr	r3, [sp, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1a2      	bne.n	8008dec <_strtod_l+0x804>
 8008ea6:	e5ed      	b.n	8008a84 <_strtod_l+0x49c>
 8008ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008eac:	e7e9      	b.n	8008e82 <_strtod_l+0x89a>
 8008eae:	4613      	mov	r3, r2
 8008eb0:	e7e7      	b.n	8008e82 <_strtod_l+0x89a>
 8008eb2:	ea53 0308 	orrs.w	r3, r3, r8
 8008eb6:	d08a      	beq.n	8008dce <_strtod_l+0x7e6>
 8008eb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eba:	b1e3      	cbz	r3, 8008ef6 <_strtod_l+0x90e>
 8008ebc:	ea13 0f0a 	tst.w	r3, sl
 8008ec0:	d0ee      	beq.n	8008ea0 <_strtod_l+0x8b8>
 8008ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ec4:	9a04      	ldr	r2, [sp, #16]
 8008ec6:	4640      	mov	r0, r8
 8008ec8:	4649      	mov	r1, r9
 8008eca:	b1c3      	cbz	r3, 8008efe <_strtod_l+0x916>
 8008ecc:	f7ff fb6f 	bl	80085ae <sulp>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	ec51 0b18 	vmov	r0, r1, d8
 8008ed8:	f7f7 f9e8 	bl	80002ac <__adddf3>
 8008edc:	4680      	mov	r8, r0
 8008ede:	4689      	mov	r9, r1
 8008ee0:	e7de      	b.n	8008ea0 <_strtod_l+0x8b8>
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008ee8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008eec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008ef0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008ef4:	e7d4      	b.n	8008ea0 <_strtod_l+0x8b8>
 8008ef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ef8:	ea13 0f08 	tst.w	r3, r8
 8008efc:	e7e0      	b.n	8008ec0 <_strtod_l+0x8d8>
 8008efe:	f7ff fb56 	bl	80085ae <sulp>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	ec51 0b18 	vmov	r0, r1, d8
 8008f0a:	f7f7 f9cd 	bl	80002a8 <__aeabi_dsub>
 8008f0e:	2200      	movs	r2, #0
 8008f10:	2300      	movs	r3, #0
 8008f12:	4680      	mov	r8, r0
 8008f14:	4689      	mov	r9, r1
 8008f16:	f7f7 fde7 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	d0c0      	beq.n	8008ea0 <_strtod_l+0x8b8>
 8008f1e:	e618      	b.n	8008b52 <_strtod_l+0x56a>
 8008f20:	fffffc02 	.word	0xfffffc02
 8008f24:	7ff00000 	.word	0x7ff00000
 8008f28:	39500000 	.word	0x39500000
 8008f2c:	000fffff 	.word	0x000fffff
 8008f30:	7fefffff 	.word	0x7fefffff
 8008f34:	0800a8a0 	.word	0x0800a8a0
 8008f38:	4659      	mov	r1, fp
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	f7ff fac0 	bl	80084c0 <__ratio>
 8008f40:	ec57 6b10 	vmov	r6, r7, d0
 8008f44:	ee10 0a10 	vmov	r0, s0
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f4e:	4639      	mov	r1, r7
 8008f50:	f7f7 fdde 	bl	8000b10 <__aeabi_dcmple>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d071      	beq.n	800903c <_strtod_l+0xa54>
 8008f58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d17c      	bne.n	8009058 <_strtod_l+0xa70>
 8008f5e:	f1b8 0f00 	cmp.w	r8, #0
 8008f62:	d15a      	bne.n	800901a <_strtod_l+0xa32>
 8008f64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d15d      	bne.n	8009028 <_strtod_l+0xa40>
 8008f6c:	4b90      	ldr	r3, [pc, #576]	; (80091b0 <_strtod_l+0xbc8>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	4630      	mov	r0, r6
 8008f72:	4639      	mov	r1, r7
 8008f74:	f7f7 fdc2 	bl	8000afc <__aeabi_dcmplt>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d15c      	bne.n	8009036 <_strtod_l+0xa4e>
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	4639      	mov	r1, r7
 8008f80:	4b8c      	ldr	r3, [pc, #560]	; (80091b4 <_strtod_l+0xbcc>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	f7f7 fb48 	bl	8000618 <__aeabi_dmul>
 8008f88:	4606      	mov	r6, r0
 8008f8a:	460f      	mov	r7, r1
 8008f8c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008f90:	9606      	str	r6, [sp, #24]
 8008f92:	9307      	str	r3, [sp, #28]
 8008f94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f98:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008f9c:	4b86      	ldr	r3, [pc, #536]	; (80091b8 <_strtod_l+0xbd0>)
 8008f9e:	ea0a 0303 	and.w	r3, sl, r3
 8008fa2:	930d      	str	r3, [sp, #52]	; 0x34
 8008fa4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fa6:	4b85      	ldr	r3, [pc, #532]	; (80091bc <_strtod_l+0xbd4>)
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	f040 8090 	bne.w	80090ce <_strtod_l+0xae6>
 8008fae:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008fb2:	ec49 8b10 	vmov	d0, r8, r9
 8008fb6:	f7ff f9b9 	bl	800832c <__ulp>
 8008fba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fbe:	ec51 0b10 	vmov	r0, r1, d0
 8008fc2:	f7f7 fb29 	bl	8000618 <__aeabi_dmul>
 8008fc6:	4642      	mov	r2, r8
 8008fc8:	464b      	mov	r3, r9
 8008fca:	f7f7 f96f 	bl	80002ac <__adddf3>
 8008fce:	460b      	mov	r3, r1
 8008fd0:	4979      	ldr	r1, [pc, #484]	; (80091b8 <_strtod_l+0xbd0>)
 8008fd2:	4a7b      	ldr	r2, [pc, #492]	; (80091c0 <_strtod_l+0xbd8>)
 8008fd4:	4019      	ands	r1, r3
 8008fd6:	4291      	cmp	r1, r2
 8008fd8:	4680      	mov	r8, r0
 8008fda:	d944      	bls.n	8009066 <_strtod_l+0xa7e>
 8008fdc:	ee18 2a90 	vmov	r2, s17
 8008fe0:	4b78      	ldr	r3, [pc, #480]	; (80091c4 <_strtod_l+0xbdc>)
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d104      	bne.n	8008ff0 <_strtod_l+0xa08>
 8008fe6:	ee18 3a10 	vmov	r3, s16
 8008fea:	3301      	adds	r3, #1
 8008fec:	f43f ad40 	beq.w	8008a70 <_strtod_l+0x488>
 8008ff0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80091c4 <_strtod_l+0xbdc>
 8008ff4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008ff8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f7fe fe6a 	bl	8007cd4 <_Bfree>
 8009000:	9905      	ldr	r1, [sp, #20]
 8009002:	4620      	mov	r0, r4
 8009004:	f7fe fe66 	bl	8007cd4 <_Bfree>
 8009008:	4659      	mov	r1, fp
 800900a:	4620      	mov	r0, r4
 800900c:	f7fe fe62 	bl	8007cd4 <_Bfree>
 8009010:	4629      	mov	r1, r5
 8009012:	4620      	mov	r0, r4
 8009014:	f7fe fe5e 	bl	8007cd4 <_Bfree>
 8009018:	e609      	b.n	8008c2e <_strtod_l+0x646>
 800901a:	f1b8 0f01 	cmp.w	r8, #1
 800901e:	d103      	bne.n	8009028 <_strtod_l+0xa40>
 8009020:	f1b9 0f00 	cmp.w	r9, #0
 8009024:	f43f ad95 	beq.w	8008b52 <_strtod_l+0x56a>
 8009028:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009180 <_strtod_l+0xb98>
 800902c:	4f60      	ldr	r7, [pc, #384]	; (80091b0 <_strtod_l+0xbc8>)
 800902e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009032:	2600      	movs	r6, #0
 8009034:	e7ae      	b.n	8008f94 <_strtod_l+0x9ac>
 8009036:	4f5f      	ldr	r7, [pc, #380]	; (80091b4 <_strtod_l+0xbcc>)
 8009038:	2600      	movs	r6, #0
 800903a:	e7a7      	b.n	8008f8c <_strtod_l+0x9a4>
 800903c:	4b5d      	ldr	r3, [pc, #372]	; (80091b4 <_strtod_l+0xbcc>)
 800903e:	4630      	mov	r0, r6
 8009040:	4639      	mov	r1, r7
 8009042:	2200      	movs	r2, #0
 8009044:	f7f7 fae8 	bl	8000618 <__aeabi_dmul>
 8009048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800904a:	4606      	mov	r6, r0
 800904c:	460f      	mov	r7, r1
 800904e:	2b00      	cmp	r3, #0
 8009050:	d09c      	beq.n	8008f8c <_strtod_l+0x9a4>
 8009052:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009056:	e79d      	b.n	8008f94 <_strtod_l+0x9ac>
 8009058:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009188 <_strtod_l+0xba0>
 800905c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009060:	ec57 6b17 	vmov	r6, r7, d7
 8009064:	e796      	b.n	8008f94 <_strtod_l+0x9ac>
 8009066:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800906a:	9b04      	ldr	r3, [sp, #16]
 800906c:	46ca      	mov	sl, r9
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1c2      	bne.n	8008ff8 <_strtod_l+0xa10>
 8009072:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009076:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009078:	0d1b      	lsrs	r3, r3, #20
 800907a:	051b      	lsls	r3, r3, #20
 800907c:	429a      	cmp	r2, r3
 800907e:	d1bb      	bne.n	8008ff8 <_strtod_l+0xa10>
 8009080:	4630      	mov	r0, r6
 8009082:	4639      	mov	r1, r7
 8009084:	f7f7 fe28 	bl	8000cd8 <__aeabi_d2lz>
 8009088:	f7f7 fa98 	bl	80005bc <__aeabi_l2d>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	4630      	mov	r0, r6
 8009092:	4639      	mov	r1, r7
 8009094:	f7f7 f908 	bl	80002a8 <__aeabi_dsub>
 8009098:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800909a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800909e:	ea43 0308 	orr.w	r3, r3, r8
 80090a2:	4313      	orrs	r3, r2
 80090a4:	4606      	mov	r6, r0
 80090a6:	460f      	mov	r7, r1
 80090a8:	d054      	beq.n	8009154 <_strtod_l+0xb6c>
 80090aa:	a339      	add	r3, pc, #228	; (adr r3, 8009190 <_strtod_l+0xba8>)
 80090ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b0:	f7f7 fd24 	bl	8000afc <__aeabi_dcmplt>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	f47f ace5 	bne.w	8008a84 <_strtod_l+0x49c>
 80090ba:	a337      	add	r3, pc, #220	; (adr r3, 8009198 <_strtod_l+0xbb0>)
 80090bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c0:	4630      	mov	r0, r6
 80090c2:	4639      	mov	r1, r7
 80090c4:	f7f7 fd38 	bl	8000b38 <__aeabi_dcmpgt>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	d095      	beq.n	8008ff8 <_strtod_l+0xa10>
 80090cc:	e4da      	b.n	8008a84 <_strtod_l+0x49c>
 80090ce:	9b04      	ldr	r3, [sp, #16]
 80090d0:	b333      	cbz	r3, 8009120 <_strtod_l+0xb38>
 80090d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80090d8:	d822      	bhi.n	8009120 <_strtod_l+0xb38>
 80090da:	a331      	add	r3, pc, #196	; (adr r3, 80091a0 <_strtod_l+0xbb8>)
 80090dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e0:	4630      	mov	r0, r6
 80090e2:	4639      	mov	r1, r7
 80090e4:	f7f7 fd14 	bl	8000b10 <__aeabi_dcmple>
 80090e8:	b1a0      	cbz	r0, 8009114 <_strtod_l+0xb2c>
 80090ea:	4639      	mov	r1, r7
 80090ec:	4630      	mov	r0, r6
 80090ee:	f7f7 fd6b 	bl	8000bc8 <__aeabi_d2uiz>
 80090f2:	2801      	cmp	r0, #1
 80090f4:	bf38      	it	cc
 80090f6:	2001      	movcc	r0, #1
 80090f8:	f7f7 fa14 	bl	8000524 <__aeabi_ui2d>
 80090fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090fe:	4606      	mov	r6, r0
 8009100:	460f      	mov	r7, r1
 8009102:	bb23      	cbnz	r3, 800914e <_strtod_l+0xb66>
 8009104:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009108:	9010      	str	r0, [sp, #64]	; 0x40
 800910a:	9311      	str	r3, [sp, #68]	; 0x44
 800910c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009110:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009114:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009116:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009118:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800911c:	1a9b      	subs	r3, r3, r2
 800911e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009120:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009124:	eeb0 0a48 	vmov.f32	s0, s16
 8009128:	eef0 0a68 	vmov.f32	s1, s17
 800912c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009130:	f7ff f8fc 	bl	800832c <__ulp>
 8009134:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009138:	ec53 2b10 	vmov	r2, r3, d0
 800913c:	f7f7 fa6c 	bl	8000618 <__aeabi_dmul>
 8009140:	ec53 2b18 	vmov	r2, r3, d8
 8009144:	f7f7 f8b2 	bl	80002ac <__adddf3>
 8009148:	4680      	mov	r8, r0
 800914a:	4689      	mov	r9, r1
 800914c:	e78d      	b.n	800906a <_strtod_l+0xa82>
 800914e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009152:	e7db      	b.n	800910c <_strtod_l+0xb24>
 8009154:	a314      	add	r3, pc, #80	; (adr r3, 80091a8 <_strtod_l+0xbc0>)
 8009156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915a:	f7f7 fccf 	bl	8000afc <__aeabi_dcmplt>
 800915e:	e7b3      	b.n	80090c8 <_strtod_l+0xae0>
 8009160:	2300      	movs	r3, #0
 8009162:	930a      	str	r3, [sp, #40]	; 0x28
 8009164:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009166:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	f7ff ba7c 	b.w	8008666 <_strtod_l+0x7e>
 800916e:	2a65      	cmp	r2, #101	; 0x65
 8009170:	f43f ab75 	beq.w	800885e <_strtod_l+0x276>
 8009174:	2a45      	cmp	r2, #69	; 0x45
 8009176:	f43f ab72 	beq.w	800885e <_strtod_l+0x276>
 800917a:	2301      	movs	r3, #1
 800917c:	f7ff bbaa 	b.w	80088d4 <_strtod_l+0x2ec>
 8009180:	00000000 	.word	0x00000000
 8009184:	bff00000 	.word	0xbff00000
 8009188:	00000000 	.word	0x00000000
 800918c:	3ff00000 	.word	0x3ff00000
 8009190:	94a03595 	.word	0x94a03595
 8009194:	3fdfffff 	.word	0x3fdfffff
 8009198:	35afe535 	.word	0x35afe535
 800919c:	3fe00000 	.word	0x3fe00000
 80091a0:	ffc00000 	.word	0xffc00000
 80091a4:	41dfffff 	.word	0x41dfffff
 80091a8:	94a03595 	.word	0x94a03595
 80091ac:	3fcfffff 	.word	0x3fcfffff
 80091b0:	3ff00000 	.word	0x3ff00000
 80091b4:	3fe00000 	.word	0x3fe00000
 80091b8:	7ff00000 	.word	0x7ff00000
 80091bc:	7fe00000 	.word	0x7fe00000
 80091c0:	7c9fffff 	.word	0x7c9fffff
 80091c4:	7fefffff 	.word	0x7fefffff

080091c8 <_strtod_r>:
 80091c8:	4b01      	ldr	r3, [pc, #4]	; (80091d0 <_strtod_r+0x8>)
 80091ca:	f7ff ba0d 	b.w	80085e8 <_strtod_l>
 80091ce:	bf00      	nop
 80091d0:	20000068 	.word	0x20000068

080091d4 <_strtol_l.constprop.0>:
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091da:	d001      	beq.n	80091e0 <_strtol_l.constprop.0+0xc>
 80091dc:	2b24      	cmp	r3, #36	; 0x24
 80091de:	d906      	bls.n	80091ee <_strtol_l.constprop.0+0x1a>
 80091e0:	f7fd fd88 	bl	8006cf4 <__errno>
 80091e4:	2316      	movs	r3, #22
 80091e6:	6003      	str	r3, [r0, #0]
 80091e8:	2000      	movs	r0, #0
 80091ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80092d4 <_strtol_l.constprop.0+0x100>
 80091f2:	460d      	mov	r5, r1
 80091f4:	462e      	mov	r6, r5
 80091f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091fa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80091fe:	f017 0708 	ands.w	r7, r7, #8
 8009202:	d1f7      	bne.n	80091f4 <_strtol_l.constprop.0+0x20>
 8009204:	2c2d      	cmp	r4, #45	; 0x2d
 8009206:	d132      	bne.n	800926e <_strtol_l.constprop.0+0x9a>
 8009208:	782c      	ldrb	r4, [r5, #0]
 800920a:	2701      	movs	r7, #1
 800920c:	1cb5      	adds	r5, r6, #2
 800920e:	2b00      	cmp	r3, #0
 8009210:	d05b      	beq.n	80092ca <_strtol_l.constprop.0+0xf6>
 8009212:	2b10      	cmp	r3, #16
 8009214:	d109      	bne.n	800922a <_strtol_l.constprop.0+0x56>
 8009216:	2c30      	cmp	r4, #48	; 0x30
 8009218:	d107      	bne.n	800922a <_strtol_l.constprop.0+0x56>
 800921a:	782c      	ldrb	r4, [r5, #0]
 800921c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009220:	2c58      	cmp	r4, #88	; 0x58
 8009222:	d14d      	bne.n	80092c0 <_strtol_l.constprop.0+0xec>
 8009224:	786c      	ldrb	r4, [r5, #1]
 8009226:	2310      	movs	r3, #16
 8009228:	3502      	adds	r5, #2
 800922a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800922e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009232:	f04f 0e00 	mov.w	lr, #0
 8009236:	fbb8 f9f3 	udiv	r9, r8, r3
 800923a:	4676      	mov	r6, lr
 800923c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009240:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009244:	f1bc 0f09 	cmp.w	ip, #9
 8009248:	d816      	bhi.n	8009278 <_strtol_l.constprop.0+0xa4>
 800924a:	4664      	mov	r4, ip
 800924c:	42a3      	cmp	r3, r4
 800924e:	dd24      	ble.n	800929a <_strtol_l.constprop.0+0xc6>
 8009250:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8009254:	d008      	beq.n	8009268 <_strtol_l.constprop.0+0x94>
 8009256:	45b1      	cmp	r9, r6
 8009258:	d31c      	bcc.n	8009294 <_strtol_l.constprop.0+0xc0>
 800925a:	d101      	bne.n	8009260 <_strtol_l.constprop.0+0x8c>
 800925c:	45a2      	cmp	sl, r4
 800925e:	db19      	blt.n	8009294 <_strtol_l.constprop.0+0xc0>
 8009260:	fb06 4603 	mla	r6, r6, r3, r4
 8009264:	f04f 0e01 	mov.w	lr, #1
 8009268:	f815 4b01 	ldrb.w	r4, [r5], #1
 800926c:	e7e8      	b.n	8009240 <_strtol_l.constprop.0+0x6c>
 800926e:	2c2b      	cmp	r4, #43	; 0x2b
 8009270:	bf04      	itt	eq
 8009272:	782c      	ldrbeq	r4, [r5, #0]
 8009274:	1cb5      	addeq	r5, r6, #2
 8009276:	e7ca      	b.n	800920e <_strtol_l.constprop.0+0x3a>
 8009278:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800927c:	f1bc 0f19 	cmp.w	ip, #25
 8009280:	d801      	bhi.n	8009286 <_strtol_l.constprop.0+0xb2>
 8009282:	3c37      	subs	r4, #55	; 0x37
 8009284:	e7e2      	b.n	800924c <_strtol_l.constprop.0+0x78>
 8009286:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800928a:	f1bc 0f19 	cmp.w	ip, #25
 800928e:	d804      	bhi.n	800929a <_strtol_l.constprop.0+0xc6>
 8009290:	3c57      	subs	r4, #87	; 0x57
 8009292:	e7db      	b.n	800924c <_strtol_l.constprop.0+0x78>
 8009294:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8009298:	e7e6      	b.n	8009268 <_strtol_l.constprop.0+0x94>
 800929a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800929e:	d105      	bne.n	80092ac <_strtol_l.constprop.0+0xd8>
 80092a0:	2322      	movs	r3, #34	; 0x22
 80092a2:	6003      	str	r3, [r0, #0]
 80092a4:	4646      	mov	r6, r8
 80092a6:	b942      	cbnz	r2, 80092ba <_strtol_l.constprop.0+0xe6>
 80092a8:	4630      	mov	r0, r6
 80092aa:	e79e      	b.n	80091ea <_strtol_l.constprop.0+0x16>
 80092ac:	b107      	cbz	r7, 80092b0 <_strtol_l.constprop.0+0xdc>
 80092ae:	4276      	negs	r6, r6
 80092b0:	2a00      	cmp	r2, #0
 80092b2:	d0f9      	beq.n	80092a8 <_strtol_l.constprop.0+0xd4>
 80092b4:	f1be 0f00 	cmp.w	lr, #0
 80092b8:	d000      	beq.n	80092bc <_strtol_l.constprop.0+0xe8>
 80092ba:	1e69      	subs	r1, r5, #1
 80092bc:	6011      	str	r1, [r2, #0]
 80092be:	e7f3      	b.n	80092a8 <_strtol_l.constprop.0+0xd4>
 80092c0:	2430      	movs	r4, #48	; 0x30
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1b1      	bne.n	800922a <_strtol_l.constprop.0+0x56>
 80092c6:	2308      	movs	r3, #8
 80092c8:	e7af      	b.n	800922a <_strtol_l.constprop.0+0x56>
 80092ca:	2c30      	cmp	r4, #48	; 0x30
 80092cc:	d0a5      	beq.n	800921a <_strtol_l.constprop.0+0x46>
 80092ce:	230a      	movs	r3, #10
 80092d0:	e7ab      	b.n	800922a <_strtol_l.constprop.0+0x56>
 80092d2:	bf00      	nop
 80092d4:	0800a8c9 	.word	0x0800a8c9

080092d8 <_strtol_r>:
 80092d8:	f7ff bf7c 	b.w	80091d4 <_strtol_l.constprop.0>

080092dc <__ssputs_r>:
 80092dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092e0:	688e      	ldr	r6, [r1, #8]
 80092e2:	461f      	mov	r7, r3
 80092e4:	42be      	cmp	r6, r7
 80092e6:	680b      	ldr	r3, [r1, #0]
 80092e8:	4682      	mov	sl, r0
 80092ea:	460c      	mov	r4, r1
 80092ec:	4690      	mov	r8, r2
 80092ee:	d82c      	bhi.n	800934a <__ssputs_r+0x6e>
 80092f0:	898a      	ldrh	r2, [r1, #12]
 80092f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092f6:	d026      	beq.n	8009346 <__ssputs_r+0x6a>
 80092f8:	6965      	ldr	r5, [r4, #20]
 80092fa:	6909      	ldr	r1, [r1, #16]
 80092fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009300:	eba3 0901 	sub.w	r9, r3, r1
 8009304:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009308:	1c7b      	adds	r3, r7, #1
 800930a:	444b      	add	r3, r9
 800930c:	106d      	asrs	r5, r5, #1
 800930e:	429d      	cmp	r5, r3
 8009310:	bf38      	it	cc
 8009312:	461d      	movcc	r5, r3
 8009314:	0553      	lsls	r3, r2, #21
 8009316:	d527      	bpl.n	8009368 <__ssputs_r+0x8c>
 8009318:	4629      	mov	r1, r5
 800931a:	f7fe fc0f 	bl	8007b3c <_malloc_r>
 800931e:	4606      	mov	r6, r0
 8009320:	b360      	cbz	r0, 800937c <__ssputs_r+0xa0>
 8009322:	6921      	ldr	r1, [r4, #16]
 8009324:	464a      	mov	r2, r9
 8009326:	f000 fa1b 	bl	8009760 <memcpy>
 800932a:	89a3      	ldrh	r3, [r4, #12]
 800932c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009334:	81a3      	strh	r3, [r4, #12]
 8009336:	6126      	str	r6, [r4, #16]
 8009338:	6165      	str	r5, [r4, #20]
 800933a:	444e      	add	r6, r9
 800933c:	eba5 0509 	sub.w	r5, r5, r9
 8009340:	6026      	str	r6, [r4, #0]
 8009342:	60a5      	str	r5, [r4, #8]
 8009344:	463e      	mov	r6, r7
 8009346:	42be      	cmp	r6, r7
 8009348:	d900      	bls.n	800934c <__ssputs_r+0x70>
 800934a:	463e      	mov	r6, r7
 800934c:	6820      	ldr	r0, [r4, #0]
 800934e:	4632      	mov	r2, r6
 8009350:	4641      	mov	r1, r8
 8009352:	f000 f9c9 	bl	80096e8 <memmove>
 8009356:	68a3      	ldr	r3, [r4, #8]
 8009358:	1b9b      	subs	r3, r3, r6
 800935a:	60a3      	str	r3, [r4, #8]
 800935c:	6823      	ldr	r3, [r4, #0]
 800935e:	4433      	add	r3, r6
 8009360:	6023      	str	r3, [r4, #0]
 8009362:	2000      	movs	r0, #0
 8009364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009368:	462a      	mov	r2, r5
 800936a:	f000 fdae 	bl	8009eca <_realloc_r>
 800936e:	4606      	mov	r6, r0
 8009370:	2800      	cmp	r0, #0
 8009372:	d1e0      	bne.n	8009336 <__ssputs_r+0x5a>
 8009374:	6921      	ldr	r1, [r4, #16]
 8009376:	4650      	mov	r0, sl
 8009378:	f7fe fb6c 	bl	8007a54 <_free_r>
 800937c:	230c      	movs	r3, #12
 800937e:	f8ca 3000 	str.w	r3, [sl]
 8009382:	89a3      	ldrh	r3, [r4, #12]
 8009384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009388:	81a3      	strh	r3, [r4, #12]
 800938a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800938e:	e7e9      	b.n	8009364 <__ssputs_r+0x88>

08009390 <_svfiprintf_r>:
 8009390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009394:	4698      	mov	r8, r3
 8009396:	898b      	ldrh	r3, [r1, #12]
 8009398:	061b      	lsls	r3, r3, #24
 800939a:	b09d      	sub	sp, #116	; 0x74
 800939c:	4607      	mov	r7, r0
 800939e:	460d      	mov	r5, r1
 80093a0:	4614      	mov	r4, r2
 80093a2:	d50e      	bpl.n	80093c2 <_svfiprintf_r+0x32>
 80093a4:	690b      	ldr	r3, [r1, #16]
 80093a6:	b963      	cbnz	r3, 80093c2 <_svfiprintf_r+0x32>
 80093a8:	2140      	movs	r1, #64	; 0x40
 80093aa:	f7fe fbc7 	bl	8007b3c <_malloc_r>
 80093ae:	6028      	str	r0, [r5, #0]
 80093b0:	6128      	str	r0, [r5, #16]
 80093b2:	b920      	cbnz	r0, 80093be <_svfiprintf_r+0x2e>
 80093b4:	230c      	movs	r3, #12
 80093b6:	603b      	str	r3, [r7, #0]
 80093b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093bc:	e0d0      	b.n	8009560 <_svfiprintf_r+0x1d0>
 80093be:	2340      	movs	r3, #64	; 0x40
 80093c0:	616b      	str	r3, [r5, #20]
 80093c2:	2300      	movs	r3, #0
 80093c4:	9309      	str	r3, [sp, #36]	; 0x24
 80093c6:	2320      	movs	r3, #32
 80093c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80093d0:	2330      	movs	r3, #48	; 0x30
 80093d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009578 <_svfiprintf_r+0x1e8>
 80093d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093da:	f04f 0901 	mov.w	r9, #1
 80093de:	4623      	mov	r3, r4
 80093e0:	469a      	mov	sl, r3
 80093e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093e6:	b10a      	cbz	r2, 80093ec <_svfiprintf_r+0x5c>
 80093e8:	2a25      	cmp	r2, #37	; 0x25
 80093ea:	d1f9      	bne.n	80093e0 <_svfiprintf_r+0x50>
 80093ec:	ebba 0b04 	subs.w	fp, sl, r4
 80093f0:	d00b      	beq.n	800940a <_svfiprintf_r+0x7a>
 80093f2:	465b      	mov	r3, fp
 80093f4:	4622      	mov	r2, r4
 80093f6:	4629      	mov	r1, r5
 80093f8:	4638      	mov	r0, r7
 80093fa:	f7ff ff6f 	bl	80092dc <__ssputs_r>
 80093fe:	3001      	adds	r0, #1
 8009400:	f000 80a9 	beq.w	8009556 <_svfiprintf_r+0x1c6>
 8009404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009406:	445a      	add	r2, fp
 8009408:	9209      	str	r2, [sp, #36]	; 0x24
 800940a:	f89a 3000 	ldrb.w	r3, [sl]
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 80a1 	beq.w	8009556 <_svfiprintf_r+0x1c6>
 8009414:	2300      	movs	r3, #0
 8009416:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800941a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800941e:	f10a 0a01 	add.w	sl, sl, #1
 8009422:	9304      	str	r3, [sp, #16]
 8009424:	9307      	str	r3, [sp, #28]
 8009426:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800942a:	931a      	str	r3, [sp, #104]	; 0x68
 800942c:	4654      	mov	r4, sl
 800942e:	2205      	movs	r2, #5
 8009430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009434:	4850      	ldr	r0, [pc, #320]	; (8009578 <_svfiprintf_r+0x1e8>)
 8009436:	f7f6 fedb 	bl	80001f0 <memchr>
 800943a:	9a04      	ldr	r2, [sp, #16]
 800943c:	b9d8      	cbnz	r0, 8009476 <_svfiprintf_r+0xe6>
 800943e:	06d0      	lsls	r0, r2, #27
 8009440:	bf44      	itt	mi
 8009442:	2320      	movmi	r3, #32
 8009444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009448:	0711      	lsls	r1, r2, #28
 800944a:	bf44      	itt	mi
 800944c:	232b      	movmi	r3, #43	; 0x2b
 800944e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009452:	f89a 3000 	ldrb.w	r3, [sl]
 8009456:	2b2a      	cmp	r3, #42	; 0x2a
 8009458:	d015      	beq.n	8009486 <_svfiprintf_r+0xf6>
 800945a:	9a07      	ldr	r2, [sp, #28]
 800945c:	4654      	mov	r4, sl
 800945e:	2000      	movs	r0, #0
 8009460:	f04f 0c0a 	mov.w	ip, #10
 8009464:	4621      	mov	r1, r4
 8009466:	f811 3b01 	ldrb.w	r3, [r1], #1
 800946a:	3b30      	subs	r3, #48	; 0x30
 800946c:	2b09      	cmp	r3, #9
 800946e:	d94d      	bls.n	800950c <_svfiprintf_r+0x17c>
 8009470:	b1b0      	cbz	r0, 80094a0 <_svfiprintf_r+0x110>
 8009472:	9207      	str	r2, [sp, #28]
 8009474:	e014      	b.n	80094a0 <_svfiprintf_r+0x110>
 8009476:	eba0 0308 	sub.w	r3, r0, r8
 800947a:	fa09 f303 	lsl.w	r3, r9, r3
 800947e:	4313      	orrs	r3, r2
 8009480:	9304      	str	r3, [sp, #16]
 8009482:	46a2      	mov	sl, r4
 8009484:	e7d2      	b.n	800942c <_svfiprintf_r+0x9c>
 8009486:	9b03      	ldr	r3, [sp, #12]
 8009488:	1d19      	adds	r1, r3, #4
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	9103      	str	r1, [sp, #12]
 800948e:	2b00      	cmp	r3, #0
 8009490:	bfbb      	ittet	lt
 8009492:	425b      	neglt	r3, r3
 8009494:	f042 0202 	orrlt.w	r2, r2, #2
 8009498:	9307      	strge	r3, [sp, #28]
 800949a:	9307      	strlt	r3, [sp, #28]
 800949c:	bfb8      	it	lt
 800949e:	9204      	strlt	r2, [sp, #16]
 80094a0:	7823      	ldrb	r3, [r4, #0]
 80094a2:	2b2e      	cmp	r3, #46	; 0x2e
 80094a4:	d10c      	bne.n	80094c0 <_svfiprintf_r+0x130>
 80094a6:	7863      	ldrb	r3, [r4, #1]
 80094a8:	2b2a      	cmp	r3, #42	; 0x2a
 80094aa:	d134      	bne.n	8009516 <_svfiprintf_r+0x186>
 80094ac:	9b03      	ldr	r3, [sp, #12]
 80094ae:	1d1a      	adds	r2, r3, #4
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	9203      	str	r2, [sp, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	bfb8      	it	lt
 80094b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80094bc:	3402      	adds	r4, #2
 80094be:	9305      	str	r3, [sp, #20]
 80094c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009588 <_svfiprintf_r+0x1f8>
 80094c4:	7821      	ldrb	r1, [r4, #0]
 80094c6:	2203      	movs	r2, #3
 80094c8:	4650      	mov	r0, sl
 80094ca:	f7f6 fe91 	bl	80001f0 <memchr>
 80094ce:	b138      	cbz	r0, 80094e0 <_svfiprintf_r+0x150>
 80094d0:	9b04      	ldr	r3, [sp, #16]
 80094d2:	eba0 000a 	sub.w	r0, r0, sl
 80094d6:	2240      	movs	r2, #64	; 0x40
 80094d8:	4082      	lsls	r2, r0
 80094da:	4313      	orrs	r3, r2
 80094dc:	3401      	adds	r4, #1
 80094de:	9304      	str	r3, [sp, #16]
 80094e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094e4:	4825      	ldr	r0, [pc, #148]	; (800957c <_svfiprintf_r+0x1ec>)
 80094e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094ea:	2206      	movs	r2, #6
 80094ec:	f7f6 fe80 	bl	80001f0 <memchr>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	d038      	beq.n	8009566 <_svfiprintf_r+0x1d6>
 80094f4:	4b22      	ldr	r3, [pc, #136]	; (8009580 <_svfiprintf_r+0x1f0>)
 80094f6:	bb1b      	cbnz	r3, 8009540 <_svfiprintf_r+0x1b0>
 80094f8:	9b03      	ldr	r3, [sp, #12]
 80094fa:	3307      	adds	r3, #7
 80094fc:	f023 0307 	bic.w	r3, r3, #7
 8009500:	3308      	adds	r3, #8
 8009502:	9303      	str	r3, [sp, #12]
 8009504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009506:	4433      	add	r3, r6
 8009508:	9309      	str	r3, [sp, #36]	; 0x24
 800950a:	e768      	b.n	80093de <_svfiprintf_r+0x4e>
 800950c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009510:	460c      	mov	r4, r1
 8009512:	2001      	movs	r0, #1
 8009514:	e7a6      	b.n	8009464 <_svfiprintf_r+0xd4>
 8009516:	2300      	movs	r3, #0
 8009518:	3401      	adds	r4, #1
 800951a:	9305      	str	r3, [sp, #20]
 800951c:	4619      	mov	r1, r3
 800951e:	f04f 0c0a 	mov.w	ip, #10
 8009522:	4620      	mov	r0, r4
 8009524:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009528:	3a30      	subs	r2, #48	; 0x30
 800952a:	2a09      	cmp	r2, #9
 800952c:	d903      	bls.n	8009536 <_svfiprintf_r+0x1a6>
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0c6      	beq.n	80094c0 <_svfiprintf_r+0x130>
 8009532:	9105      	str	r1, [sp, #20]
 8009534:	e7c4      	b.n	80094c0 <_svfiprintf_r+0x130>
 8009536:	fb0c 2101 	mla	r1, ip, r1, r2
 800953a:	4604      	mov	r4, r0
 800953c:	2301      	movs	r3, #1
 800953e:	e7f0      	b.n	8009522 <_svfiprintf_r+0x192>
 8009540:	ab03      	add	r3, sp, #12
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	462a      	mov	r2, r5
 8009546:	4b0f      	ldr	r3, [pc, #60]	; (8009584 <_svfiprintf_r+0x1f4>)
 8009548:	a904      	add	r1, sp, #16
 800954a:	4638      	mov	r0, r7
 800954c:	f7fc fc50 	bl	8005df0 <_printf_float>
 8009550:	1c42      	adds	r2, r0, #1
 8009552:	4606      	mov	r6, r0
 8009554:	d1d6      	bne.n	8009504 <_svfiprintf_r+0x174>
 8009556:	89ab      	ldrh	r3, [r5, #12]
 8009558:	065b      	lsls	r3, r3, #25
 800955a:	f53f af2d 	bmi.w	80093b8 <_svfiprintf_r+0x28>
 800955e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009560:	b01d      	add	sp, #116	; 0x74
 8009562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009566:	ab03      	add	r3, sp, #12
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	462a      	mov	r2, r5
 800956c:	4b05      	ldr	r3, [pc, #20]	; (8009584 <_svfiprintf_r+0x1f4>)
 800956e:	a904      	add	r1, sp, #16
 8009570:	4638      	mov	r0, r7
 8009572:	f7fc fee1 	bl	8006338 <_printf_i>
 8009576:	e7eb      	b.n	8009550 <_svfiprintf_r+0x1c0>
 8009578:	0800a9c9 	.word	0x0800a9c9
 800957c:	0800a9d3 	.word	0x0800a9d3
 8009580:	08005df1 	.word	0x08005df1
 8009584:	080092dd 	.word	0x080092dd
 8009588:	0800a9cf 	.word	0x0800a9cf

0800958c <__sflush_r>:
 800958c:	898a      	ldrh	r2, [r1, #12]
 800958e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009592:	4605      	mov	r5, r0
 8009594:	0710      	lsls	r0, r2, #28
 8009596:	460c      	mov	r4, r1
 8009598:	d458      	bmi.n	800964c <__sflush_r+0xc0>
 800959a:	684b      	ldr	r3, [r1, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	dc05      	bgt.n	80095ac <__sflush_r+0x20>
 80095a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	dc02      	bgt.n	80095ac <__sflush_r+0x20>
 80095a6:	2000      	movs	r0, #0
 80095a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095ae:	2e00      	cmp	r6, #0
 80095b0:	d0f9      	beq.n	80095a6 <__sflush_r+0x1a>
 80095b2:	2300      	movs	r3, #0
 80095b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095b8:	682f      	ldr	r7, [r5, #0]
 80095ba:	6a21      	ldr	r1, [r4, #32]
 80095bc:	602b      	str	r3, [r5, #0]
 80095be:	d032      	beq.n	8009626 <__sflush_r+0x9a>
 80095c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095c2:	89a3      	ldrh	r3, [r4, #12]
 80095c4:	075a      	lsls	r2, r3, #29
 80095c6:	d505      	bpl.n	80095d4 <__sflush_r+0x48>
 80095c8:	6863      	ldr	r3, [r4, #4]
 80095ca:	1ac0      	subs	r0, r0, r3
 80095cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095ce:	b10b      	cbz	r3, 80095d4 <__sflush_r+0x48>
 80095d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095d2:	1ac0      	subs	r0, r0, r3
 80095d4:	2300      	movs	r3, #0
 80095d6:	4602      	mov	r2, r0
 80095d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095da:	6a21      	ldr	r1, [r4, #32]
 80095dc:	4628      	mov	r0, r5
 80095de:	47b0      	blx	r6
 80095e0:	1c43      	adds	r3, r0, #1
 80095e2:	89a3      	ldrh	r3, [r4, #12]
 80095e4:	d106      	bne.n	80095f4 <__sflush_r+0x68>
 80095e6:	6829      	ldr	r1, [r5, #0]
 80095e8:	291d      	cmp	r1, #29
 80095ea:	d82b      	bhi.n	8009644 <__sflush_r+0xb8>
 80095ec:	4a29      	ldr	r2, [pc, #164]	; (8009694 <__sflush_r+0x108>)
 80095ee:	410a      	asrs	r2, r1
 80095f0:	07d6      	lsls	r6, r2, #31
 80095f2:	d427      	bmi.n	8009644 <__sflush_r+0xb8>
 80095f4:	2200      	movs	r2, #0
 80095f6:	6062      	str	r2, [r4, #4]
 80095f8:	04d9      	lsls	r1, r3, #19
 80095fa:	6922      	ldr	r2, [r4, #16]
 80095fc:	6022      	str	r2, [r4, #0]
 80095fe:	d504      	bpl.n	800960a <__sflush_r+0x7e>
 8009600:	1c42      	adds	r2, r0, #1
 8009602:	d101      	bne.n	8009608 <__sflush_r+0x7c>
 8009604:	682b      	ldr	r3, [r5, #0]
 8009606:	b903      	cbnz	r3, 800960a <__sflush_r+0x7e>
 8009608:	6560      	str	r0, [r4, #84]	; 0x54
 800960a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800960c:	602f      	str	r7, [r5, #0]
 800960e:	2900      	cmp	r1, #0
 8009610:	d0c9      	beq.n	80095a6 <__sflush_r+0x1a>
 8009612:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009616:	4299      	cmp	r1, r3
 8009618:	d002      	beq.n	8009620 <__sflush_r+0x94>
 800961a:	4628      	mov	r0, r5
 800961c:	f7fe fa1a 	bl	8007a54 <_free_r>
 8009620:	2000      	movs	r0, #0
 8009622:	6360      	str	r0, [r4, #52]	; 0x34
 8009624:	e7c0      	b.n	80095a8 <__sflush_r+0x1c>
 8009626:	2301      	movs	r3, #1
 8009628:	4628      	mov	r0, r5
 800962a:	47b0      	blx	r6
 800962c:	1c41      	adds	r1, r0, #1
 800962e:	d1c8      	bne.n	80095c2 <__sflush_r+0x36>
 8009630:	682b      	ldr	r3, [r5, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d0c5      	beq.n	80095c2 <__sflush_r+0x36>
 8009636:	2b1d      	cmp	r3, #29
 8009638:	d001      	beq.n	800963e <__sflush_r+0xb2>
 800963a:	2b16      	cmp	r3, #22
 800963c:	d101      	bne.n	8009642 <__sflush_r+0xb6>
 800963e:	602f      	str	r7, [r5, #0]
 8009640:	e7b1      	b.n	80095a6 <__sflush_r+0x1a>
 8009642:	89a3      	ldrh	r3, [r4, #12]
 8009644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009648:	81a3      	strh	r3, [r4, #12]
 800964a:	e7ad      	b.n	80095a8 <__sflush_r+0x1c>
 800964c:	690f      	ldr	r7, [r1, #16]
 800964e:	2f00      	cmp	r7, #0
 8009650:	d0a9      	beq.n	80095a6 <__sflush_r+0x1a>
 8009652:	0793      	lsls	r3, r2, #30
 8009654:	680e      	ldr	r6, [r1, #0]
 8009656:	bf08      	it	eq
 8009658:	694b      	ldreq	r3, [r1, #20]
 800965a:	600f      	str	r7, [r1, #0]
 800965c:	bf18      	it	ne
 800965e:	2300      	movne	r3, #0
 8009660:	eba6 0807 	sub.w	r8, r6, r7
 8009664:	608b      	str	r3, [r1, #8]
 8009666:	f1b8 0f00 	cmp.w	r8, #0
 800966a:	dd9c      	ble.n	80095a6 <__sflush_r+0x1a>
 800966c:	6a21      	ldr	r1, [r4, #32]
 800966e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009670:	4643      	mov	r3, r8
 8009672:	463a      	mov	r2, r7
 8009674:	4628      	mov	r0, r5
 8009676:	47b0      	blx	r6
 8009678:	2800      	cmp	r0, #0
 800967a:	dc06      	bgt.n	800968a <__sflush_r+0xfe>
 800967c:	89a3      	ldrh	r3, [r4, #12]
 800967e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009682:	81a3      	strh	r3, [r4, #12]
 8009684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009688:	e78e      	b.n	80095a8 <__sflush_r+0x1c>
 800968a:	4407      	add	r7, r0
 800968c:	eba8 0800 	sub.w	r8, r8, r0
 8009690:	e7e9      	b.n	8009666 <__sflush_r+0xda>
 8009692:	bf00      	nop
 8009694:	dfbffffe 	.word	0xdfbffffe

08009698 <_fflush_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	690b      	ldr	r3, [r1, #16]
 800969c:	4605      	mov	r5, r0
 800969e:	460c      	mov	r4, r1
 80096a0:	b913      	cbnz	r3, 80096a8 <_fflush_r+0x10>
 80096a2:	2500      	movs	r5, #0
 80096a4:	4628      	mov	r0, r5
 80096a6:	bd38      	pop	{r3, r4, r5, pc}
 80096a8:	b118      	cbz	r0, 80096b2 <_fflush_r+0x1a>
 80096aa:	6a03      	ldr	r3, [r0, #32]
 80096ac:	b90b      	cbnz	r3, 80096b2 <_fflush_r+0x1a>
 80096ae:	f7fd fa01 	bl	8006ab4 <__sinit>
 80096b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d0f3      	beq.n	80096a2 <_fflush_r+0xa>
 80096ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096bc:	07d0      	lsls	r0, r2, #31
 80096be:	d404      	bmi.n	80096ca <_fflush_r+0x32>
 80096c0:	0599      	lsls	r1, r3, #22
 80096c2:	d402      	bmi.n	80096ca <_fflush_r+0x32>
 80096c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096c6:	f7fd fb40 	bl	8006d4a <__retarget_lock_acquire_recursive>
 80096ca:	4628      	mov	r0, r5
 80096cc:	4621      	mov	r1, r4
 80096ce:	f7ff ff5d 	bl	800958c <__sflush_r>
 80096d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096d4:	07da      	lsls	r2, r3, #31
 80096d6:	4605      	mov	r5, r0
 80096d8:	d4e4      	bmi.n	80096a4 <_fflush_r+0xc>
 80096da:	89a3      	ldrh	r3, [r4, #12]
 80096dc:	059b      	lsls	r3, r3, #22
 80096de:	d4e1      	bmi.n	80096a4 <_fflush_r+0xc>
 80096e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096e2:	f7fd fb33 	bl	8006d4c <__retarget_lock_release_recursive>
 80096e6:	e7dd      	b.n	80096a4 <_fflush_r+0xc>

080096e8 <memmove>:
 80096e8:	4288      	cmp	r0, r1
 80096ea:	b510      	push	{r4, lr}
 80096ec:	eb01 0402 	add.w	r4, r1, r2
 80096f0:	d902      	bls.n	80096f8 <memmove+0x10>
 80096f2:	4284      	cmp	r4, r0
 80096f4:	4623      	mov	r3, r4
 80096f6:	d807      	bhi.n	8009708 <memmove+0x20>
 80096f8:	1e43      	subs	r3, r0, #1
 80096fa:	42a1      	cmp	r1, r4
 80096fc:	d008      	beq.n	8009710 <memmove+0x28>
 80096fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009702:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009706:	e7f8      	b.n	80096fa <memmove+0x12>
 8009708:	4402      	add	r2, r0
 800970a:	4601      	mov	r1, r0
 800970c:	428a      	cmp	r2, r1
 800970e:	d100      	bne.n	8009712 <memmove+0x2a>
 8009710:	bd10      	pop	{r4, pc}
 8009712:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009716:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800971a:	e7f7      	b.n	800970c <memmove+0x24>

0800971c <strncmp>:
 800971c:	b510      	push	{r4, lr}
 800971e:	b16a      	cbz	r2, 800973c <strncmp+0x20>
 8009720:	3901      	subs	r1, #1
 8009722:	1884      	adds	r4, r0, r2
 8009724:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009728:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800972c:	429a      	cmp	r2, r3
 800972e:	d103      	bne.n	8009738 <strncmp+0x1c>
 8009730:	42a0      	cmp	r0, r4
 8009732:	d001      	beq.n	8009738 <strncmp+0x1c>
 8009734:	2a00      	cmp	r2, #0
 8009736:	d1f5      	bne.n	8009724 <strncmp+0x8>
 8009738:	1ad0      	subs	r0, r2, r3
 800973a:	bd10      	pop	{r4, pc}
 800973c:	4610      	mov	r0, r2
 800973e:	e7fc      	b.n	800973a <strncmp+0x1e>

08009740 <_sbrk_r>:
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	4d06      	ldr	r5, [pc, #24]	; (800975c <_sbrk_r+0x1c>)
 8009744:	2300      	movs	r3, #0
 8009746:	4604      	mov	r4, r0
 8009748:	4608      	mov	r0, r1
 800974a:	602b      	str	r3, [r5, #0]
 800974c:	f7f8 f8e2 	bl	8001914 <_sbrk>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	d102      	bne.n	800975a <_sbrk_r+0x1a>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	b103      	cbz	r3, 800975a <_sbrk_r+0x1a>
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	bd38      	pop	{r3, r4, r5, pc}
 800975c:	20000b84 	.word	0x20000b84

08009760 <memcpy>:
 8009760:	440a      	add	r2, r1
 8009762:	4291      	cmp	r1, r2
 8009764:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009768:	d100      	bne.n	800976c <memcpy+0xc>
 800976a:	4770      	bx	lr
 800976c:	b510      	push	{r4, lr}
 800976e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009776:	4291      	cmp	r1, r2
 8009778:	d1f9      	bne.n	800976e <memcpy+0xe>
 800977a:	bd10      	pop	{r4, pc}
 800977c:	0000      	movs	r0, r0
	...

08009780 <nan>:
 8009780:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009788 <nan+0x8>
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	00000000 	.word	0x00000000
 800978c:	7ff80000 	.word	0x7ff80000

08009790 <__assert_func>:
 8009790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009792:	4614      	mov	r4, r2
 8009794:	461a      	mov	r2, r3
 8009796:	4b09      	ldr	r3, [pc, #36]	; (80097bc <__assert_func+0x2c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4605      	mov	r5, r0
 800979c:	68d8      	ldr	r0, [r3, #12]
 800979e:	b14c      	cbz	r4, 80097b4 <__assert_func+0x24>
 80097a0:	4b07      	ldr	r3, [pc, #28]	; (80097c0 <__assert_func+0x30>)
 80097a2:	9100      	str	r1, [sp, #0]
 80097a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097a8:	4906      	ldr	r1, [pc, #24]	; (80097c4 <__assert_func+0x34>)
 80097aa:	462b      	mov	r3, r5
 80097ac:	f000 fbca 	bl	8009f44 <fiprintf>
 80097b0:	f000 fbda 	bl	8009f68 <abort>
 80097b4:	4b04      	ldr	r3, [pc, #16]	; (80097c8 <__assert_func+0x38>)
 80097b6:	461c      	mov	r4, r3
 80097b8:	e7f3      	b.n	80097a2 <__assert_func+0x12>
 80097ba:	bf00      	nop
 80097bc:	20000064 	.word	0x20000064
 80097c0:	0800a9e2 	.word	0x0800a9e2
 80097c4:	0800a9ef 	.word	0x0800a9ef
 80097c8:	0800aa1d 	.word	0x0800aa1d

080097cc <_calloc_r>:
 80097cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097ce:	fba1 2402 	umull	r2, r4, r1, r2
 80097d2:	b94c      	cbnz	r4, 80097e8 <_calloc_r+0x1c>
 80097d4:	4611      	mov	r1, r2
 80097d6:	9201      	str	r2, [sp, #4]
 80097d8:	f7fe f9b0 	bl	8007b3c <_malloc_r>
 80097dc:	9a01      	ldr	r2, [sp, #4]
 80097de:	4605      	mov	r5, r0
 80097e0:	b930      	cbnz	r0, 80097f0 <_calloc_r+0x24>
 80097e2:	4628      	mov	r0, r5
 80097e4:	b003      	add	sp, #12
 80097e6:	bd30      	pop	{r4, r5, pc}
 80097e8:	220c      	movs	r2, #12
 80097ea:	6002      	str	r2, [r0, #0]
 80097ec:	2500      	movs	r5, #0
 80097ee:	e7f8      	b.n	80097e2 <_calloc_r+0x16>
 80097f0:	4621      	mov	r1, r4
 80097f2:	f7fd fa2c 	bl	8006c4e <memset>
 80097f6:	e7f4      	b.n	80097e2 <_calloc_r+0x16>

080097f8 <rshift>:
 80097f8:	6903      	ldr	r3, [r0, #16]
 80097fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80097fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009802:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009806:	f100 0414 	add.w	r4, r0, #20
 800980a:	dd45      	ble.n	8009898 <rshift+0xa0>
 800980c:	f011 011f 	ands.w	r1, r1, #31
 8009810:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009814:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009818:	d10c      	bne.n	8009834 <rshift+0x3c>
 800981a:	f100 0710 	add.w	r7, r0, #16
 800981e:	4629      	mov	r1, r5
 8009820:	42b1      	cmp	r1, r6
 8009822:	d334      	bcc.n	800988e <rshift+0x96>
 8009824:	1a9b      	subs	r3, r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	1eea      	subs	r2, r5, #3
 800982a:	4296      	cmp	r6, r2
 800982c:	bf38      	it	cc
 800982e:	2300      	movcc	r3, #0
 8009830:	4423      	add	r3, r4
 8009832:	e015      	b.n	8009860 <rshift+0x68>
 8009834:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009838:	f1c1 0820 	rsb	r8, r1, #32
 800983c:	40cf      	lsrs	r7, r1
 800983e:	f105 0e04 	add.w	lr, r5, #4
 8009842:	46a1      	mov	r9, r4
 8009844:	4576      	cmp	r6, lr
 8009846:	46f4      	mov	ip, lr
 8009848:	d815      	bhi.n	8009876 <rshift+0x7e>
 800984a:	1a9a      	subs	r2, r3, r2
 800984c:	0092      	lsls	r2, r2, #2
 800984e:	3a04      	subs	r2, #4
 8009850:	3501      	adds	r5, #1
 8009852:	42ae      	cmp	r6, r5
 8009854:	bf38      	it	cc
 8009856:	2200      	movcc	r2, #0
 8009858:	18a3      	adds	r3, r4, r2
 800985a:	50a7      	str	r7, [r4, r2]
 800985c:	b107      	cbz	r7, 8009860 <rshift+0x68>
 800985e:	3304      	adds	r3, #4
 8009860:	1b1a      	subs	r2, r3, r4
 8009862:	42a3      	cmp	r3, r4
 8009864:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009868:	bf08      	it	eq
 800986a:	2300      	moveq	r3, #0
 800986c:	6102      	str	r2, [r0, #16]
 800986e:	bf08      	it	eq
 8009870:	6143      	streq	r3, [r0, #20]
 8009872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009876:	f8dc c000 	ldr.w	ip, [ip]
 800987a:	fa0c fc08 	lsl.w	ip, ip, r8
 800987e:	ea4c 0707 	orr.w	r7, ip, r7
 8009882:	f849 7b04 	str.w	r7, [r9], #4
 8009886:	f85e 7b04 	ldr.w	r7, [lr], #4
 800988a:	40cf      	lsrs	r7, r1
 800988c:	e7da      	b.n	8009844 <rshift+0x4c>
 800988e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009892:	f847 cf04 	str.w	ip, [r7, #4]!
 8009896:	e7c3      	b.n	8009820 <rshift+0x28>
 8009898:	4623      	mov	r3, r4
 800989a:	e7e1      	b.n	8009860 <rshift+0x68>

0800989c <__hexdig_fun>:
 800989c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80098a0:	2b09      	cmp	r3, #9
 80098a2:	d802      	bhi.n	80098aa <__hexdig_fun+0xe>
 80098a4:	3820      	subs	r0, #32
 80098a6:	b2c0      	uxtb	r0, r0
 80098a8:	4770      	bx	lr
 80098aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80098ae:	2b05      	cmp	r3, #5
 80098b0:	d801      	bhi.n	80098b6 <__hexdig_fun+0x1a>
 80098b2:	3847      	subs	r0, #71	; 0x47
 80098b4:	e7f7      	b.n	80098a6 <__hexdig_fun+0xa>
 80098b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80098ba:	2b05      	cmp	r3, #5
 80098bc:	d801      	bhi.n	80098c2 <__hexdig_fun+0x26>
 80098be:	3827      	subs	r0, #39	; 0x27
 80098c0:	e7f1      	b.n	80098a6 <__hexdig_fun+0xa>
 80098c2:	2000      	movs	r0, #0
 80098c4:	4770      	bx	lr
	...

080098c8 <__gethex>:
 80098c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098cc:	4617      	mov	r7, r2
 80098ce:	680a      	ldr	r2, [r1, #0]
 80098d0:	b085      	sub	sp, #20
 80098d2:	f102 0b02 	add.w	fp, r2, #2
 80098d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80098da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80098de:	4681      	mov	r9, r0
 80098e0:	468a      	mov	sl, r1
 80098e2:	9302      	str	r3, [sp, #8]
 80098e4:	32fe      	adds	r2, #254	; 0xfe
 80098e6:	eb02 030b 	add.w	r3, r2, fp
 80098ea:	46d8      	mov	r8, fp
 80098ec:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80098f0:	9301      	str	r3, [sp, #4]
 80098f2:	2830      	cmp	r0, #48	; 0x30
 80098f4:	d0f7      	beq.n	80098e6 <__gethex+0x1e>
 80098f6:	f7ff ffd1 	bl	800989c <__hexdig_fun>
 80098fa:	4604      	mov	r4, r0
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d138      	bne.n	8009972 <__gethex+0xaa>
 8009900:	49a7      	ldr	r1, [pc, #668]	; (8009ba0 <__gethex+0x2d8>)
 8009902:	2201      	movs	r2, #1
 8009904:	4640      	mov	r0, r8
 8009906:	f7ff ff09 	bl	800971c <strncmp>
 800990a:	4606      	mov	r6, r0
 800990c:	2800      	cmp	r0, #0
 800990e:	d169      	bne.n	80099e4 <__gethex+0x11c>
 8009910:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009914:	465d      	mov	r5, fp
 8009916:	f7ff ffc1 	bl	800989c <__hexdig_fun>
 800991a:	2800      	cmp	r0, #0
 800991c:	d064      	beq.n	80099e8 <__gethex+0x120>
 800991e:	465a      	mov	r2, fp
 8009920:	7810      	ldrb	r0, [r2, #0]
 8009922:	2830      	cmp	r0, #48	; 0x30
 8009924:	4690      	mov	r8, r2
 8009926:	f102 0201 	add.w	r2, r2, #1
 800992a:	d0f9      	beq.n	8009920 <__gethex+0x58>
 800992c:	f7ff ffb6 	bl	800989c <__hexdig_fun>
 8009930:	2301      	movs	r3, #1
 8009932:	fab0 f480 	clz	r4, r0
 8009936:	0964      	lsrs	r4, r4, #5
 8009938:	465e      	mov	r6, fp
 800993a:	9301      	str	r3, [sp, #4]
 800993c:	4642      	mov	r2, r8
 800993e:	4615      	mov	r5, r2
 8009940:	3201      	adds	r2, #1
 8009942:	7828      	ldrb	r0, [r5, #0]
 8009944:	f7ff ffaa 	bl	800989c <__hexdig_fun>
 8009948:	2800      	cmp	r0, #0
 800994a:	d1f8      	bne.n	800993e <__gethex+0x76>
 800994c:	4994      	ldr	r1, [pc, #592]	; (8009ba0 <__gethex+0x2d8>)
 800994e:	2201      	movs	r2, #1
 8009950:	4628      	mov	r0, r5
 8009952:	f7ff fee3 	bl	800971c <strncmp>
 8009956:	b978      	cbnz	r0, 8009978 <__gethex+0xb0>
 8009958:	b946      	cbnz	r6, 800996c <__gethex+0xa4>
 800995a:	1c6e      	adds	r6, r5, #1
 800995c:	4632      	mov	r2, r6
 800995e:	4615      	mov	r5, r2
 8009960:	3201      	adds	r2, #1
 8009962:	7828      	ldrb	r0, [r5, #0]
 8009964:	f7ff ff9a 	bl	800989c <__hexdig_fun>
 8009968:	2800      	cmp	r0, #0
 800996a:	d1f8      	bne.n	800995e <__gethex+0x96>
 800996c:	1b73      	subs	r3, r6, r5
 800996e:	009e      	lsls	r6, r3, #2
 8009970:	e004      	b.n	800997c <__gethex+0xb4>
 8009972:	2400      	movs	r4, #0
 8009974:	4626      	mov	r6, r4
 8009976:	e7e1      	b.n	800993c <__gethex+0x74>
 8009978:	2e00      	cmp	r6, #0
 800997a:	d1f7      	bne.n	800996c <__gethex+0xa4>
 800997c:	782b      	ldrb	r3, [r5, #0]
 800997e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009982:	2b50      	cmp	r3, #80	; 0x50
 8009984:	d13d      	bne.n	8009a02 <__gethex+0x13a>
 8009986:	786b      	ldrb	r3, [r5, #1]
 8009988:	2b2b      	cmp	r3, #43	; 0x2b
 800998a:	d02f      	beq.n	80099ec <__gethex+0x124>
 800998c:	2b2d      	cmp	r3, #45	; 0x2d
 800998e:	d031      	beq.n	80099f4 <__gethex+0x12c>
 8009990:	1c69      	adds	r1, r5, #1
 8009992:	f04f 0b00 	mov.w	fp, #0
 8009996:	7808      	ldrb	r0, [r1, #0]
 8009998:	f7ff ff80 	bl	800989c <__hexdig_fun>
 800999c:	1e42      	subs	r2, r0, #1
 800999e:	b2d2      	uxtb	r2, r2
 80099a0:	2a18      	cmp	r2, #24
 80099a2:	d82e      	bhi.n	8009a02 <__gethex+0x13a>
 80099a4:	f1a0 0210 	sub.w	r2, r0, #16
 80099a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80099ac:	f7ff ff76 	bl	800989c <__hexdig_fun>
 80099b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80099b4:	fa5f fc8c 	uxtb.w	ip, ip
 80099b8:	f1bc 0f18 	cmp.w	ip, #24
 80099bc:	d91d      	bls.n	80099fa <__gethex+0x132>
 80099be:	f1bb 0f00 	cmp.w	fp, #0
 80099c2:	d000      	beq.n	80099c6 <__gethex+0xfe>
 80099c4:	4252      	negs	r2, r2
 80099c6:	4416      	add	r6, r2
 80099c8:	f8ca 1000 	str.w	r1, [sl]
 80099cc:	b1dc      	cbz	r4, 8009a06 <__gethex+0x13e>
 80099ce:	9b01      	ldr	r3, [sp, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	bf14      	ite	ne
 80099d4:	f04f 0800 	movne.w	r8, #0
 80099d8:	f04f 0806 	moveq.w	r8, #6
 80099dc:	4640      	mov	r0, r8
 80099de:	b005      	add	sp, #20
 80099e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e4:	4645      	mov	r5, r8
 80099e6:	4626      	mov	r6, r4
 80099e8:	2401      	movs	r4, #1
 80099ea:	e7c7      	b.n	800997c <__gethex+0xb4>
 80099ec:	f04f 0b00 	mov.w	fp, #0
 80099f0:	1ca9      	adds	r1, r5, #2
 80099f2:	e7d0      	b.n	8009996 <__gethex+0xce>
 80099f4:	f04f 0b01 	mov.w	fp, #1
 80099f8:	e7fa      	b.n	80099f0 <__gethex+0x128>
 80099fa:	230a      	movs	r3, #10
 80099fc:	fb03 0002 	mla	r0, r3, r2, r0
 8009a00:	e7d0      	b.n	80099a4 <__gethex+0xdc>
 8009a02:	4629      	mov	r1, r5
 8009a04:	e7e0      	b.n	80099c8 <__gethex+0x100>
 8009a06:	eba5 0308 	sub.w	r3, r5, r8
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	2b07      	cmp	r3, #7
 8009a10:	dc0a      	bgt.n	8009a28 <__gethex+0x160>
 8009a12:	4648      	mov	r0, r9
 8009a14:	f7fe f91e 	bl	8007c54 <_Balloc>
 8009a18:	4604      	mov	r4, r0
 8009a1a:	b940      	cbnz	r0, 8009a2e <__gethex+0x166>
 8009a1c:	4b61      	ldr	r3, [pc, #388]	; (8009ba4 <__gethex+0x2dc>)
 8009a1e:	4602      	mov	r2, r0
 8009a20:	21e4      	movs	r1, #228	; 0xe4
 8009a22:	4861      	ldr	r0, [pc, #388]	; (8009ba8 <__gethex+0x2e0>)
 8009a24:	f7ff feb4 	bl	8009790 <__assert_func>
 8009a28:	3101      	adds	r1, #1
 8009a2a:	105b      	asrs	r3, r3, #1
 8009a2c:	e7ef      	b.n	8009a0e <__gethex+0x146>
 8009a2e:	f100 0a14 	add.w	sl, r0, #20
 8009a32:	2300      	movs	r3, #0
 8009a34:	495a      	ldr	r1, [pc, #360]	; (8009ba0 <__gethex+0x2d8>)
 8009a36:	f8cd a004 	str.w	sl, [sp, #4]
 8009a3a:	469b      	mov	fp, r3
 8009a3c:	45a8      	cmp	r8, r5
 8009a3e:	d342      	bcc.n	8009ac6 <__gethex+0x1fe>
 8009a40:	9801      	ldr	r0, [sp, #4]
 8009a42:	f840 bb04 	str.w	fp, [r0], #4
 8009a46:	eba0 000a 	sub.w	r0, r0, sl
 8009a4a:	1080      	asrs	r0, r0, #2
 8009a4c:	6120      	str	r0, [r4, #16]
 8009a4e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009a52:	4658      	mov	r0, fp
 8009a54:	f7fe f9f0 	bl	8007e38 <__hi0bits>
 8009a58:	683d      	ldr	r5, [r7, #0]
 8009a5a:	eba8 0000 	sub.w	r0, r8, r0
 8009a5e:	42a8      	cmp	r0, r5
 8009a60:	dd59      	ble.n	8009b16 <__gethex+0x24e>
 8009a62:	eba0 0805 	sub.w	r8, r0, r5
 8009a66:	4641      	mov	r1, r8
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f7fe fd7f 	bl	800856c <__any_on>
 8009a6e:	4683      	mov	fp, r0
 8009a70:	b1b8      	cbz	r0, 8009aa2 <__gethex+0x1da>
 8009a72:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8009a76:	1159      	asrs	r1, r3, #5
 8009a78:	f003 021f 	and.w	r2, r3, #31
 8009a7c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009a80:	f04f 0b01 	mov.w	fp, #1
 8009a84:	fa0b f202 	lsl.w	r2, fp, r2
 8009a88:	420a      	tst	r2, r1
 8009a8a:	d00a      	beq.n	8009aa2 <__gethex+0x1da>
 8009a8c:	455b      	cmp	r3, fp
 8009a8e:	dd06      	ble.n	8009a9e <__gethex+0x1d6>
 8009a90:	f1a8 0102 	sub.w	r1, r8, #2
 8009a94:	4620      	mov	r0, r4
 8009a96:	f7fe fd69 	bl	800856c <__any_on>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	d138      	bne.n	8009b10 <__gethex+0x248>
 8009a9e:	f04f 0b02 	mov.w	fp, #2
 8009aa2:	4641      	mov	r1, r8
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f7ff fea7 	bl	80097f8 <rshift>
 8009aaa:	4446      	add	r6, r8
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	42b3      	cmp	r3, r6
 8009ab0:	da41      	bge.n	8009b36 <__gethex+0x26e>
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	4648      	mov	r0, r9
 8009ab6:	f7fe f90d 	bl	8007cd4 <_Bfree>
 8009aba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009abc:	2300      	movs	r3, #0
 8009abe:	6013      	str	r3, [r2, #0]
 8009ac0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009ac4:	e78a      	b.n	80099dc <__gethex+0x114>
 8009ac6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009aca:	2a2e      	cmp	r2, #46	; 0x2e
 8009acc:	d014      	beq.n	8009af8 <__gethex+0x230>
 8009ace:	2b20      	cmp	r3, #32
 8009ad0:	d106      	bne.n	8009ae0 <__gethex+0x218>
 8009ad2:	9b01      	ldr	r3, [sp, #4]
 8009ad4:	f843 bb04 	str.w	fp, [r3], #4
 8009ad8:	f04f 0b00 	mov.w	fp, #0
 8009adc:	9301      	str	r3, [sp, #4]
 8009ade:	465b      	mov	r3, fp
 8009ae0:	7828      	ldrb	r0, [r5, #0]
 8009ae2:	9303      	str	r3, [sp, #12]
 8009ae4:	f7ff feda 	bl	800989c <__hexdig_fun>
 8009ae8:	9b03      	ldr	r3, [sp, #12]
 8009aea:	f000 000f 	and.w	r0, r0, #15
 8009aee:	4098      	lsls	r0, r3
 8009af0:	ea4b 0b00 	orr.w	fp, fp, r0
 8009af4:	3304      	adds	r3, #4
 8009af6:	e7a1      	b.n	8009a3c <__gethex+0x174>
 8009af8:	45a8      	cmp	r8, r5
 8009afa:	d8e8      	bhi.n	8009ace <__gethex+0x206>
 8009afc:	2201      	movs	r2, #1
 8009afe:	4628      	mov	r0, r5
 8009b00:	9303      	str	r3, [sp, #12]
 8009b02:	f7ff fe0b 	bl	800971c <strncmp>
 8009b06:	4926      	ldr	r1, [pc, #152]	; (8009ba0 <__gethex+0x2d8>)
 8009b08:	9b03      	ldr	r3, [sp, #12]
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	d1df      	bne.n	8009ace <__gethex+0x206>
 8009b0e:	e795      	b.n	8009a3c <__gethex+0x174>
 8009b10:	f04f 0b03 	mov.w	fp, #3
 8009b14:	e7c5      	b.n	8009aa2 <__gethex+0x1da>
 8009b16:	da0b      	bge.n	8009b30 <__gethex+0x268>
 8009b18:	eba5 0800 	sub.w	r8, r5, r0
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	4642      	mov	r2, r8
 8009b20:	4648      	mov	r0, r9
 8009b22:	f7fe faf1 	bl	8008108 <__lshift>
 8009b26:	eba6 0608 	sub.w	r6, r6, r8
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	f100 0a14 	add.w	sl, r0, #20
 8009b30:	f04f 0b00 	mov.w	fp, #0
 8009b34:	e7ba      	b.n	8009aac <__gethex+0x1e4>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	42b3      	cmp	r3, r6
 8009b3a:	dd73      	ble.n	8009c24 <__gethex+0x35c>
 8009b3c:	1b9e      	subs	r6, r3, r6
 8009b3e:	42b5      	cmp	r5, r6
 8009b40:	dc34      	bgt.n	8009bac <__gethex+0x2e4>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d023      	beq.n	8009b90 <__gethex+0x2c8>
 8009b48:	2b03      	cmp	r3, #3
 8009b4a:	d025      	beq.n	8009b98 <__gethex+0x2d0>
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d115      	bne.n	8009b7c <__gethex+0x2b4>
 8009b50:	42b5      	cmp	r5, r6
 8009b52:	d113      	bne.n	8009b7c <__gethex+0x2b4>
 8009b54:	2d01      	cmp	r5, #1
 8009b56:	d10b      	bne.n	8009b70 <__gethex+0x2a8>
 8009b58:	9a02      	ldr	r2, [sp, #8]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6013      	str	r3, [r2, #0]
 8009b5e:	2301      	movs	r3, #1
 8009b60:	6123      	str	r3, [r4, #16]
 8009b62:	f8ca 3000 	str.w	r3, [sl]
 8009b66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b68:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009b6c:	601c      	str	r4, [r3, #0]
 8009b6e:	e735      	b.n	80099dc <__gethex+0x114>
 8009b70:	1e69      	subs	r1, r5, #1
 8009b72:	4620      	mov	r0, r4
 8009b74:	f7fe fcfa 	bl	800856c <__any_on>
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	d1ed      	bne.n	8009b58 <__gethex+0x290>
 8009b7c:	4621      	mov	r1, r4
 8009b7e:	4648      	mov	r0, r9
 8009b80:	f7fe f8a8 	bl	8007cd4 <_Bfree>
 8009b84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b86:	2300      	movs	r3, #0
 8009b88:	6013      	str	r3, [r2, #0]
 8009b8a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009b8e:	e725      	b.n	80099dc <__gethex+0x114>
 8009b90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1f2      	bne.n	8009b7c <__gethex+0x2b4>
 8009b96:	e7df      	b.n	8009b58 <__gethex+0x290>
 8009b98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1dc      	bne.n	8009b58 <__gethex+0x290>
 8009b9e:	e7ed      	b.n	8009b7c <__gethex+0x2b4>
 8009ba0:	0800a874 	.word	0x0800a874
 8009ba4:	0800a70d 	.word	0x0800a70d
 8009ba8:	0800aa1e 	.word	0x0800aa1e
 8009bac:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8009bb0:	f1bb 0f00 	cmp.w	fp, #0
 8009bb4:	d133      	bne.n	8009c1e <__gethex+0x356>
 8009bb6:	f1b8 0f00 	cmp.w	r8, #0
 8009bba:	d004      	beq.n	8009bc6 <__gethex+0x2fe>
 8009bbc:	4641      	mov	r1, r8
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f7fe fcd4 	bl	800856c <__any_on>
 8009bc4:	4683      	mov	fp, r0
 8009bc6:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009bca:	2301      	movs	r3, #1
 8009bcc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009bd0:	f008 081f 	and.w	r8, r8, #31
 8009bd4:	fa03 f308 	lsl.w	r3, r3, r8
 8009bd8:	4213      	tst	r3, r2
 8009bda:	4631      	mov	r1, r6
 8009bdc:	4620      	mov	r0, r4
 8009bde:	bf18      	it	ne
 8009be0:	f04b 0b02 	orrne.w	fp, fp, #2
 8009be4:	1bad      	subs	r5, r5, r6
 8009be6:	f7ff fe07 	bl	80097f8 <rshift>
 8009bea:	687e      	ldr	r6, [r7, #4]
 8009bec:	f04f 0802 	mov.w	r8, #2
 8009bf0:	f1bb 0f00 	cmp.w	fp, #0
 8009bf4:	d04a      	beq.n	8009c8c <__gethex+0x3c4>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d016      	beq.n	8009c2a <__gethex+0x362>
 8009bfc:	2b03      	cmp	r3, #3
 8009bfe:	d018      	beq.n	8009c32 <__gethex+0x36a>
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d109      	bne.n	8009c18 <__gethex+0x350>
 8009c04:	f01b 0f02 	tst.w	fp, #2
 8009c08:	d006      	beq.n	8009c18 <__gethex+0x350>
 8009c0a:	f8da 3000 	ldr.w	r3, [sl]
 8009c0e:	ea4b 0b03 	orr.w	fp, fp, r3
 8009c12:	f01b 0f01 	tst.w	fp, #1
 8009c16:	d10f      	bne.n	8009c38 <__gethex+0x370>
 8009c18:	f048 0810 	orr.w	r8, r8, #16
 8009c1c:	e036      	b.n	8009c8c <__gethex+0x3c4>
 8009c1e:	f04f 0b01 	mov.w	fp, #1
 8009c22:	e7d0      	b.n	8009bc6 <__gethex+0x2fe>
 8009c24:	f04f 0801 	mov.w	r8, #1
 8009c28:	e7e2      	b.n	8009bf0 <__gethex+0x328>
 8009c2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c2c:	f1c3 0301 	rsb	r3, r3, #1
 8009c30:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d0ef      	beq.n	8009c18 <__gethex+0x350>
 8009c38:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009c3c:	f104 0214 	add.w	r2, r4, #20
 8009c40:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009c44:	9301      	str	r3, [sp, #4]
 8009c46:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	4694      	mov	ip, r2
 8009c4e:	f852 1b04 	ldr.w	r1, [r2], #4
 8009c52:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8009c56:	d01e      	beq.n	8009c96 <__gethex+0x3ce>
 8009c58:	3101      	adds	r1, #1
 8009c5a:	f8cc 1000 	str.w	r1, [ip]
 8009c5e:	f1b8 0f02 	cmp.w	r8, #2
 8009c62:	f104 0214 	add.w	r2, r4, #20
 8009c66:	d13d      	bne.n	8009ce4 <__gethex+0x41c>
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	42ab      	cmp	r3, r5
 8009c6e:	d10b      	bne.n	8009c88 <__gethex+0x3c0>
 8009c70:	1169      	asrs	r1, r5, #5
 8009c72:	2301      	movs	r3, #1
 8009c74:	f005 051f 	and.w	r5, r5, #31
 8009c78:	fa03 f505 	lsl.w	r5, r3, r5
 8009c7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c80:	421d      	tst	r5, r3
 8009c82:	bf18      	it	ne
 8009c84:	f04f 0801 	movne.w	r8, #1
 8009c88:	f048 0820 	orr.w	r8, r8, #32
 8009c8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c8e:	601c      	str	r4, [r3, #0]
 8009c90:	9b02      	ldr	r3, [sp, #8]
 8009c92:	601e      	str	r6, [r3, #0]
 8009c94:	e6a2      	b.n	80099dc <__gethex+0x114>
 8009c96:	4290      	cmp	r0, r2
 8009c98:	f842 3c04 	str.w	r3, [r2, #-4]
 8009c9c:	d8d6      	bhi.n	8009c4c <__gethex+0x384>
 8009c9e:	68a2      	ldr	r2, [r4, #8]
 8009ca0:	4593      	cmp	fp, r2
 8009ca2:	db17      	blt.n	8009cd4 <__gethex+0x40c>
 8009ca4:	6861      	ldr	r1, [r4, #4]
 8009ca6:	4648      	mov	r0, r9
 8009ca8:	3101      	adds	r1, #1
 8009caa:	f7fd ffd3 	bl	8007c54 <_Balloc>
 8009cae:	4682      	mov	sl, r0
 8009cb0:	b918      	cbnz	r0, 8009cba <__gethex+0x3f2>
 8009cb2:	4b1b      	ldr	r3, [pc, #108]	; (8009d20 <__gethex+0x458>)
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	2184      	movs	r1, #132	; 0x84
 8009cb8:	e6b3      	b.n	8009a22 <__gethex+0x15a>
 8009cba:	6922      	ldr	r2, [r4, #16]
 8009cbc:	3202      	adds	r2, #2
 8009cbe:	f104 010c 	add.w	r1, r4, #12
 8009cc2:	0092      	lsls	r2, r2, #2
 8009cc4:	300c      	adds	r0, #12
 8009cc6:	f7ff fd4b 	bl	8009760 <memcpy>
 8009cca:	4621      	mov	r1, r4
 8009ccc:	4648      	mov	r0, r9
 8009cce:	f7fe f801 	bl	8007cd4 <_Bfree>
 8009cd2:	4654      	mov	r4, sl
 8009cd4:	6922      	ldr	r2, [r4, #16]
 8009cd6:	1c51      	adds	r1, r2, #1
 8009cd8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009cdc:	6121      	str	r1, [r4, #16]
 8009cde:	2101      	movs	r1, #1
 8009ce0:	6151      	str	r1, [r2, #20]
 8009ce2:	e7bc      	b.n	8009c5e <__gethex+0x396>
 8009ce4:	6921      	ldr	r1, [r4, #16]
 8009ce6:	4559      	cmp	r1, fp
 8009ce8:	dd0b      	ble.n	8009d02 <__gethex+0x43a>
 8009cea:	2101      	movs	r1, #1
 8009cec:	4620      	mov	r0, r4
 8009cee:	f7ff fd83 	bl	80097f8 <rshift>
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	3601      	adds	r6, #1
 8009cf6:	42b3      	cmp	r3, r6
 8009cf8:	f6ff aedb 	blt.w	8009ab2 <__gethex+0x1ea>
 8009cfc:	f04f 0801 	mov.w	r8, #1
 8009d00:	e7c2      	b.n	8009c88 <__gethex+0x3c0>
 8009d02:	f015 051f 	ands.w	r5, r5, #31
 8009d06:	d0f9      	beq.n	8009cfc <__gethex+0x434>
 8009d08:	9b01      	ldr	r3, [sp, #4]
 8009d0a:	441a      	add	r2, r3
 8009d0c:	f1c5 0520 	rsb	r5, r5, #32
 8009d10:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009d14:	f7fe f890 	bl	8007e38 <__hi0bits>
 8009d18:	42a8      	cmp	r0, r5
 8009d1a:	dbe6      	blt.n	8009cea <__gethex+0x422>
 8009d1c:	e7ee      	b.n	8009cfc <__gethex+0x434>
 8009d1e:	bf00      	nop
 8009d20:	0800a70d 	.word	0x0800a70d

08009d24 <L_shift>:
 8009d24:	f1c2 0208 	rsb	r2, r2, #8
 8009d28:	0092      	lsls	r2, r2, #2
 8009d2a:	b570      	push	{r4, r5, r6, lr}
 8009d2c:	f1c2 0620 	rsb	r6, r2, #32
 8009d30:	6843      	ldr	r3, [r0, #4]
 8009d32:	6804      	ldr	r4, [r0, #0]
 8009d34:	fa03 f506 	lsl.w	r5, r3, r6
 8009d38:	432c      	orrs	r4, r5
 8009d3a:	40d3      	lsrs	r3, r2
 8009d3c:	6004      	str	r4, [r0, #0]
 8009d3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d42:	4288      	cmp	r0, r1
 8009d44:	d3f4      	bcc.n	8009d30 <L_shift+0xc>
 8009d46:	bd70      	pop	{r4, r5, r6, pc}

08009d48 <__match>:
 8009d48:	b530      	push	{r4, r5, lr}
 8009d4a:	6803      	ldr	r3, [r0, #0]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d52:	b914      	cbnz	r4, 8009d5a <__match+0x12>
 8009d54:	6003      	str	r3, [r0, #0]
 8009d56:	2001      	movs	r0, #1
 8009d58:	bd30      	pop	{r4, r5, pc}
 8009d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d5e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009d62:	2d19      	cmp	r5, #25
 8009d64:	bf98      	it	ls
 8009d66:	3220      	addls	r2, #32
 8009d68:	42a2      	cmp	r2, r4
 8009d6a:	d0f0      	beq.n	8009d4e <__match+0x6>
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	e7f3      	b.n	8009d58 <__match+0x10>

08009d70 <__hexnan>:
 8009d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d74:	680b      	ldr	r3, [r1, #0]
 8009d76:	6801      	ldr	r1, [r0, #0]
 8009d78:	115e      	asrs	r6, r3, #5
 8009d7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009d7e:	f013 031f 	ands.w	r3, r3, #31
 8009d82:	b087      	sub	sp, #28
 8009d84:	bf18      	it	ne
 8009d86:	3604      	addne	r6, #4
 8009d88:	2500      	movs	r5, #0
 8009d8a:	1f37      	subs	r7, r6, #4
 8009d8c:	4682      	mov	sl, r0
 8009d8e:	4690      	mov	r8, r2
 8009d90:	9301      	str	r3, [sp, #4]
 8009d92:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d96:	46b9      	mov	r9, r7
 8009d98:	463c      	mov	r4, r7
 8009d9a:	9502      	str	r5, [sp, #8]
 8009d9c:	46ab      	mov	fp, r5
 8009d9e:	784a      	ldrb	r2, [r1, #1]
 8009da0:	1c4b      	adds	r3, r1, #1
 8009da2:	9303      	str	r3, [sp, #12]
 8009da4:	b342      	cbz	r2, 8009df8 <__hexnan+0x88>
 8009da6:	4610      	mov	r0, r2
 8009da8:	9105      	str	r1, [sp, #20]
 8009daa:	9204      	str	r2, [sp, #16]
 8009dac:	f7ff fd76 	bl	800989c <__hexdig_fun>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d14f      	bne.n	8009e54 <__hexnan+0xe4>
 8009db4:	9a04      	ldr	r2, [sp, #16]
 8009db6:	9905      	ldr	r1, [sp, #20]
 8009db8:	2a20      	cmp	r2, #32
 8009dba:	d818      	bhi.n	8009dee <__hexnan+0x7e>
 8009dbc:	9b02      	ldr	r3, [sp, #8]
 8009dbe:	459b      	cmp	fp, r3
 8009dc0:	dd13      	ble.n	8009dea <__hexnan+0x7a>
 8009dc2:	454c      	cmp	r4, r9
 8009dc4:	d206      	bcs.n	8009dd4 <__hexnan+0x64>
 8009dc6:	2d07      	cmp	r5, #7
 8009dc8:	dc04      	bgt.n	8009dd4 <__hexnan+0x64>
 8009dca:	462a      	mov	r2, r5
 8009dcc:	4649      	mov	r1, r9
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f7ff ffa8 	bl	8009d24 <L_shift>
 8009dd4:	4544      	cmp	r4, r8
 8009dd6:	d950      	bls.n	8009e7a <__hexnan+0x10a>
 8009dd8:	2300      	movs	r3, #0
 8009dda:	f1a4 0904 	sub.w	r9, r4, #4
 8009dde:	f844 3c04 	str.w	r3, [r4, #-4]
 8009de2:	f8cd b008 	str.w	fp, [sp, #8]
 8009de6:	464c      	mov	r4, r9
 8009de8:	461d      	mov	r5, r3
 8009dea:	9903      	ldr	r1, [sp, #12]
 8009dec:	e7d7      	b.n	8009d9e <__hexnan+0x2e>
 8009dee:	2a29      	cmp	r2, #41	; 0x29
 8009df0:	d155      	bne.n	8009e9e <__hexnan+0x12e>
 8009df2:	3102      	adds	r1, #2
 8009df4:	f8ca 1000 	str.w	r1, [sl]
 8009df8:	f1bb 0f00 	cmp.w	fp, #0
 8009dfc:	d04f      	beq.n	8009e9e <__hexnan+0x12e>
 8009dfe:	454c      	cmp	r4, r9
 8009e00:	d206      	bcs.n	8009e10 <__hexnan+0xa0>
 8009e02:	2d07      	cmp	r5, #7
 8009e04:	dc04      	bgt.n	8009e10 <__hexnan+0xa0>
 8009e06:	462a      	mov	r2, r5
 8009e08:	4649      	mov	r1, r9
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f7ff ff8a 	bl	8009d24 <L_shift>
 8009e10:	4544      	cmp	r4, r8
 8009e12:	d934      	bls.n	8009e7e <__hexnan+0x10e>
 8009e14:	f1a8 0204 	sub.w	r2, r8, #4
 8009e18:	4623      	mov	r3, r4
 8009e1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009e1e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009e22:	429f      	cmp	r7, r3
 8009e24:	d2f9      	bcs.n	8009e1a <__hexnan+0xaa>
 8009e26:	1b3b      	subs	r3, r7, r4
 8009e28:	f023 0303 	bic.w	r3, r3, #3
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	3e03      	subs	r6, #3
 8009e30:	3401      	adds	r4, #1
 8009e32:	42a6      	cmp	r6, r4
 8009e34:	bf38      	it	cc
 8009e36:	2304      	movcc	r3, #4
 8009e38:	4443      	add	r3, r8
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f843 2b04 	str.w	r2, [r3], #4
 8009e40:	429f      	cmp	r7, r3
 8009e42:	d2fb      	bcs.n	8009e3c <__hexnan+0xcc>
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	b91b      	cbnz	r3, 8009e50 <__hexnan+0xe0>
 8009e48:	4547      	cmp	r7, r8
 8009e4a:	d126      	bne.n	8009e9a <__hexnan+0x12a>
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	603b      	str	r3, [r7, #0]
 8009e50:	2005      	movs	r0, #5
 8009e52:	e025      	b.n	8009ea0 <__hexnan+0x130>
 8009e54:	3501      	adds	r5, #1
 8009e56:	2d08      	cmp	r5, #8
 8009e58:	f10b 0b01 	add.w	fp, fp, #1
 8009e5c:	dd06      	ble.n	8009e6c <__hexnan+0xfc>
 8009e5e:	4544      	cmp	r4, r8
 8009e60:	d9c3      	bls.n	8009dea <__hexnan+0x7a>
 8009e62:	2300      	movs	r3, #0
 8009e64:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e68:	2501      	movs	r5, #1
 8009e6a:	3c04      	subs	r4, #4
 8009e6c:	6822      	ldr	r2, [r4, #0]
 8009e6e:	f000 000f 	and.w	r0, r0, #15
 8009e72:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009e76:	6020      	str	r0, [r4, #0]
 8009e78:	e7b7      	b.n	8009dea <__hexnan+0x7a>
 8009e7a:	2508      	movs	r5, #8
 8009e7c:	e7b5      	b.n	8009dea <__hexnan+0x7a>
 8009e7e:	9b01      	ldr	r3, [sp, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d0df      	beq.n	8009e44 <__hexnan+0xd4>
 8009e84:	f1c3 0320 	rsb	r3, r3, #32
 8009e88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e8c:	40da      	lsrs	r2, r3
 8009e8e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009e92:	4013      	ands	r3, r2
 8009e94:	f846 3c04 	str.w	r3, [r6, #-4]
 8009e98:	e7d4      	b.n	8009e44 <__hexnan+0xd4>
 8009e9a:	3f04      	subs	r7, #4
 8009e9c:	e7d2      	b.n	8009e44 <__hexnan+0xd4>
 8009e9e:	2004      	movs	r0, #4
 8009ea0:	b007      	add	sp, #28
 8009ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ea6 <__ascii_mbtowc>:
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	b901      	cbnz	r1, 8009eac <__ascii_mbtowc+0x6>
 8009eaa:	a901      	add	r1, sp, #4
 8009eac:	b142      	cbz	r2, 8009ec0 <__ascii_mbtowc+0x1a>
 8009eae:	b14b      	cbz	r3, 8009ec4 <__ascii_mbtowc+0x1e>
 8009eb0:	7813      	ldrb	r3, [r2, #0]
 8009eb2:	600b      	str	r3, [r1, #0]
 8009eb4:	7812      	ldrb	r2, [r2, #0]
 8009eb6:	1e10      	subs	r0, r2, #0
 8009eb8:	bf18      	it	ne
 8009eba:	2001      	movne	r0, #1
 8009ebc:	b002      	add	sp, #8
 8009ebe:	4770      	bx	lr
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	e7fb      	b.n	8009ebc <__ascii_mbtowc+0x16>
 8009ec4:	f06f 0001 	mvn.w	r0, #1
 8009ec8:	e7f8      	b.n	8009ebc <__ascii_mbtowc+0x16>

08009eca <_realloc_r>:
 8009eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ece:	4680      	mov	r8, r0
 8009ed0:	4614      	mov	r4, r2
 8009ed2:	460e      	mov	r6, r1
 8009ed4:	b921      	cbnz	r1, 8009ee0 <_realloc_r+0x16>
 8009ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eda:	4611      	mov	r1, r2
 8009edc:	f7fd be2e 	b.w	8007b3c <_malloc_r>
 8009ee0:	b92a      	cbnz	r2, 8009eee <_realloc_r+0x24>
 8009ee2:	f7fd fdb7 	bl	8007a54 <_free_r>
 8009ee6:	4625      	mov	r5, r4
 8009ee8:	4628      	mov	r0, r5
 8009eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eee:	f000 f842 	bl	8009f76 <_malloc_usable_size_r>
 8009ef2:	4284      	cmp	r4, r0
 8009ef4:	4607      	mov	r7, r0
 8009ef6:	d802      	bhi.n	8009efe <_realloc_r+0x34>
 8009ef8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009efc:	d812      	bhi.n	8009f24 <_realloc_r+0x5a>
 8009efe:	4621      	mov	r1, r4
 8009f00:	4640      	mov	r0, r8
 8009f02:	f7fd fe1b 	bl	8007b3c <_malloc_r>
 8009f06:	4605      	mov	r5, r0
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	d0ed      	beq.n	8009ee8 <_realloc_r+0x1e>
 8009f0c:	42bc      	cmp	r4, r7
 8009f0e:	4622      	mov	r2, r4
 8009f10:	4631      	mov	r1, r6
 8009f12:	bf28      	it	cs
 8009f14:	463a      	movcs	r2, r7
 8009f16:	f7ff fc23 	bl	8009760 <memcpy>
 8009f1a:	4631      	mov	r1, r6
 8009f1c:	4640      	mov	r0, r8
 8009f1e:	f7fd fd99 	bl	8007a54 <_free_r>
 8009f22:	e7e1      	b.n	8009ee8 <_realloc_r+0x1e>
 8009f24:	4635      	mov	r5, r6
 8009f26:	e7df      	b.n	8009ee8 <_realloc_r+0x1e>

08009f28 <__ascii_wctomb>:
 8009f28:	b149      	cbz	r1, 8009f3e <__ascii_wctomb+0x16>
 8009f2a:	2aff      	cmp	r2, #255	; 0xff
 8009f2c:	bf85      	ittet	hi
 8009f2e:	238a      	movhi	r3, #138	; 0x8a
 8009f30:	6003      	strhi	r3, [r0, #0]
 8009f32:	700a      	strbls	r2, [r1, #0]
 8009f34:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009f38:	bf98      	it	ls
 8009f3a:	2001      	movls	r0, #1
 8009f3c:	4770      	bx	lr
 8009f3e:	4608      	mov	r0, r1
 8009f40:	4770      	bx	lr
	...

08009f44 <fiprintf>:
 8009f44:	b40e      	push	{r1, r2, r3}
 8009f46:	b503      	push	{r0, r1, lr}
 8009f48:	4601      	mov	r1, r0
 8009f4a:	ab03      	add	r3, sp, #12
 8009f4c:	4805      	ldr	r0, [pc, #20]	; (8009f64 <fiprintf+0x20>)
 8009f4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f52:	6800      	ldr	r0, [r0, #0]
 8009f54:	9301      	str	r3, [sp, #4]
 8009f56:	f000 f83f 	bl	8009fd8 <_vfiprintf_r>
 8009f5a:	b002      	add	sp, #8
 8009f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f60:	b003      	add	sp, #12
 8009f62:	4770      	bx	lr
 8009f64:	20000064 	.word	0x20000064

08009f68 <abort>:
 8009f68:	b508      	push	{r3, lr}
 8009f6a:	2006      	movs	r0, #6
 8009f6c:	f000 fa0c 	bl	800a388 <raise>
 8009f70:	2001      	movs	r0, #1
 8009f72:	f7f7 fc57 	bl	8001824 <_exit>

08009f76 <_malloc_usable_size_r>:
 8009f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f7a:	1f18      	subs	r0, r3, #4
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	bfbc      	itt	lt
 8009f80:	580b      	ldrlt	r3, [r1, r0]
 8009f82:	18c0      	addlt	r0, r0, r3
 8009f84:	4770      	bx	lr

08009f86 <__sfputc_r>:
 8009f86:	6893      	ldr	r3, [r2, #8]
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	b410      	push	{r4}
 8009f8e:	6093      	str	r3, [r2, #8]
 8009f90:	da08      	bge.n	8009fa4 <__sfputc_r+0x1e>
 8009f92:	6994      	ldr	r4, [r2, #24]
 8009f94:	42a3      	cmp	r3, r4
 8009f96:	db01      	blt.n	8009f9c <__sfputc_r+0x16>
 8009f98:	290a      	cmp	r1, #10
 8009f9a:	d103      	bne.n	8009fa4 <__sfputc_r+0x1e>
 8009f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fa0:	f000 b934 	b.w	800a20c <__swbuf_r>
 8009fa4:	6813      	ldr	r3, [r2, #0]
 8009fa6:	1c58      	adds	r0, r3, #1
 8009fa8:	6010      	str	r0, [r2, #0]
 8009faa:	7019      	strb	r1, [r3, #0]
 8009fac:	4608      	mov	r0, r1
 8009fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <__sfputs_r>:
 8009fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	460f      	mov	r7, r1
 8009fba:	4614      	mov	r4, r2
 8009fbc:	18d5      	adds	r5, r2, r3
 8009fbe:	42ac      	cmp	r4, r5
 8009fc0:	d101      	bne.n	8009fc6 <__sfputs_r+0x12>
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	e007      	b.n	8009fd6 <__sfputs_r+0x22>
 8009fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fca:	463a      	mov	r2, r7
 8009fcc:	4630      	mov	r0, r6
 8009fce:	f7ff ffda 	bl	8009f86 <__sfputc_r>
 8009fd2:	1c43      	adds	r3, r0, #1
 8009fd4:	d1f3      	bne.n	8009fbe <__sfputs_r+0xa>
 8009fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fd8 <_vfiprintf_r>:
 8009fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fdc:	460d      	mov	r5, r1
 8009fde:	b09d      	sub	sp, #116	; 0x74
 8009fe0:	4614      	mov	r4, r2
 8009fe2:	4698      	mov	r8, r3
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	b118      	cbz	r0, 8009ff0 <_vfiprintf_r+0x18>
 8009fe8:	6a03      	ldr	r3, [r0, #32]
 8009fea:	b90b      	cbnz	r3, 8009ff0 <_vfiprintf_r+0x18>
 8009fec:	f7fc fd62 	bl	8006ab4 <__sinit>
 8009ff0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ff2:	07d9      	lsls	r1, r3, #31
 8009ff4:	d405      	bmi.n	800a002 <_vfiprintf_r+0x2a>
 8009ff6:	89ab      	ldrh	r3, [r5, #12]
 8009ff8:	059a      	lsls	r2, r3, #22
 8009ffa:	d402      	bmi.n	800a002 <_vfiprintf_r+0x2a>
 8009ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ffe:	f7fc fea4 	bl	8006d4a <__retarget_lock_acquire_recursive>
 800a002:	89ab      	ldrh	r3, [r5, #12]
 800a004:	071b      	lsls	r3, r3, #28
 800a006:	d501      	bpl.n	800a00c <_vfiprintf_r+0x34>
 800a008:	692b      	ldr	r3, [r5, #16]
 800a00a:	b99b      	cbnz	r3, 800a034 <_vfiprintf_r+0x5c>
 800a00c:	4629      	mov	r1, r5
 800a00e:	4630      	mov	r0, r6
 800a010:	f000 f93a 	bl	800a288 <__swsetup_r>
 800a014:	b170      	cbz	r0, 800a034 <_vfiprintf_r+0x5c>
 800a016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a018:	07dc      	lsls	r4, r3, #31
 800a01a:	d504      	bpl.n	800a026 <_vfiprintf_r+0x4e>
 800a01c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a020:	b01d      	add	sp, #116	; 0x74
 800a022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a026:	89ab      	ldrh	r3, [r5, #12]
 800a028:	0598      	lsls	r0, r3, #22
 800a02a:	d4f7      	bmi.n	800a01c <_vfiprintf_r+0x44>
 800a02c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a02e:	f7fc fe8d 	bl	8006d4c <__retarget_lock_release_recursive>
 800a032:	e7f3      	b.n	800a01c <_vfiprintf_r+0x44>
 800a034:	2300      	movs	r3, #0
 800a036:	9309      	str	r3, [sp, #36]	; 0x24
 800a038:	2320      	movs	r3, #32
 800a03a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a03e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a042:	2330      	movs	r3, #48	; 0x30
 800a044:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a1f8 <_vfiprintf_r+0x220>
 800a048:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a04c:	f04f 0901 	mov.w	r9, #1
 800a050:	4623      	mov	r3, r4
 800a052:	469a      	mov	sl, r3
 800a054:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a058:	b10a      	cbz	r2, 800a05e <_vfiprintf_r+0x86>
 800a05a:	2a25      	cmp	r2, #37	; 0x25
 800a05c:	d1f9      	bne.n	800a052 <_vfiprintf_r+0x7a>
 800a05e:	ebba 0b04 	subs.w	fp, sl, r4
 800a062:	d00b      	beq.n	800a07c <_vfiprintf_r+0xa4>
 800a064:	465b      	mov	r3, fp
 800a066:	4622      	mov	r2, r4
 800a068:	4629      	mov	r1, r5
 800a06a:	4630      	mov	r0, r6
 800a06c:	f7ff ffa2 	bl	8009fb4 <__sfputs_r>
 800a070:	3001      	adds	r0, #1
 800a072:	f000 80a9 	beq.w	800a1c8 <_vfiprintf_r+0x1f0>
 800a076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a078:	445a      	add	r2, fp
 800a07a:	9209      	str	r2, [sp, #36]	; 0x24
 800a07c:	f89a 3000 	ldrb.w	r3, [sl]
 800a080:	2b00      	cmp	r3, #0
 800a082:	f000 80a1 	beq.w	800a1c8 <_vfiprintf_r+0x1f0>
 800a086:	2300      	movs	r3, #0
 800a088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a08c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a090:	f10a 0a01 	add.w	sl, sl, #1
 800a094:	9304      	str	r3, [sp, #16]
 800a096:	9307      	str	r3, [sp, #28]
 800a098:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a09c:	931a      	str	r3, [sp, #104]	; 0x68
 800a09e:	4654      	mov	r4, sl
 800a0a0:	2205      	movs	r2, #5
 800a0a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a6:	4854      	ldr	r0, [pc, #336]	; (800a1f8 <_vfiprintf_r+0x220>)
 800a0a8:	f7f6 f8a2 	bl	80001f0 <memchr>
 800a0ac:	9a04      	ldr	r2, [sp, #16]
 800a0ae:	b9d8      	cbnz	r0, 800a0e8 <_vfiprintf_r+0x110>
 800a0b0:	06d1      	lsls	r1, r2, #27
 800a0b2:	bf44      	itt	mi
 800a0b4:	2320      	movmi	r3, #32
 800a0b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0ba:	0713      	lsls	r3, r2, #28
 800a0bc:	bf44      	itt	mi
 800a0be:	232b      	movmi	r3, #43	; 0x2b
 800a0c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ca:	d015      	beq.n	800a0f8 <_vfiprintf_r+0x120>
 800a0cc:	9a07      	ldr	r2, [sp, #28]
 800a0ce:	4654      	mov	r4, sl
 800a0d0:	2000      	movs	r0, #0
 800a0d2:	f04f 0c0a 	mov.w	ip, #10
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0dc:	3b30      	subs	r3, #48	; 0x30
 800a0de:	2b09      	cmp	r3, #9
 800a0e0:	d94d      	bls.n	800a17e <_vfiprintf_r+0x1a6>
 800a0e2:	b1b0      	cbz	r0, 800a112 <_vfiprintf_r+0x13a>
 800a0e4:	9207      	str	r2, [sp, #28]
 800a0e6:	e014      	b.n	800a112 <_vfiprintf_r+0x13a>
 800a0e8:	eba0 0308 	sub.w	r3, r0, r8
 800a0ec:	fa09 f303 	lsl.w	r3, r9, r3
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	9304      	str	r3, [sp, #16]
 800a0f4:	46a2      	mov	sl, r4
 800a0f6:	e7d2      	b.n	800a09e <_vfiprintf_r+0xc6>
 800a0f8:	9b03      	ldr	r3, [sp, #12]
 800a0fa:	1d19      	adds	r1, r3, #4
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	9103      	str	r1, [sp, #12]
 800a100:	2b00      	cmp	r3, #0
 800a102:	bfbb      	ittet	lt
 800a104:	425b      	neglt	r3, r3
 800a106:	f042 0202 	orrlt.w	r2, r2, #2
 800a10a:	9307      	strge	r3, [sp, #28]
 800a10c:	9307      	strlt	r3, [sp, #28]
 800a10e:	bfb8      	it	lt
 800a110:	9204      	strlt	r2, [sp, #16]
 800a112:	7823      	ldrb	r3, [r4, #0]
 800a114:	2b2e      	cmp	r3, #46	; 0x2e
 800a116:	d10c      	bne.n	800a132 <_vfiprintf_r+0x15a>
 800a118:	7863      	ldrb	r3, [r4, #1]
 800a11a:	2b2a      	cmp	r3, #42	; 0x2a
 800a11c:	d134      	bne.n	800a188 <_vfiprintf_r+0x1b0>
 800a11e:	9b03      	ldr	r3, [sp, #12]
 800a120:	1d1a      	adds	r2, r3, #4
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	9203      	str	r2, [sp, #12]
 800a126:	2b00      	cmp	r3, #0
 800a128:	bfb8      	it	lt
 800a12a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a12e:	3402      	adds	r4, #2
 800a130:	9305      	str	r3, [sp, #20]
 800a132:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a208 <_vfiprintf_r+0x230>
 800a136:	7821      	ldrb	r1, [r4, #0]
 800a138:	2203      	movs	r2, #3
 800a13a:	4650      	mov	r0, sl
 800a13c:	f7f6 f858 	bl	80001f0 <memchr>
 800a140:	b138      	cbz	r0, 800a152 <_vfiprintf_r+0x17a>
 800a142:	9b04      	ldr	r3, [sp, #16]
 800a144:	eba0 000a 	sub.w	r0, r0, sl
 800a148:	2240      	movs	r2, #64	; 0x40
 800a14a:	4082      	lsls	r2, r0
 800a14c:	4313      	orrs	r3, r2
 800a14e:	3401      	adds	r4, #1
 800a150:	9304      	str	r3, [sp, #16]
 800a152:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a156:	4829      	ldr	r0, [pc, #164]	; (800a1fc <_vfiprintf_r+0x224>)
 800a158:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a15c:	2206      	movs	r2, #6
 800a15e:	f7f6 f847 	bl	80001f0 <memchr>
 800a162:	2800      	cmp	r0, #0
 800a164:	d03f      	beq.n	800a1e6 <_vfiprintf_r+0x20e>
 800a166:	4b26      	ldr	r3, [pc, #152]	; (800a200 <_vfiprintf_r+0x228>)
 800a168:	bb1b      	cbnz	r3, 800a1b2 <_vfiprintf_r+0x1da>
 800a16a:	9b03      	ldr	r3, [sp, #12]
 800a16c:	3307      	adds	r3, #7
 800a16e:	f023 0307 	bic.w	r3, r3, #7
 800a172:	3308      	adds	r3, #8
 800a174:	9303      	str	r3, [sp, #12]
 800a176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a178:	443b      	add	r3, r7
 800a17a:	9309      	str	r3, [sp, #36]	; 0x24
 800a17c:	e768      	b.n	800a050 <_vfiprintf_r+0x78>
 800a17e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a182:	460c      	mov	r4, r1
 800a184:	2001      	movs	r0, #1
 800a186:	e7a6      	b.n	800a0d6 <_vfiprintf_r+0xfe>
 800a188:	2300      	movs	r3, #0
 800a18a:	3401      	adds	r4, #1
 800a18c:	9305      	str	r3, [sp, #20]
 800a18e:	4619      	mov	r1, r3
 800a190:	f04f 0c0a 	mov.w	ip, #10
 800a194:	4620      	mov	r0, r4
 800a196:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a19a:	3a30      	subs	r2, #48	; 0x30
 800a19c:	2a09      	cmp	r2, #9
 800a19e:	d903      	bls.n	800a1a8 <_vfiprintf_r+0x1d0>
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d0c6      	beq.n	800a132 <_vfiprintf_r+0x15a>
 800a1a4:	9105      	str	r1, [sp, #20]
 800a1a6:	e7c4      	b.n	800a132 <_vfiprintf_r+0x15a>
 800a1a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e7f0      	b.n	800a194 <_vfiprintf_r+0x1bc>
 800a1b2:	ab03      	add	r3, sp, #12
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	462a      	mov	r2, r5
 800a1b8:	4b12      	ldr	r3, [pc, #72]	; (800a204 <_vfiprintf_r+0x22c>)
 800a1ba:	a904      	add	r1, sp, #16
 800a1bc:	4630      	mov	r0, r6
 800a1be:	f7fb fe17 	bl	8005df0 <_printf_float>
 800a1c2:	4607      	mov	r7, r0
 800a1c4:	1c78      	adds	r0, r7, #1
 800a1c6:	d1d6      	bne.n	800a176 <_vfiprintf_r+0x19e>
 800a1c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1ca:	07d9      	lsls	r1, r3, #31
 800a1cc:	d405      	bmi.n	800a1da <_vfiprintf_r+0x202>
 800a1ce:	89ab      	ldrh	r3, [r5, #12]
 800a1d0:	059a      	lsls	r2, r3, #22
 800a1d2:	d402      	bmi.n	800a1da <_vfiprintf_r+0x202>
 800a1d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1d6:	f7fc fdb9 	bl	8006d4c <__retarget_lock_release_recursive>
 800a1da:	89ab      	ldrh	r3, [r5, #12]
 800a1dc:	065b      	lsls	r3, r3, #25
 800a1de:	f53f af1d 	bmi.w	800a01c <_vfiprintf_r+0x44>
 800a1e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1e4:	e71c      	b.n	800a020 <_vfiprintf_r+0x48>
 800a1e6:	ab03      	add	r3, sp, #12
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	462a      	mov	r2, r5
 800a1ec:	4b05      	ldr	r3, [pc, #20]	; (800a204 <_vfiprintf_r+0x22c>)
 800a1ee:	a904      	add	r1, sp, #16
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	f7fc f8a1 	bl	8006338 <_printf_i>
 800a1f6:	e7e4      	b.n	800a1c2 <_vfiprintf_r+0x1ea>
 800a1f8:	0800a9c9 	.word	0x0800a9c9
 800a1fc:	0800a9d3 	.word	0x0800a9d3
 800a200:	08005df1 	.word	0x08005df1
 800a204:	08009fb5 	.word	0x08009fb5
 800a208:	0800a9cf 	.word	0x0800a9cf

0800a20c <__swbuf_r>:
 800a20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20e:	460e      	mov	r6, r1
 800a210:	4614      	mov	r4, r2
 800a212:	4605      	mov	r5, r0
 800a214:	b118      	cbz	r0, 800a21e <__swbuf_r+0x12>
 800a216:	6a03      	ldr	r3, [r0, #32]
 800a218:	b90b      	cbnz	r3, 800a21e <__swbuf_r+0x12>
 800a21a:	f7fc fc4b 	bl	8006ab4 <__sinit>
 800a21e:	69a3      	ldr	r3, [r4, #24]
 800a220:	60a3      	str	r3, [r4, #8]
 800a222:	89a3      	ldrh	r3, [r4, #12]
 800a224:	071a      	lsls	r2, r3, #28
 800a226:	d525      	bpl.n	800a274 <__swbuf_r+0x68>
 800a228:	6923      	ldr	r3, [r4, #16]
 800a22a:	b31b      	cbz	r3, 800a274 <__swbuf_r+0x68>
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	6922      	ldr	r2, [r4, #16]
 800a230:	1a98      	subs	r0, r3, r2
 800a232:	6963      	ldr	r3, [r4, #20]
 800a234:	b2f6      	uxtb	r6, r6
 800a236:	4283      	cmp	r3, r0
 800a238:	4637      	mov	r7, r6
 800a23a:	dc04      	bgt.n	800a246 <__swbuf_r+0x3a>
 800a23c:	4621      	mov	r1, r4
 800a23e:	4628      	mov	r0, r5
 800a240:	f7ff fa2a 	bl	8009698 <_fflush_r>
 800a244:	b9e0      	cbnz	r0, 800a280 <__swbuf_r+0x74>
 800a246:	68a3      	ldr	r3, [r4, #8]
 800a248:	3b01      	subs	r3, #1
 800a24a:	60a3      	str	r3, [r4, #8]
 800a24c:	6823      	ldr	r3, [r4, #0]
 800a24e:	1c5a      	adds	r2, r3, #1
 800a250:	6022      	str	r2, [r4, #0]
 800a252:	701e      	strb	r6, [r3, #0]
 800a254:	6962      	ldr	r2, [r4, #20]
 800a256:	1c43      	adds	r3, r0, #1
 800a258:	429a      	cmp	r2, r3
 800a25a:	d004      	beq.n	800a266 <__swbuf_r+0x5a>
 800a25c:	89a3      	ldrh	r3, [r4, #12]
 800a25e:	07db      	lsls	r3, r3, #31
 800a260:	d506      	bpl.n	800a270 <__swbuf_r+0x64>
 800a262:	2e0a      	cmp	r6, #10
 800a264:	d104      	bne.n	800a270 <__swbuf_r+0x64>
 800a266:	4621      	mov	r1, r4
 800a268:	4628      	mov	r0, r5
 800a26a:	f7ff fa15 	bl	8009698 <_fflush_r>
 800a26e:	b938      	cbnz	r0, 800a280 <__swbuf_r+0x74>
 800a270:	4638      	mov	r0, r7
 800a272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a274:	4621      	mov	r1, r4
 800a276:	4628      	mov	r0, r5
 800a278:	f000 f806 	bl	800a288 <__swsetup_r>
 800a27c:	2800      	cmp	r0, #0
 800a27e:	d0d5      	beq.n	800a22c <__swbuf_r+0x20>
 800a280:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a284:	e7f4      	b.n	800a270 <__swbuf_r+0x64>
	...

0800a288 <__swsetup_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	4b2a      	ldr	r3, [pc, #168]	; (800a334 <__swsetup_r+0xac>)
 800a28c:	4605      	mov	r5, r0
 800a28e:	6818      	ldr	r0, [r3, #0]
 800a290:	460c      	mov	r4, r1
 800a292:	b118      	cbz	r0, 800a29c <__swsetup_r+0x14>
 800a294:	6a03      	ldr	r3, [r0, #32]
 800a296:	b90b      	cbnz	r3, 800a29c <__swsetup_r+0x14>
 800a298:	f7fc fc0c 	bl	8006ab4 <__sinit>
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2a2:	0718      	lsls	r0, r3, #28
 800a2a4:	d422      	bmi.n	800a2ec <__swsetup_r+0x64>
 800a2a6:	06d9      	lsls	r1, r3, #27
 800a2a8:	d407      	bmi.n	800a2ba <__swsetup_r+0x32>
 800a2aa:	2309      	movs	r3, #9
 800a2ac:	602b      	str	r3, [r5, #0]
 800a2ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2b2:	81a3      	strh	r3, [r4, #12]
 800a2b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2b8:	e034      	b.n	800a324 <__swsetup_r+0x9c>
 800a2ba:	0758      	lsls	r0, r3, #29
 800a2bc:	d512      	bpl.n	800a2e4 <__swsetup_r+0x5c>
 800a2be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2c0:	b141      	cbz	r1, 800a2d4 <__swsetup_r+0x4c>
 800a2c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2c6:	4299      	cmp	r1, r3
 800a2c8:	d002      	beq.n	800a2d0 <__swsetup_r+0x48>
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	f7fd fbc2 	bl	8007a54 <_free_r>
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	6363      	str	r3, [r4, #52]	; 0x34
 800a2d4:	89a3      	ldrh	r3, [r4, #12]
 800a2d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2da:	81a3      	strh	r3, [r4, #12]
 800a2dc:	2300      	movs	r3, #0
 800a2de:	6063      	str	r3, [r4, #4]
 800a2e0:	6923      	ldr	r3, [r4, #16]
 800a2e2:	6023      	str	r3, [r4, #0]
 800a2e4:	89a3      	ldrh	r3, [r4, #12]
 800a2e6:	f043 0308 	orr.w	r3, r3, #8
 800a2ea:	81a3      	strh	r3, [r4, #12]
 800a2ec:	6923      	ldr	r3, [r4, #16]
 800a2ee:	b94b      	cbnz	r3, 800a304 <__swsetup_r+0x7c>
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2fa:	d003      	beq.n	800a304 <__swsetup_r+0x7c>
 800a2fc:	4621      	mov	r1, r4
 800a2fe:	4628      	mov	r0, r5
 800a300:	f000 f884 	bl	800a40c <__smakebuf_r>
 800a304:	89a0      	ldrh	r0, [r4, #12]
 800a306:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a30a:	f010 0301 	ands.w	r3, r0, #1
 800a30e:	d00a      	beq.n	800a326 <__swsetup_r+0x9e>
 800a310:	2300      	movs	r3, #0
 800a312:	60a3      	str	r3, [r4, #8]
 800a314:	6963      	ldr	r3, [r4, #20]
 800a316:	425b      	negs	r3, r3
 800a318:	61a3      	str	r3, [r4, #24]
 800a31a:	6923      	ldr	r3, [r4, #16]
 800a31c:	b943      	cbnz	r3, 800a330 <__swsetup_r+0xa8>
 800a31e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a322:	d1c4      	bne.n	800a2ae <__swsetup_r+0x26>
 800a324:	bd38      	pop	{r3, r4, r5, pc}
 800a326:	0781      	lsls	r1, r0, #30
 800a328:	bf58      	it	pl
 800a32a:	6963      	ldrpl	r3, [r4, #20]
 800a32c:	60a3      	str	r3, [r4, #8]
 800a32e:	e7f4      	b.n	800a31a <__swsetup_r+0x92>
 800a330:	2000      	movs	r0, #0
 800a332:	e7f7      	b.n	800a324 <__swsetup_r+0x9c>
 800a334:	20000064 	.word	0x20000064

0800a338 <_raise_r>:
 800a338:	291f      	cmp	r1, #31
 800a33a:	b538      	push	{r3, r4, r5, lr}
 800a33c:	4604      	mov	r4, r0
 800a33e:	460d      	mov	r5, r1
 800a340:	d904      	bls.n	800a34c <_raise_r+0x14>
 800a342:	2316      	movs	r3, #22
 800a344:	6003      	str	r3, [r0, #0]
 800a346:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a34a:	bd38      	pop	{r3, r4, r5, pc}
 800a34c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a34e:	b112      	cbz	r2, 800a356 <_raise_r+0x1e>
 800a350:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a354:	b94b      	cbnz	r3, 800a36a <_raise_r+0x32>
 800a356:	4620      	mov	r0, r4
 800a358:	f000 f830 	bl	800a3bc <_getpid_r>
 800a35c:	462a      	mov	r2, r5
 800a35e:	4601      	mov	r1, r0
 800a360:	4620      	mov	r0, r4
 800a362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a366:	f000 b817 	b.w	800a398 <_kill_r>
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d00a      	beq.n	800a384 <_raise_r+0x4c>
 800a36e:	1c59      	adds	r1, r3, #1
 800a370:	d103      	bne.n	800a37a <_raise_r+0x42>
 800a372:	2316      	movs	r3, #22
 800a374:	6003      	str	r3, [r0, #0]
 800a376:	2001      	movs	r0, #1
 800a378:	e7e7      	b.n	800a34a <_raise_r+0x12>
 800a37a:	2400      	movs	r4, #0
 800a37c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a380:	4628      	mov	r0, r5
 800a382:	4798      	blx	r3
 800a384:	2000      	movs	r0, #0
 800a386:	e7e0      	b.n	800a34a <_raise_r+0x12>

0800a388 <raise>:
 800a388:	4b02      	ldr	r3, [pc, #8]	; (800a394 <raise+0xc>)
 800a38a:	4601      	mov	r1, r0
 800a38c:	6818      	ldr	r0, [r3, #0]
 800a38e:	f7ff bfd3 	b.w	800a338 <_raise_r>
 800a392:	bf00      	nop
 800a394:	20000064 	.word	0x20000064

0800a398 <_kill_r>:
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	4d07      	ldr	r5, [pc, #28]	; (800a3b8 <_kill_r+0x20>)
 800a39c:	2300      	movs	r3, #0
 800a39e:	4604      	mov	r4, r0
 800a3a0:	4608      	mov	r0, r1
 800a3a2:	4611      	mov	r1, r2
 800a3a4:	602b      	str	r3, [r5, #0]
 800a3a6:	f7f7 fa2d 	bl	8001804 <_kill>
 800a3aa:	1c43      	adds	r3, r0, #1
 800a3ac:	d102      	bne.n	800a3b4 <_kill_r+0x1c>
 800a3ae:	682b      	ldr	r3, [r5, #0]
 800a3b0:	b103      	cbz	r3, 800a3b4 <_kill_r+0x1c>
 800a3b2:	6023      	str	r3, [r4, #0]
 800a3b4:	bd38      	pop	{r3, r4, r5, pc}
 800a3b6:	bf00      	nop
 800a3b8:	20000b84 	.word	0x20000b84

0800a3bc <_getpid_r>:
 800a3bc:	f7f7 ba1a 	b.w	80017f4 <_getpid>

0800a3c0 <__swhatbuf_r>:
 800a3c0:	b570      	push	{r4, r5, r6, lr}
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c8:	2900      	cmp	r1, #0
 800a3ca:	b096      	sub	sp, #88	; 0x58
 800a3cc:	4615      	mov	r5, r2
 800a3ce:	461e      	mov	r6, r3
 800a3d0:	da0d      	bge.n	800a3ee <__swhatbuf_r+0x2e>
 800a3d2:	89a3      	ldrh	r3, [r4, #12]
 800a3d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a3d8:	f04f 0100 	mov.w	r1, #0
 800a3dc:	bf0c      	ite	eq
 800a3de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a3e2:	2340      	movne	r3, #64	; 0x40
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	6031      	str	r1, [r6, #0]
 800a3e8:	602b      	str	r3, [r5, #0]
 800a3ea:	b016      	add	sp, #88	; 0x58
 800a3ec:	bd70      	pop	{r4, r5, r6, pc}
 800a3ee:	466a      	mov	r2, sp
 800a3f0:	f000 f848 	bl	800a484 <_fstat_r>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	dbec      	blt.n	800a3d2 <__swhatbuf_r+0x12>
 800a3f8:	9901      	ldr	r1, [sp, #4]
 800a3fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a3fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a402:	4259      	negs	r1, r3
 800a404:	4159      	adcs	r1, r3
 800a406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a40a:	e7eb      	b.n	800a3e4 <__swhatbuf_r+0x24>

0800a40c <__smakebuf_r>:
 800a40c:	898b      	ldrh	r3, [r1, #12]
 800a40e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a410:	079d      	lsls	r5, r3, #30
 800a412:	4606      	mov	r6, r0
 800a414:	460c      	mov	r4, r1
 800a416:	d507      	bpl.n	800a428 <__smakebuf_r+0x1c>
 800a418:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	6123      	str	r3, [r4, #16]
 800a420:	2301      	movs	r3, #1
 800a422:	6163      	str	r3, [r4, #20]
 800a424:	b002      	add	sp, #8
 800a426:	bd70      	pop	{r4, r5, r6, pc}
 800a428:	ab01      	add	r3, sp, #4
 800a42a:	466a      	mov	r2, sp
 800a42c:	f7ff ffc8 	bl	800a3c0 <__swhatbuf_r>
 800a430:	9900      	ldr	r1, [sp, #0]
 800a432:	4605      	mov	r5, r0
 800a434:	4630      	mov	r0, r6
 800a436:	f7fd fb81 	bl	8007b3c <_malloc_r>
 800a43a:	b948      	cbnz	r0, 800a450 <__smakebuf_r+0x44>
 800a43c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a440:	059a      	lsls	r2, r3, #22
 800a442:	d4ef      	bmi.n	800a424 <__smakebuf_r+0x18>
 800a444:	f023 0303 	bic.w	r3, r3, #3
 800a448:	f043 0302 	orr.w	r3, r3, #2
 800a44c:	81a3      	strh	r3, [r4, #12]
 800a44e:	e7e3      	b.n	800a418 <__smakebuf_r+0xc>
 800a450:	89a3      	ldrh	r3, [r4, #12]
 800a452:	6020      	str	r0, [r4, #0]
 800a454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a458:	81a3      	strh	r3, [r4, #12]
 800a45a:	9b00      	ldr	r3, [sp, #0]
 800a45c:	6163      	str	r3, [r4, #20]
 800a45e:	9b01      	ldr	r3, [sp, #4]
 800a460:	6120      	str	r0, [r4, #16]
 800a462:	b15b      	cbz	r3, 800a47c <__smakebuf_r+0x70>
 800a464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a468:	4630      	mov	r0, r6
 800a46a:	f000 f81d 	bl	800a4a8 <_isatty_r>
 800a46e:	b128      	cbz	r0, 800a47c <__smakebuf_r+0x70>
 800a470:	89a3      	ldrh	r3, [r4, #12]
 800a472:	f023 0303 	bic.w	r3, r3, #3
 800a476:	f043 0301 	orr.w	r3, r3, #1
 800a47a:	81a3      	strh	r3, [r4, #12]
 800a47c:	89a3      	ldrh	r3, [r4, #12]
 800a47e:	431d      	orrs	r5, r3
 800a480:	81a5      	strh	r5, [r4, #12]
 800a482:	e7cf      	b.n	800a424 <__smakebuf_r+0x18>

0800a484 <_fstat_r>:
 800a484:	b538      	push	{r3, r4, r5, lr}
 800a486:	4d07      	ldr	r5, [pc, #28]	; (800a4a4 <_fstat_r+0x20>)
 800a488:	2300      	movs	r3, #0
 800a48a:	4604      	mov	r4, r0
 800a48c:	4608      	mov	r0, r1
 800a48e:	4611      	mov	r1, r2
 800a490:	602b      	str	r3, [r5, #0]
 800a492:	f7f7 fa16 	bl	80018c2 <_fstat>
 800a496:	1c43      	adds	r3, r0, #1
 800a498:	d102      	bne.n	800a4a0 <_fstat_r+0x1c>
 800a49a:	682b      	ldr	r3, [r5, #0]
 800a49c:	b103      	cbz	r3, 800a4a0 <_fstat_r+0x1c>
 800a49e:	6023      	str	r3, [r4, #0]
 800a4a0:	bd38      	pop	{r3, r4, r5, pc}
 800a4a2:	bf00      	nop
 800a4a4:	20000b84 	.word	0x20000b84

0800a4a8 <_isatty_r>:
 800a4a8:	b538      	push	{r3, r4, r5, lr}
 800a4aa:	4d06      	ldr	r5, [pc, #24]	; (800a4c4 <_isatty_r+0x1c>)
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	4608      	mov	r0, r1
 800a4b2:	602b      	str	r3, [r5, #0]
 800a4b4:	f7f7 fa15 	bl	80018e2 <_isatty>
 800a4b8:	1c43      	adds	r3, r0, #1
 800a4ba:	d102      	bne.n	800a4c2 <_isatty_r+0x1a>
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	b103      	cbz	r3, 800a4c2 <_isatty_r+0x1a>
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	bd38      	pop	{r3, r4, r5, pc}
 800a4c4:	20000b84 	.word	0x20000b84

0800a4c8 <_init>:
 800a4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ca:	bf00      	nop
 800a4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ce:	bc08      	pop	{r3}
 800a4d0:	469e      	mov	lr, r3
 800a4d2:	4770      	bx	lr

0800a4d4 <_fini>:
 800a4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d6:	bf00      	nop
 800a4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4da:	bc08      	pop	{r3}
 800a4dc:	469e      	mov	lr, r3
 800a4de:	4770      	bx	lr
